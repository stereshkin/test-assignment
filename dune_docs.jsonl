{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Welcome Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Welcome  (/home) Quickstart  (/quickstart) Web3 Data Resources  (/learning-resources) Jump right in Create your first query  (/learning/how-tos/create-your-first-query) Create New Content  (/learning/how-tos/create-new-content) Create your first visualization  (/learning/how-tos/create-your-first-visualization) Navigate the Query Editor  (/learning/how-tos/navigate-query-editor) Find Datasets on Dune  (/learning/how-tos/find-datasets) Export Data Out of Dune  (/learning/how-tos/export-data-out) Create and Manage Teams on Dune  (/learning/how-tos/create-and-manage-teams) Understanding Credits on Dune  (/learning/how-tos/credit-system-on-dune) Search for Content on Dune  (/learning/how-tos/search-for-content) Share Dune Content  (/learning/how-tos/share-dune-content) Share your query  (/learning/how-tos/share-your-query) Transfer Ownership  (/learning/how-tos/transfer-ownership) Welcome Dune is a web-based platform that allows you to query public blockchain data and aggregate it into beautiful dashboards. Blockchains are open and transparent, but each chain is unique\u2014making it difficult to understand, ingest, and aggregate data. Dune gives you the tools to analyze cross-chain data for different tokens, wallets, and protocols. You can also easily share your work with the community, export and integrate data into your own applications, and more. \n ", "url": "https://docs.dune.com/home"}
{"content": "\u200b Go through our YouTube Tutorials \n We\u2019ve created tutorials covering all product surfaces of Dune, how to navigate and understand all tables, and how to level up as a crypto data analyst.  Check out the full playlist.  (https://www.youtube.com/playlist?list=PLK3b5d4iK10ext4v-GBySekaA8-GP8quD) \n \n ", "url": "https://docs.dune.com/home#go-through-our-youtube-tutorials"}
{"content": "\u200b Start building \n Ready to start building? Once you have an  account  (https://dune.com/auth/register)  and you have reviewed the  Quickstart  (quickstart) , check out these essentials to start using Dune. \n Web App Learn about the Dune Web App, your portal to creating, viewing, and interacting with blockchain analytics dashboards.  (/web-app) Data Catalog Explore our comprehensive Data Catalog to find and utilize the exact datasets you need for your queries and analytics.  (/data-catalog) API Integrate Dune directly into your workflow with our API, allowing for automated data extraction and analysis.  (/api-reference) Query Engine Discover the power of the Dune Query Engine to execute advanced SQL queries and analyze blockchain data.  (/query-engine) Alerts Set up alerts to be notified when specific conditions are met in the data.  (/web-app/alerts) \n Quickstart \nTo get started with Dune in 5 minutes, see the  Quickstart  (/quickstart) . \n ", "url": "https://docs.dune.com/home#start-building"}
{"content": "\u200b Learn more \n If you are new to blockchain or SQL \u2014or want to go deeper on Dune concepts and best practices\u2014 check out the following resources: \n \n Dune Official Getting Started Video Series  (https://www.youtube.com/watch?v=S-cctFmR828&list=PLK3b5d4iK10ext4v-GBySekaA8-GP8quD&index=1)  to learn how data flows and how to navigate the Dune app to get the most out of it \n Join our community in  Discord  (https://discord.gg/FjwGvbgDFS)  to get support through the  #\ud83d\udc25\ufe31beginners  and  #\ud83d\ude4b\ufe31query-questions  channels \n \n You can also level up by following the  crypto data analyst roadmap  (https://roadmap.sh/r?id=65fee5b66deb533d6e19fb88) : \n \n \n ", "url": "https://docs.dune.com/home#learn-more"}
{"content": "\u200b Why Dune? \n Dune\u2014along with our massive community of users and experts\u2014provides powerful tools and analysis of all onchain data. You can find a  dashboard  (https://dune.com/browse/dashboards?q=dex&order=favorites&time_range=all)  for pretty much anything web3-related, including for EVMs like Ethereum, Polygon, Goerli, and Optimism\u2014and non-EVM chains like Solana and Bitcoin. \n Examples of real dashboards: \n \n NFT marketplaces  (https://dune.com/hildobby/ethereum-nfts) \n DEX metrics  (https://dune.com/hagaetc/dex-metrics) \n Project metrics  (https://dune.com/whale_hunter/unibot-revenue) \n DAO Accounting (Maker)  (https://dune.com/steakhouse/makerdao) \n Base Chain Metrics  (https://dune.com/optimismfnd/Optimism) \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /home) Quickstart  (/quickstart) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Go through our YouTube Tutorials  (#go-through-our-youtube-tutorials) Start building  (#start-building) Learn more  (#learn-more) Why Dune?  (#why-dune)", "url": "https://docs.dune.com/home#why-dune"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Snowflake Datashare Overview Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/datashare/datashare) Getting Started  (/datashare/datashare-trial) FAQs  (/datashare/datashare-faqs) Snowflake Datashare Overview You can access all of Dune\u2019s data via the Snowflake data marketplace. Unlock the full potential of blockchain analytics with Dune\u2019s Datashare on Snowflake. Gain access to Dune\u2019s full data catalog with over 1.5 million tables, featuring raw blockchain data, human-readable smart contracts, detailed insights into protocols, dex/nft trades, and comprehensive cross-chain data. All are directly available on the Snowflake Marketplace, making it the most extensive and rich resource for blockchain data in the crypto universe. \n ", "url": "https://docs.dune.com/datashare/datashare"}
{"content": "\u200b Key Features \n \n Extensive Data Catalog : The largest assembly of blockchain data in the crypto space, at your fingertips. \n Cross-Chain Insights : Abstracted and harmonized data from more than 15 blockchains, providing a panoramic view of the blockchain ecosystem. \n Human-Readable Smart Contracts : Simplifying the complexity of smart contracts, making them accessible and understandable. \n Direct Access via Snowflake Marketplace : Seamless integration and access through the Snowflake data marketplace, ensuring optimal performance and reduced query costs. \n Cross Region Replication : Data is available in multiple regions to ensure data proximity and help keep your query costs low. \n Precision and Accuracy : Data is meticulously curated and maintained, ensuring the highest quality and reliability. \n \n ", "url": "https://docs.dune.com/datashare/datashare#key-features"}
{"content": "\u200b Datashare 101\u2019s \n To start leveraging Dune\u2019s Datashare on Snowflake for your blockchain analytics needs, visit the Dune profile on the  Snowflake Marketplace  (https://app.snowflake.com/marketplace/providers/GZSVZMYSCO/Dune) . There are trial tables available. If interested in participating in the trial please refer to our trial guide under  getting started  (/datashare/datashare-trial) . \n ", "url": "https://docs.dune.com/datashare/datashare#datashare-101s"}
{"content": "\u200b Dune vs. Datashare \n The data we provide on the Snowflake Marketplace is the same data that powers our analytics platform. However, since the data is in a different environment, there are slight differences in the way we need to store the data. \n ", "url": "https://docs.dune.com/datashare/datashare#dune-vs-datashare"}
{"content": "\u200b Datatypes \n On Snowflake, the way we store data is different, since there is no native support for common blockchain data types in Snowflake. This affects the way we store addresses, hashes, call data and other varbinary data. Furthermore, high-precisions integers like  uint256  and  int256  are also affected. \n ", "url": "https://docs.dune.com/datashare/datashare#datatypes"}
{"content": "\u200b Varbinary Data \n For columns that have the datatype  varbinary  in Dune, there are two columns in Snowflake named \u201ccolumn_name\u201d and \u201ccolumn_name_hex\u201d (e.g., hash and hash_hex). \u201cColumn_name\u201d is of type  varbinary , \u201ccolumn_name_hex\u201d is of type  string  and contains the 0x-prefixed lowercase hex representation of the binary data for convenience. For complex queries, it is recommended to use the \u201ccolumn_name\u201d column, as it is more efficient. Snowflake does not support storing  varbinary  data with a  0x  prefix, so we store the data as  varbinary  and provide a  string  column with the hex representation for convenience. Queries using \u201chash_hex\u201d will be much slower than queries using \u201chash\u201d due to the data type. \n Database Column Name Data Type Data Display Sample Dune hash varbinary 0xefb2e2c26974f72d9f3f04c693db73ecc679dd60 Snowflake hash varbinary EFB2E2C26974F72D9F3F04C693DB73ECC679DD60 Snowflake hash_hex string \u20190xEfB2E2c26974F72D9f3f04C693DB73eCc679dd60\u2019 \n --Using hash: \n select   *   from  ethereum . transactions   where   hash   =  X 'efb2e2c26974f72d9f3f04c693db73ecc679dd60' \n --Using hash_hex: \n select   *   from  ethereum . transactions   where  hash_hex  =  LOWER ( '0xEfB2E2c26974F72D9f3f04C693DB73eCc679dd60' )   -- Not recommended \n \n  Varbinary data in Snowflake is displayed as  ABCDEF  but needs to be queried via  X'abcdef' . There is a difference between the representation and the actual data.  \n ", "url": "https://docs.dune.com/datashare/datashare#varbinary-data"}
{"content": "\u200b High Precision Integers \n For most columns with type  INT256  or  UINT256  in Dune, there are two columns in Snowflake, one of type  DOUBLE , and one of type  VARBINARY . The  VARBINARY  column contains the 32-byte, big-endian, 2s complement representation of the INT256 or UINT256 number. The DOUBLE column is named \u201ccolumn_name\u201d while the  VARBINARY  column is usually named \u201ccolumn_name_binary\u201d or \u201ccolumn_name_raw\u201d. For most use cases, the  DOUBLE  column is sufficient, but for queries that require exact precision, it is recommended to use the Dune query engine, as it has native support for these data types. \n The  VARBINARY  datatype columns are useful when exact precision is needed, but calculations are not required. For example, if you want to join on  token_id  for erc1155 transfers, you can use the  VARBINARY  column  token_id_binary . Using double for this would not work, as the precision is not sufficient. \n Database Column Name Data Type Data Display Sample Dune column_name INT256 123456789012345678901234567890123456789 Snowflake column_name DOUBLE 3.4567890123456788e+16 Snowflake column_name_binary VARBINARY X\u20195ce0e9a56015fec5aadfa328ae398115\u2019 Snowflake column_name_raw VARBINARY X\u20195ce0e9a56015fec5aadfa328ae398115\u2019 \n  Varbinary data in Snowflake is displayed as  ABCDEF  but needs to be queried via  X'abcdef' . There is a difference between the representation and the actual data.  Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /datashare/datashare) Getting Started  (/datashare/datashare-trial) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Key Features  (#key-features) Datashare 101\u2019s  (#datashare-101s) Dune vs. Datashare  (#dune-vs-datashare) Datatypes  (#datatypes) Varbinary Data  (#varbinary-data) High Precision Integers  (#high-precision-integers)", "url": "https://docs.dune.com/datashare/datashare#high-precision-integers"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Dune API Overview Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Queries Materialized Views Webhooks Data Management Endpoints Tables Preset Endpoints DEX EigenLayer EVM Contracts Farcaster Markets Projects Dune API Overview Dune API provides a variety of endpoints for developers, ranging from low-level, customizable options to high-level, preset endpoints ready for immediate use. \n \n ", "url": "https://docs.dune.com/api-reference/overview/introduction"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Jump right in Understanding Credits on Dune Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Welcome  (/home) Quickstart  (/quickstart) Web3 Data Resources  (/learning-resources) Jump right in Create your first query  (/learning/how-tos/create-your-first-query) Create New Content  (/learning/how-tos/create-new-content) Create your first visualization  (/learning/how-tos/create-your-first-visualization) Navigate the Query Editor  (/learning/how-tos/navigate-query-editor) Find Datasets on Dune  (/learning/how-tos/find-datasets) Export Data Out of Dune  (/learning/how-tos/export-data-out) Create and Manage Teams on Dune  (/learning/how-tos/create-and-manage-teams) Understanding Credits on Dune  (/learning/how-tos/credit-system-on-dune) Search for Content on Dune  (/learning/how-tos/search-for-content) Share Dune Content  (/learning/how-tos/share-dune-content) Share your query  (/learning/how-tos/share-your-query) Transfer Ownership  (/learning/how-tos/transfer-ownership) Jump right in Understanding Credits on Dune What is the credit system on Dune and how credits work on Dune Dune\u2019s operations largely rely on a credit system. This guide will explain the concept of credits, their consumption, and management. \n ", "url": "https://docs.dune.com/learning/how-tos/credit-system-on-dune"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Jump right in Create and Manage Teams on Dune Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Welcome  (/home) Quickstart  (/quickstart) Web3 Data Resources  (/learning-resources) Jump right in Create your first query  (/learning/how-tos/create-your-first-query) Create New Content  (/learning/how-tos/create-new-content) Create your first visualization  (/learning/how-tos/create-your-first-visualization) Navigate the Query Editor  (/learning/how-tos/navigate-query-editor) Find Datasets on Dune  (/learning/how-tos/find-datasets) Export Data Out of Dune  (/learning/how-tos/export-data-out) Create and Manage Teams on Dune  (/learning/how-tos/create-and-manage-teams) Understanding Credits on Dune  (/learning/how-tos/credit-system-on-dune) Search for Content on Dune  (/learning/how-tos/search-for-content) Share Dune Content  (/learning/how-tos/share-dune-content) Share your query  (/learning/how-tos/share-your-query) Transfer Ownership  (/learning/how-tos/transfer-ownership) Jump right in Create and Manage Teams on Dune A step-by-step guide to creating and managing team accounts on Dune. ", "url": "https://docs.dune.com/learning/how-tos/create-and-manage-teams"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Jump right in Create your first visualization Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Welcome  (/home) Quickstart  (/quickstart) Web3 Data Resources  (/learning-resources) Jump right in Create your first query  (/learning/how-tos/create-your-first-query) Create New Content  (/learning/how-tos/create-new-content) Create your first visualization  (/learning/how-tos/create-your-first-visualization) Navigate the Query Editor  (/learning/how-tos/navigate-query-editor) Find Datasets on Dune  (/learning/how-tos/find-datasets) Export Data Out of Dune  (/learning/how-tos/export-data-out) Create and Manage Teams on Dune  (/learning/how-tos/create-and-manage-teams) Understanding Credits on Dune  (/learning/how-tos/credit-system-on-dune) Search for Content on Dune  (/learning/how-tos/search-for-content) Share Dune Content  (/learning/how-tos/share-dune-content) Share your query  (/learning/how-tos/share-your-query) Transfer Ownership  (/learning/how-tos/transfer-ownership) Jump right in Create your first visualization How to create a combination bar chart and line chart to visualize the monthly $ gas spent for your wallet After executing a query, you\u2019ll be presented with a set of results. The next logical step? Visualize that data for a clearer insight. This guide will show you how to layer a combined bar and line chart atop the data from  Create your first query  (/learning/how-tos/create-your-first-query) . \n Here is a visual click-through version if you are more of a visual learner. Below is a written version. \n \n \n Begin Visualization : Click on \u201cNew\u201d and select your desired chart type. For this tutorial, initiate with a bar chart and click \u201cBar Chart.\u201d \n Display Data : By default, the chart will showcase  monthly_gas_spent . To augment the depth of insights, include the  cumulative_gas_spent  column. \n Adjust Chart Type : Transition the representation of  cumulative_gas_spent  from a bar to a line chart, offering a more nuanced view. \n Fine-tune Your Chart : Customize the display values for a polished look. For detailed formatting guidance,  refer to this resource  (web-app/visualizations/charts-graphs) . \n \n \n You can also use the AI Chart Builder to automatically generate the charts for your data. \n \n Click Generate  When you click generate, the AI Chart Builder will suggest a title and chart type based on your data. \n If you are happy with the recommendation, click  Create Generate  to add the chart to your dashboard. \n Otherwise, you can edit the title or the chart type and then  Create Generate  to create the chart. \n (Optional)  Fine-tune Your Chart : Customize the display values for a polished look. For detailed formatting guidance,  refer to this resource  (web-app/visualizations/charts-graphs) . \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /learning/how-tos/create-your-first-visualization) Create New Content  (/learning/how-tos/create-new-content) Navigate the Query Editor  (/learning/how-tos/navigate-query-editor) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/learning/how-tos/create-your-first-visualization"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Jump right in Create your first query Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Welcome  (/home) Quickstart  (/quickstart) Web3 Data Resources  (/learning-resources) Jump right in Create your first query  (/learning/how-tos/create-your-first-query) Create New Content  (/learning/how-tos/create-new-content) Create your first visualization  (/learning/how-tos/create-your-first-visualization) Navigate the Query Editor  (/learning/how-tos/navigate-query-editor) Find Datasets on Dune  (/learning/how-tos/find-datasets) Export Data Out of Dune  (/learning/how-tos/export-data-out) Create and Manage Teams on Dune  (/learning/how-tos/create-and-manage-teams) Understanding Credits on Dune  (/learning/how-tos/credit-system-on-dune) Search for Content on Dune  (/learning/how-tos/search-for-content) Share Dune Content  (/learning/how-tos/share-dune-content) Share your query  (/learning/how-tos/share-your-query) Transfer Ownership  (/learning/how-tos/transfer-ownership) Jump right in Create your first query Learn to analyze daily DEX trading volumes across different blockchains New to Dune? Let\u2019s start your analytics journey by creating an insightful query that analyzes daily DEX trading volumes across different blockchains. This guide will teach you the basics while delivering practical insights about DeFi trading activity. \n ", "url": "https://docs.dune.com/learning/how-tos/create-your-first-query"}
{"content": "\u200b Dune Echo \n API\u2019s specificaly designed for developers to build performant multichain applications with fantastic UX. \n Token Balances Fetch real time token balances for accounts on 30+ chains. Data and request latency in the hundreds of milliseconds.  (../../echo/evm/balances) Transactions Fetch real time and historical transactions for accounts on 10 chains. Data and request latency in the hundreds of milliseconds.  (../../echo/evm/transactions) \n ", "url": "https://docs.dune.com/api-reference/overview/introduction#dune-echo"}
{"content": "\u200b Custom Endpoints \n Custom Endpoints Create and manage API endpoints from Dune queries directly on the web app, enabling data consumption via custom URLs with scheduled query execution.  (/api-reference/custom/overview) \n ", "url": "https://docs.dune.com/api-reference/overview/introduction#custom-endpoints"}
{"content": "\u200b SQL Endpoints \n They help you manage and execute queries, as well as fetch data from these queries. \n Executions and Results Execute queries and retrieve results in JSON or CSV format.  (/api-reference/executions/execution-object) Query Management Manage your queries through the API, ideal for integration with GitHub.  (/api-reference/queries/endpoint/query-object) Webhooks Push Dune data to your webhooks on a custom schedule.  (/api-reference/webhooks/webhook) \n ", "url": "https://docs.dune.com/api-reference/overview/introduction#sql-endpoints"}
{"content": "\u200b Data Management Endpoints \n They help you upload and manage data on Dune. \n Table Management Upload data to Dune to create queryable tables.  (/api-reference/tables/endpoint/overview) Hosted Blockchain Integration Integrate your blockchain data with Dune using dedicated API endpoints. ( Enterprise only )  (catalyst/overview) \n ", "url": "https://docs.dune.com/api-reference/overview/introduction#data-management-endpoints"}
{"content": "\u200b Preset Endpoints \n These are curated endpoints built by Dune, ready for immediate use. No SQL required. Developers can use these endpoints to access data on popular topics. \n Contracts Get trending EVM contracts by type, project, name, users, and value.  (/api-reference/evm/endpoint/contracts) DEX Get statistics for token pairs.  (/api-reference/dex/endpoint/dex_pair) EigenLayer Get metadata and metrics for EigenLayer AVSs and operators.  (/api-reference/eigenlayer/introduction) Farcaster Get trending users, channels, and memecoins.  (/api-reference/farcaster/introduction) Markets Track DEX and NFT market share.  (/api-reference/markets/endpoint/marketplace_marketshare) Projects Access API endpoints specific to various projects and protocols.  (/api-reference/projects/introduction) Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/overview/introduction) Execution & Results  (/api-reference/quickstart/results-eg) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Dune Echo  (#dune-echo) Custom Endpoints  (#custom-endpoints) SQL Endpoints  (#sql-endpoints) Data Management Endpoints  (#data-management-endpoints) Preset Endpoints  (#preset-endpoints)", "url": "https://docs.dune.com/api-reference/overview/introduction#preset-endpoints"}
{"content": "\u200b What are credits? \n Credits are the key to accessing a wide range of functions on the Dune platform. Whether you\u2019re delving into writing queries or simply exploring dashboards, knowing how credits operate is crucial. \n ", "url": "https://docs.dune.com/learning/how-tos/credit-system-on-dune#what-are-credits"}
{"content": "\u200b Why are credits important? \n All actions on Dune, from refreshing a dashboard to exporting data via the API, consume credits. It\u2019s vital for every user, viewer, or creator alike, to be mindful of their credit usage. \n ", "url": "https://docs.dune.com/learning/how-tos/credit-system-on-dune#why-are-credits-important"}
{"content": "\u200b Your Credit Allocation \n No worries, every Dune user gets a monthly credit allowance. Here\u2019s how it works: \n ", "url": "https://docs.dune.com/learning/how-tos/credit-system-on-dune#your-credit-allocation"}
{"content": "\u200b \ud83c\udf9f\ufe0f Monthly Credit Allowance \n \n Set Number of Credits:  Each month, your subscription plan provides a set allotment of credits. \n Top-Up:  Run out of credits? Our \u201cpay as you go\u201d option lets you add more anytime, ensuring your work is always in flow. \n \n ", "url": "https://docs.dune.com/learning/how-tos/credit-system-on-dune#monthly-credit-allowance"}
{"content": "\u200b \ud83d\udd04 Rollover Policy \n \n Monthly Refresh:  Credits reset at the start of each billing cycle; they do not roll over to the next month. \n Maximize Use:  Plan your activities to maximize the utility of your credits. \n \n ", "url": "https://docs.dune.com/learning/how-tos/credit-system-on-dune#rollover-policy"}
{"content": "\u200b \ud83d\udc65 Team Accounts \n \n Collective Pool:  All team members draw from a shared pot of credits. Sync up to make the most of your resources. \n \n ", "url": "https://docs.dune.com/learning/how-tos/credit-system-on-dune#team-accounts"}
{"content": "\u200b Understanding Credit Use on Dune \n Credits power your work on Dune, and here\u2019s how they\u2019re typically used: \n Queries Running and creating queries consumes credits, with the amount varying based on complexity.  (web-app/query-editor/query-window) Engine Power Larger tasks need more powerful engines, increasing credit usage, which we detail upfront.  (/query-engine/query-executions#query-engine-size) Refreshes Refreshing dashboards or widgets consumes credits; exact numbers are displayed contextually.  (/web-app/dashboards#keeping-your-dashboard-up-to-date) Exports Exporting data costs credits, with higher amounts for larger exports. Estimates are provided beforehand.  (/learning/how-tos/export-data-out) Auto-Runs Scheduling queries to run regularly consumes credits each time, with details available in the setup options.  (/web-app/query-editor/query-scheduler) \n ", "url": "https://docs.dune.com/learning/how-tos/credit-system-on-dune#understanding-credit-use-on-dune"}
{"content": "\u200b Estimating Credit Usage \n Understanding how your activities on Dune consume credits can help you manage your resources more effectively: \n \n Credit Estimates:  Always check for tooltips or on-screen indicators that provide real-time estimates of credit costs before you perform actions. \n Active Monitoring:  Keep a regular tab on your credit usage through your settings dashboard to avoid surprises. \n \n ", "url": "https://docs.dune.com/learning/how-tos/credit-system-on-dune#estimating-credit-usage"}
{"content": "\u200b Managing Your Credits \n ", "url": "https://docs.dune.com/learning/how-tos/credit-system-on-dune#managing-your-credits"}
{"content": "\u200b Tracking Your Usage \n Hover over the odometer icon in your navigation bar for a quick glance at your credits. Make sure you\u2019re looking at the right account context. \n ", "url": "https://docs.dune.com/learning/how-tos/credit-system-on-dune#tracking-your-usage"}
{"content": "\u200b Detailed Credit Information \n Go to  Settings  \u2192  Subscriptions  for a deeper dive into your credit usage and options. \n ", "url": "https://docs.dune.com/learning/how-tos/credit-system-on-dune#detailed-credit-information"}
{"content": "\u200b Handling Excess Usage \n Exceeding your monthly allocation? Here\u2019s how to handle it: \n \n Add a payment method to your account to use additional credits at a fee above your included limit. \n Set a cap in the  limit extra credits  field to keep your spending in check. \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /learning/how-tos/credit-system-on-dune) Create and Manage Teams on Dune  (/learning/how-tos/create-and-manage-teams) Search for Content on Dune  (/learning/how-tos/search-for-content) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page What are credits?  (#what-are-credits) Why are credits important?  (#why-are-credits-important) Your Credit Allocation  (#your-credit-allocation) \ud83c\udf9f\ufe0f Monthly Credit Allowance  (#monthly-credit-allowance) \ud83d\udd04 Rollover Policy  (#rollover-policy) \ud83d\udc65 Team Accounts  (#team-accounts) Understanding Credit Use on Dune  (#understanding-credit-use-on-dune) Estimating Credit Usage  (#estimating-credit-usage) Managing Your Credits  (#managing-your-credits) Tracking Your Usage  (#tracking-your-usage) Detailed Credit Information  (#detailed-credit-information) Handling Excess Usage  (#handling-excess-usage)", "url": "https://docs.dune.com/learning/how-tos/credit-system-on-dune#handling-excess-usage"}
{"content": "\u200b Dune for Teams \n \n Create a team account on Dune  to enhance collaboration with a shared workspace. \n Team accounts  can be established without a paid plan, but  Plus/Premium subscription features  (https://dune.com/pricing)  are available only to teams, not individual accounts. \n \n This guide provides detailed steps to help you set up and manage your team effectively. \n ", "url": "https://docs.dune.com/learning/how-tos/create-and-manage-teams#dune-for-teams"}
{"content": "\u200b Setting Up a Team \n \n Navigate to the global context switcher  at the top of your dashboard. \n Select \u201cCreate new team\u201d  from the dropdown menu. \n Complete the team creation process  by following the on-screen instructions. \n \n Every account on Dune, be it individual or team-based, requires a unique identifier. Each team must have a unique name that has not been used before. \n \n ", "url": "https://docs.dune.com/learning/how-tos/create-and-manage-teams#setting-up-a-team"}
{"content": "\u200b Inviting Members & Assigning Roles \n After setting up your team: \n \n \n Invite New Members:  Click on  \u201cInvite People\u201d  and follow the instructions. During this process, assign  roles  (/web-app/teams)  to each new member: \n \n Admins  have full control over settings and memberships. \n Editors  can create and edit content. \n Viewers  can view content and spend credits. \n \n \n \n Use a URL to Invite Members:  Alternatively, share a direct invitation URL with prospective team members. \n \n \n \n To add members later, select  \u201cInvite Members\u201d  from the  \u201c+ Create\u201d  button. \n \n ", "url": "https://docs.dune.com/learning/how-tos/create-and-manage-teams#inviting-members-and-assigning-roles"}
{"content": "\u200b Managing Subscriptions \n Manage your team\u2019s subscriptions and settings by navigating to the  team account settings page , where you can: \n \n Modify Your Plan:  Change your subscription plan or opt for annual billing to save costs. \n View Usage Statistics:  Check your usage of credits, CSV uploads, and private content quotas. \n Manage Additional Credits:  If you need more credits than your plan provides, adjust the  \u201cLimit extra credits\u201d  field to set a maximum dollar amount for additional purchases.  The default limit is $0 to prevent unexpected charges. \n \n \n This section allows you to manage the  \u201cpay-as-you-go\u201d  feature. If you wish to purchase additional credits beyond your plan\u2019s allocation, adjust the  \u201cLimit extra credits\u201d  field. Set a maximum dollar amount for additional credits. By default, this limit is set to $0. \n \n ", "url": "https://docs.dune.com/learning/how-tos/create-and-manage-teams#managing-subscriptions"}
{"content": "\u200b Switching Contexts \n Easily toggle between different team or individual accounts using the  global context switcher.  This feature allows you to manage multiple projects or team environments from a single account. \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /learning/how-tos/create-and-manage-teams) Export Data Out of Dune  (/learning/how-tos/export-data-out) Understanding Credits on Dune  (/learning/how-tos/credit-system-on-dune) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Dune for Teams  (#dune-for-teams) Setting Up a Team  (#setting-up-a-team) Inviting Members & Assigning Roles  (#inviting-members-and-assigning-roles) Managing Subscriptions  (#managing-subscriptions) Switching Contexts  (#switching-contexts)", "url": "https://docs.dune.com/learning/how-tos/create-and-manage-teams#switching-contexts"}
{"content": "\u200b Getting Started \n Create a New Query : Head over to  Create New Query  (https://dune.com/queries)  to begin. Dune uses DuneSQL, a SQL dialect that is compatible with TrinoSQL. It is a fairly vanilla SQL dialect, but there are some nuances you will eventually encounter. If you are not familiar with SQL, you can learn the basics  here  (https://www.w3schools.com/sql/) . \n ", "url": "https://docs.dune.com/learning/how-tos/create-your-first-query#getting-started"}
{"content": "\u200b Choosing the Right Table \n Choosing the right table is the first step to creating a successful query. You can find the table you need in the  Data Catalog  (/data-catalog) . \n \n \n Understanding curated data : Instead of working with complex raw blockchain data, we\u2019ll use Dune\u2019s curated data - a collection of pre-built, analytics-ready tables. Curated data standardizes data across chains and makes analysis much easier. \n \n \n The Perfect Table : For DEX trading analysis, we\u2019ll use the  dex.trades  (data-catalog/curated/evm/DEX/dex-trades)  table. This table contains standardized trading data across multiple DEXes and blockchains. \n \n \n ", "url": "https://docs.dune.com/learning/how-tos/create-your-first-query#choosing-the-right-table"}
{"content": "\u200b Building Your Query Step by Step \n Let\u2019s analyze DEX trading activity across different blockchains. We\u2019ll start simple and build up our analysis: \n \n Select Key Metrics : For our DEX analysis, we\u2019ll track: \n \n Block date (to see trends over time) \n Blockchain (to compare activity across networks) \n Trading volume in USD \n Number of trades \n \n \n \n Here\u2019s our query: \n SELECT \n   block_date , \n   blockchain , \n    COUNT ( * )   as  number_of_trades , \n    SUM ( amount_usd )   as  trading_volume_usd \n FROM  dex . trades \n WHERE \n   block_date  >=   NOW ( )   -   INTERVAL   '30'   day \n GROUP   BY \n    1 ,   2 \n ORDER   BY \n    1   DESC ,   4   DESC \n \n \n ", "url": "https://docs.dune.com/learning/how-tos/create-your-first-query#building-your-query-step-by-step"}
{"content": "\u200b Understanding the Query Components \n Each part of this query helps us analyze DEX activity: \n \n block_date : Groups all trades into daily buckets \n blockchain : Helps us compare activity across Ethereum, Polygon, Arbitrum, etc. \n COUNT(*) : Gives us the trading frequency \n SUM(amount_usd) : Shows the total value traded in USD \n WHERE block_date >= NOW() - INTERVAL '30 days' : Focuses on recent activity \n GROUP BY 1, 2, 3 : Combines trades by day, blockchain, and DEX \n ORDER BY 1 DESC, 5 DESC : Shows newest and highest volume trades first \n \n ", "url": "https://docs.dune.com/learning/how-tos/create-your-first-query#understanding-the-query-components"}
{"content": "\u200b Making Your Analysis Dynamic with Parameters \n Want to focus on your favorite DEX? Let\u2019s add the column  project  as a parameter to make the analysis interactive: \n SELECT \n   block_date , \n   blockchain , \n   project , \n    COUNT ( * )   as  number_of_trades , \n    SUM ( amount_usd )   as  trading_volume_usd \n FROM  dex . trades \n WHERE \n   block_date  >=   NOW ( )   -   INTERVAL   '30'   day \n    AND  project  =   '{{Project Name}}'   -- Try 'uniswap' or 'curve' \n GROUP   BY \n    1 ,   2 ,   3 \n ORDER   BY \n    1   DESC ,   5   DESC \n \n To add the parameter: \n \n Click \u201cAdd Parameter\u201d below the query editor \n Create a text parameter named \u201cProject Name\u201d \n Set default value to \u201cUniswap\u201d \n \n Now you can instantly switch between different DEXes to compare their performance! \n \n ", "url": "https://docs.dune.com/learning/how-tos/create-your-first-query#making-your-analysis-dynamic-with-parameters"}
{"content": "\u200b Visualizing Results \n After running your query, you can create powerful visualizations: \n \n Click \u201cNew Visualization\u201d \n Choose \u201cBar Chart\u201d \n Set X-axis to  trading_day \n Set Y-axis to  trading_volume_usd \n Group by  blockchain \n \n This will create a stacked bar chart showing daily trading volumes by blockchain! \n \n Want to explore more? Try: \n Removing the project filter to see all DEXes \n Changing the time period to 7 days or 90 days \n Adding token filters to focus on specific cryptocurrencies \n \n ", "url": "https://docs.dune.com/learning/how-tos/create-your-first-query#visualizing-results"}
{"content": "\u200b Next Steps \n Congratulations on creating your first DEX analysis query! \ud83c\udf89 \n You can find many more queries related to DEX trading activity in this dashboard:  DEX Trading Activity  (https://dune.com/hagaetc/dex-metrics) \n Save your query by clicking  Save  in the upper right corner. You can revisit and modify it anytime to explore different aspects of DEX trading activity. \n Ready to create more advanced queries? Check out our other guides to learn\nmore about Dune Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /learning/how-tos/create-your-first-query) Web3 Data Resources  (/learning-resources) Create New Content  (/learning/how-tos/create-new-content) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Getting Started  (#getting-started) Choosing the Right Table  (#choosing-the-right-table) Building Your Query Step by Step  (#building-your-query-step-by-step) Understanding the Query Components  (#understanding-the-query-components) Making Your Analysis Dynamic with Parameters  (#making-your-analysis-dynamic-with-parameters) Visualizing Results  (#visualizing-results) Next Steps  (#next-steps)", "url": "https://docs.dune.com/learning/how-tos/create-your-first-query#next-steps"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Welcome Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Welcome  (/home) Quickstart  (/quickstart) Web3 Data Resources  (/learning-resources) Jump right in Create your first query  (/learning/how-tos/create-your-first-query) Create New Content  (/learning/how-tos/create-new-content) Create your first visualization  (/learning/how-tos/create-your-first-visualization) Navigate the Query Editor  (/learning/how-tos/navigate-query-editor) Find Datasets on Dune  (/learning/how-tos/find-datasets) Export Data Out of Dune  (/learning/how-tos/export-data-out) Create and Manage Teams on Dune  (/learning/how-tos/create-and-manage-teams) Understanding Credits on Dune  (/learning/how-tos/credit-system-on-dune) Search for Content on Dune  (/learning/how-tos/search-for-content) Share Dune Content  (/learning/how-tos/share-dune-content) Share your query  (/learning/how-tos/share-your-query) Transfer Ownership  (/learning/how-tos/transfer-ownership) Welcome Dune is a web-based platform that allows you to query public blockchain data and aggregate it into beautiful dashboards. Blockchains are open and transparent, but each chain is unique\u2014making it difficult to understand, ingest, and aggregate data. Dune gives you the tools to analyze cross-chain data for different tokens, wallets, and protocols. You can also easily share your work with the community, export and integrate data into your own applications, and more. \n ", "url": "https://docs.dune.com/home"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Jump right in Share Dune Content Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Welcome  (/home) Quickstart  (/quickstart) Web3 Data Resources  (/learning-resources) Jump right in Create your first query  (/learning/how-tos/create-your-first-query) Create New Content  (/learning/how-tos/create-new-content) Create your first visualization  (/learning/how-tos/create-your-first-visualization) Navigate the Query Editor  (/learning/how-tos/navigate-query-editor) Find Datasets on Dune  (/learning/how-tos/find-datasets) Export Data Out of Dune  (/learning/how-tos/export-data-out) Create and Manage Teams on Dune  (/learning/how-tos/create-and-manage-teams) Understanding Credits on Dune  (/learning/how-tos/credit-system-on-dune) Search for Content on Dune  (/learning/how-tos/search-for-content) Share Dune Content  (/learning/how-tos/share-dune-content) Share your query  (/learning/how-tos/share-your-query) Transfer Ownership  (/learning/how-tos/transfer-ownership) Jump right in Share Dune Content How to share Dune content In this guide, we\u2019ll outline various methods to share your Dune content. \n ", "url": "https://docs.dune.com/learning/how-tos/share-dune-content"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Query Engine Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Query Engine DuneSQL, a Trino fork, is fine-tuned for blockchain analytics. \n DuneSQL enhances blockchain data analysis by leveraging a Trino fork. This engine excels in performance for interactive queries across vast datasets, from gigabytes to petabytes. \n ", "url": "https://docs.dune.com/query-engine/overview"}
{"content": "\u200b Go through our YouTube Tutorials \n We\u2019ve created tutorials covering all product surfaces of Dune, how to navigate and understand all tables, and how to level up as a crypto data analyst.  Check out the full playlist.  (https://www.youtube.com/playlist?list=PLK3b5d4iK10ext4v-GBySekaA8-GP8quD) \n \n ", "url": "https://docs.dune.com/home#go-through-our-youtube-tutorials"}
{"content": "\u200b Start building \n Ready to start building? Once you have an  account  (https://dune.com/auth/register)  and you have reviewed the  Quickstart  (quickstart) , check out these essentials to start using Dune. \n Web App Learn about the Dune Web App, your portal to creating, viewing, and interacting with blockchain analytics dashboards.  (/web-app) Data Catalog Explore our comprehensive Data Catalog to find and utilize the exact datasets you need for your queries and analytics.  (/data-catalog) API Integrate Dune directly into your workflow with our API, allowing for automated data extraction and analysis.  (/api-reference) Query Engine Discover the power of the Dune Query Engine to execute advanced SQL queries and analyze blockchain data.  (/query-engine) Alerts Set up alerts to be notified when specific conditions are met in the data.  (/web-app/alerts) \n Quickstart \nTo get started with Dune in 5 minutes, see the  Quickstart  (/quickstart) . \n ", "url": "https://docs.dune.com/home#start-building"}
{"content": "\u200b Learn more \n If you are new to blockchain or SQL \u2014or want to go deeper on Dune concepts and best practices\u2014 check out the following resources: \n \n Dune Official Getting Started Video Series  (https://www.youtube.com/watch?v=S-cctFmR828&list=PLK3b5d4iK10ext4v-GBySekaA8-GP8quD&index=1)  to learn how data flows and how to navigate the Dune app to get the most out of it \n Join our community in  Discord  (https://discord.gg/FjwGvbgDFS)  to get support through the  #\ud83d\udc25\ufe31beginners  and  #\ud83d\ude4b\ufe31query-questions  channels \n \n You can also level up by following the  crypto data analyst roadmap  (https://roadmap.sh/r?id=65fee5b66deb533d6e19fb88) : \n \n \n ", "url": "https://docs.dune.com/home#learn-more"}
{"content": "\u200b Why Dune? \n Dune\u2014along with our massive community of users and experts\u2014provides powerful tools and analysis of all onchain data. You can find a  dashboard  (https://dune.com/browse/dashboards?q=dex&order=favorites&time_range=all)  for pretty much anything web3-related, including for EVMs like Ethereum, Polygon, Goerli, and Optimism\u2014and non-EVM chains like Solana and Bitcoin. \n Examples of real dashboards: \n \n NFT marketplaces  (https://dune.com/hildobby/ethereum-nfts) \n DEX metrics  (https://dune.com/hagaetc/dex-metrics) \n Project metrics  (https://dune.com/whale_hunter/unibot-revenue) \n DAO Accounting (Maker)  (https://dune.com/steakhouse/makerdao) \n Base Chain Metrics  (https://dune.com/optimismfnd/Optimism) \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /home) Quickstart  (/quickstart) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Go through our YouTube Tutorials  (#go-through-our-youtube-tutorials) Start building  (#start-building) Learn more  (#learn-more) Why Dune?  (#why-dune)", "url": "https://docs.dune.com/home#why-dune"}
{"content": "\u200b Via URL \n Simply copy and share the URL of your query or dashboard. \n Even private dashboards can be shared by directly providing their URLs. \n \n ", "url": "https://docs.dune.com/learning/how-tos/share-dune-content#via-url"}
{"content": "\u200b Embed Visualizations \n \n Instead of capturing screenshots, directly embed visualizations. \n Click the embed button to obtain the link. \n For detailed steps on embedding Dune charts across social platforms,  click here  (/web-app/embeds#using-embeds-on-different-platforms) . \n \n \n ", "url": "https://docs.dune.com/learning/how-tos/share-dune-content#embed-visualizations"}
{"content": "\u200b Invite to Your Team \n For consistent collaboration,  invite colleagues to your team  (learning/how-tos/create-and-manage-teams#inviting-members-assigning-roles)  as viewers or editors. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /learning/how-tos/share-dune-content) Search for Content on Dune  (/learning/how-tos/search-for-content) Share your query  (/learning/how-tos/share-your-query) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Via URL  (#via-url) Embed Visualizations  (#embed-visualizations) Invite to Your Team  (#invite-to-your-team)", "url": "https://docs.dune.com/learning/how-tos/share-dune-content#invite-to-your-team"}
{"content": "\u200b Key Features \n DuneSQL shines with unique blockchain-focused capabilities: \n \n Varbinary Data Types : Store blockchain specifics like addresses and hashes efficiently. \n Uint256 & Int256 Support : Essential for blockchain\u2019s large numerical data. \n Columnar Storage : Optimizes read speed by organizing data by columns. \n Query Views : Enables complex query construction and reusability. \n Materialized Views : For enhanced query performance through pre-computed results. \n \n ", "url": "https://docs.dune.com/query-engine/overview#key-features"}
{"content": "\u200b DuneSQL Essentials \n DuneSQL offers a robust platform for blockchain data exploration. As a modified version of TrinoSQL, it supports scalable, interactive analysis across diverse data sizes. \n Our documentation equips you with the necessary tools to efficiently harness DuneSQL. \n Functions and Operators DuneSQL\u2019s syntax toolbox.  (/query-engine/Functions-and-operators) Data Types Understanding DuneSQL data formats.  (/query-engine/datatypes) Reserved Keywords Keywords off-limits for naming.  (/query-engine/reserved-keywords) Writing Efficient Queries Strategies for query optimization.  (/query-engine/writing-efficient-queries) Querying a Query Layer queries for complex insights.  (/query-engine/query-a-query) Materialized Views Boost query speed with stored views.  (/query-engine/materialized-views) \n ", "url": "https://docs.dune.com/query-engine/overview#dunesql-essentials"}
{"content": "\u200b Debugging \n Need help with DuneSQL? Start here: \n \n Google  <problem> Trino SQL  for general inquiries. \n Chat with your favorite AI assistant and ask for  Trino SQL  help. \n Check  Trino\u2019s official documentation  (https://trino.io/docs/current/functions.html)  for detailed insights. \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/overview) Executions  (/query-engine/query-executions) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Key Features  (#key-features) DuneSQL Essentials  (#dunesql-essentials) Debugging  (#debugging)", "url": "https://docs.dune.com/query-engine/overview#debugging"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Jump right in Create New Content Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Welcome  (/home) Quickstart  (/quickstart) Web3 Data Resources  (/learning-resources) Jump right in Create your first query  (/learning/how-tos/create-your-first-query) Create New Content  (/learning/how-tos/create-new-content) Create your first visualization  (/learning/how-tos/create-your-first-visualization) Navigate the Query Editor  (/learning/how-tos/navigate-query-editor) Find Datasets on Dune  (/learning/how-tos/find-datasets) Export Data Out of Dune  (/learning/how-tos/export-data-out) Create and Manage Teams on Dune  (/learning/how-tos/create-and-manage-teams) Understanding Credits on Dune  (/learning/how-tos/credit-system-on-dune) Search for Content on Dune  (/learning/how-tos/search-for-content) Share Dune Content  (/learning/how-tos/share-dune-content) Share your query  (/learning/how-tos/share-your-query) Transfer Ownership  (/learning/how-tos/transfer-ownership) Jump right in Create New Content How to craft new content on Dune Dive into the world of Dune and explore the myriad of content creation possibilities it offers. This guide will walk you through the various types of content you can craft on Dune and the steps to bring them to life. \n ", "url": "https://docs.dune.com/learning/how-tos/create-new-content"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Web App Web App Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Web App Overview  (/web-app/overview) Create Queries Create Visualizations Decoding Contracts Create Dashboards  (/web-app/dashboards) Mint Dashboards  (/web-app/dashboard-minting) Teams on Dune  (/web-app/teams) Dune AI  (/web-app/dune-ai) Upload Data  (/web-app/upload-data) Share your work  (/web-app/embeds) Search content  (/web-app/search) Alerts  (/web-app/alerts) Bug Bounty  (/web-app/bug-bounty) Web App Web App Dune has built the perfect tools to efficiently extract information from blockchain data. Explore the foundational elements of Dune through the Dune Web App and Query Engine. Each feature is designed to streamline your access to and analysis of complex blockchain data. \n ", "url": "https://docs.dune.com/web-app/overview"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Quickstart Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Welcome  (/home) Quickstart  (/quickstart) Web3 Data Resources  (/learning-resources) Jump right in Create your first query  (/learning/how-tos/create-your-first-query) Create New Content  (/learning/how-tos/create-new-content) Create your first visualization  (/learning/how-tos/create-your-first-visualization) Navigate the Query Editor  (/learning/how-tos/navigate-query-editor) Find Datasets on Dune  (/learning/how-tos/find-datasets) Export Data Out of Dune  (/learning/how-tos/export-data-out) Create and Manage Teams on Dune  (/learning/how-tos/create-and-manage-teams) Understanding Credits on Dune  (/learning/how-tos/credit-system-on-dune) Search for Content on Dune  (/learning/how-tos/search-for-content) Share Dune Content  (/learning/how-tos/share-dune-content) Share your query  (/learning/how-tos/share-your-query) Transfer Ownership  (/learning/how-tos/transfer-ownership) Quickstart Dive into Dune in five minutes Convert data into knowledge! \n ", "url": "https://docs.dune.com/quickstart"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Jump right in Share your query Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Welcome  (/home) Quickstart  (/quickstart) Web3 Data Resources  (/learning-resources) Jump right in Create your first query  (/learning/how-tos/create-your-first-query) Create New Content  (/learning/how-tos/create-new-content) Create your first visualization  (/learning/how-tos/create-your-first-visualization) Navigate the Query Editor  (/learning/how-tos/navigate-query-editor) Find Datasets on Dune  (/learning/how-tos/find-datasets) Export Data Out of Dune  (/learning/how-tos/export-data-out) Create and Manage Teams on Dune  (/learning/how-tos/create-and-manage-teams) Understanding Credits on Dune  (/learning/how-tos/credit-system-on-dune) Search for Content on Dune  (/learning/how-tos/search-for-content) Share Dune Content  (/learning/how-tos/share-dune-content) Share your query  (/learning/how-tos/share-your-query) Transfer Ownership  (/learning/how-tos/transfer-ownership) Jump right in Share your query How to share your query result and charts with others \ud83d\udcca Eureka! With your sparkling query results and radiant charts in hand, it\u2019s showtime! Ready to dazzle your teammates or light up social media? \n \n Sharing is easy. Head to the bottom right, hit the \u201cembed\u201d button, snatch up that URL, and sprinkle your query wizardry wherever your heart desires! \ud83c\udf0c Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /learning/how-tos/share-your-query) Share Dune Content  (/learning/how-tos/share-dune-content) Transfer Ownership  (/learning/how-tos/transfer-ownership) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/learning/how-tos/share-your-query"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Jump right in Navigate the Query Editor Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Welcome  (/home) Quickstart  (/quickstart) Web3 Data Resources  (/learning-resources) Jump right in Create your first query  (/learning/how-tos/create-your-first-query) Create New Content  (/learning/how-tos/create-new-content) Create your first visualization  (/learning/how-tos/create-your-first-visualization) Navigate the Query Editor  (/learning/how-tos/navigate-query-editor) Find Datasets on Dune  (/learning/how-tos/find-datasets) Export Data Out of Dune  (/learning/how-tos/export-data-out) Create and Manage Teams on Dune  (/learning/how-tos/create-and-manage-teams) Understanding Credits on Dune  (/learning/how-tos/credit-system-on-dune) Search for Content on Dune  (/learning/how-tos/search-for-content) Share Dune Content  (/learning/how-tos/share-dune-content) Share your query  (/learning/how-tos/share-your-query) Transfer Ownership  (/learning/how-tos/transfer-ownership) Jump right in Navigate the Query Editor How to navgigate the query editor In this guide, we\u2019ll provide an overview of the Dune Query Editor and its features. \n ", "url": "https://docs.dune.com/learning/how-tos/navigate-query-editor"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Dune Echo Overview Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune Echo Overview  (/echo/overview) EVM SVM React Hooks  (/echo/hooks) Proxy  (/echo/proxy) Dune Echo Overview Dune Echo makes building multi-chain application seamless. We\u2019ve worked hard to offer incredible multichain support (50+ networks in a single call)\nwith one of the industry\u2019s lowest latencies. These APIs power several of the best teams building on crypto. \n ", "url": "https://docs.dune.com/echo/overview"}
{"content": "\u200b Crafting Queries, Dashboards, and Datasets \n \n Navigate to the \u201c+Create\u201d button located at the top of the page. \n From the dropdown, you have the option to: \n \n Initiate new queries. \n Design new dashboards. \n Upload on-chain or off-chain datasets as per your requirements. \n \n \n \n \n Once uploaded, your datasets can be found under the \u201cYour Data\u201d section within the data explorer. \n \n ", "url": "https://docs.dune.com/learning/how-tos/create-new-content#crafting-queries-dashboards-and-datasets"}
{"content": "\u200b Submitting Contracts for Decoding \n If you\u2019re keen on analyzing a contract or project that hasn\u2019t been decoded yet on Dune, here\u2019s what you can do: \n \n Submit the contract for decoding. \n Once submitted, the automated decoding process kicks in. \n After a brief wait, your decoded contract will appear under the \u201cDecoded Projects\u201d category. \n \n \n ", "url": "https://docs.dune.com/learning/how-tos/create-new-content#submitting-contracts-for-decoding"}
{"content": "\u200b Create Visualization Widgets \n You can create visualization widgets from any existing query results, but clicking the \u201cNew visualization\u201d button and choosing the type of charts you want. Of course you can customize the charts to your liking. \n \n ", "url": "https://docs.dune.com/learning/how-tos/create-new-content#create-visualization-widgets"}
{"content": "\u200b Forking Queries \n If you stumble upon a query that almost meets your needs but requires a few tweaks: \n \n Click on the \u201cFork\u201d button located in the upper right corner. \n Modify the forked query as per your requirements. \n \n \n Harness the power of Dune to create, visualize, and analyze. Happy crafting! Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /learning/how-tos/create-new-content) Create your first query  (/learning/how-tos/create-your-first-query) Create your first visualization  (/learning/how-tos/create-your-first-visualization) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Crafting Queries, Dashboards, and Datasets  (#crafting-queries-dashboards-and-datasets) Submitting Contracts for Decoding  (#submitting-contracts-for-decoding) Create Visualization Widgets  (#create-visualization-widgets) Forking Queries  (#forking-queries)", "url": "https://docs.dune.com/learning/how-tos/create-new-content#forking-queries"}
{"content": "\u200b Dune Web App \n Explore the multitude of features within the Dune Web App that streamline your journey from data to insights. Whether it\u2019s crafting a custom dashboard, decoding smart contracts, or collaborating with your team, the Web App is your one-stop solution for blockchain analytics. \n Query Editor Harness the power of SQL in the Query Editor to dissect and analyze blockchain data with precision.  (/web-app/query-editor) Visualizations Transform data into compelling visual narratives with a suite of visualization tools.  (/web-app/visualizations) Create a Dashboard Craft interactive dashboards to monitor and present your key metrics at a glance.  (/web-app/dashboards) Teams on Dune Collaborate effectively with your team members on shared projects and analyses.  (/web-app/teams) Dune AI Leverage artificial intelligence to gain deeper insights and predictions from your data.  (/web-app/dune-ai) Upload Data Integrate your datasets into Dune with our straightforward data upload tools.  (/web-app/upload-data) Share Your Work Spread your findings and dashboards with the community or stakeholders seamlessly.  (/web-app/embeds) Search Content Quickly locate the data you need with our powerful search capabilities.  (/web-app/search) Alerts Stay informed with custom alerts that notify you of important data changes and trends.  (/web-app/alerts) Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /web-app/overview) Writing Queries  (/web-app/query-editor/query-window) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Dune Web App  (#dune-web-app)", "url": "https://docs.dune.com/web-app/overview#dune-web-app"}
{"content": "\u200b Welcome to Dune \n Ready to transform blockchain data into actionable insights? \n This guide will fast-track your understanding of how to  query ,  visualize , and  share  insights using Dune. Let\u2019s dive in! \n Dune offers many features, but this guide focuses on the essentials you\u2019ll need to get started. For more detailed guides, check out our  Analytics Guidelines  (/learning-resources)  and  Data Tables  (/data-catalog)  sections. \n ", "url": "https://docs.dune.com/quickstart#welcome-to-dune"}
{"content": "\u200b Prerequisites: \n \n Dune Account:  You\u2019ll need a Dune account to follow along. If you don\u2019t already have one,  sign up here  (https://dune.com/auth/register) . \n Basic Knowledge:  Gain a basic understanding of SQL and blockchain concepts to enhance your Dune experience. \n \n ", "url": "https://docs.dune.com/quickstart#prerequisites"}
{"content": "\u200b Query blockchain data \n Begin by constructing the SQL queries you need using Dune\u2019s  Query Editor , a powerful tool for writing and executing SQL. Check out our detailed guide on  writing queries  (./web-app/query-editor/query-window) . \n ", "url": "https://docs.dune.com/quickstart#query-blockchain-data"}
{"content": "\u200b 1.   Create a new query \n \n Open the Query Editor in the Dune interface. \n Here\u2019s an embedded demo to help you get started: \n \n \n ", "url": "https://docs.dune.com/quickstart#1-create-a-new-query"}
{"content": "\u200b 2.  Write SQL \n \n Analyze daily activity on Ethereum by entering the following SQL: \n \n --Query to get Ethereum's unique daily active users and passive users  in 2023 \n \n SELECT    \n --truncate time to day \n date_trunc ( 'day' ,  block_time )   AS   time , \n -- count distinct addresses that sent a transactions \n COUNT ( distinct   \"from\" )   AS  users , \n -- count distinct addresses that received a transaction \n COUNT ( distinct   \"to\" )   AS  receiving_addresses \n FROM  ethereum . transactions \n WHERE  block_time  >   DATE   '2023-01-01' \n GROUP   BY   time \n \n \n Run this query now.  (https://dune.com/queries/2335378) \n \n ", "url": "https://docs.dune.com/quickstart#2-write-sql"}
{"content": "\u200b 3.  Run and save your query \n Make sure your work is not lost. \n \n After crafting your query, run it to verify it executes correctly. \n Click the  \u201cSave\u201d  button at the upper right part of the screen. This saves your query, allowing you to monitor the data continuously. \n \n ", "url": "https://docs.dune.com/quickstart#3-run-and-save-your-query"}
{"content": "\u200b Create a visualization \n After executing a query, the results are displayed in a table below the Query Editor. The next step is to transform these raw data into a more digestible format through visualization. \n ", "url": "https://docs.dune.com/quickstart#create-a-visualization"}
{"content": "\u200b 1.  Create a New Visualization \n \n Click on  \u201cNew Visualization\u201d , select your desired chart type, and click  \u201cAdd Visualization.\u201d \n \n ", "url": "https://docs.dune.com/quickstart#1-create-a-new-visualization"}
{"content": "\u200b 2.  Set data sources \n \n Choose the appropriate fields for the x and y axes to shape how your data will be displayed. \n \n ", "url": "https://docs.dune.com/quickstart#2-set-data-sources"}
{"content": "\u200b 3.  Customize the visualization settings \n \n Adjust the settings to suit your visualization needs, such as formatting axis labels and tick marks to enhance readability. \n \n In the example below, we\u2019ll create a line chart to visualize the number of unique daily active users and passive users on Ethereum in 2023. We\u2019ll format the axis label and tick label to  0a to make the numbers more user-friendly. \n \n ", "url": "https://docs.dune.com/quickstart#3-customize-the-visualization-settings"}
{"content": "\u200b Learn more \n For more detailed guidance on visual data representation, explore our resources: \n \n How to create a visualization  (./learning/how-tos/create-your-first-visualization) \n Formatting tables  (./web-app/visualizations/tables) \n Formatting graphs & charts  (./web-app/visualizations/charts-graphs) \n Using counters  (./web-app/visualizations/counters) \n \n ", "url": "https://docs.dune.com/quickstart#learn-more"}
{"content": "\u200b Present your data \n Easily share your insights by creating and customizing a dashboard on Dune. Follow these steps to get started: \n ", "url": "https://docs.dune.com/quickstart#present-your-data"}
{"content": "\u200b 1.   Create & name a new dashboard \n \n Navigate to the  Create  menu and select  \u201cNew Dashboard\u201d \n Enter a name for your dashboard. This name will also become part of the dashboard\u2019s URL slug,  which cannot be changed later.  Choose wisely! \n \n ", "url": "https://docs.dune.com/quickstart#1-create-and-name-a-new-dashboard"}
{"content": "\u200b 2.   Save and Open \n \n Click on  \u201cSave and Open\u201d  to activate your dashboard and move to the editing interface. \n \n ", "url": "https://docs.dune.com/quickstart#2-save-and-open"}
{"content": "\u200b 3.  Edit dashboard & add widgets \n \n Click the  \u201cEdit\u201d  button in the top right corner to enter edit mode. \n Click on  \u201cAdd Widget\u201d  in the top right corner. \n \n ", "url": "https://docs.dune.com/quickstart#3-edit-dashboard-and-add-widgets"}
{"content": "\u200b 4.  Adjust widget layout \n \n Resize:  Drag the bottom right corner of the widget to adjust its size. \n Move:  Drag the widget to your desired location on the dashboard. \n \n ", "url": "https://docs.dune.com/quickstart#4-adjust-widget-layout"}
{"content": "\u200b 5.  Finalize & save your work \n \n Once your widgets are positioned and customized to your satisfaction, click the  \u201cSave\u201d  button in the top right corner to save your changes. \n \n \n For detailed instructions on dashboard creation, widget customization, and advanced settings, refer to our comprehensive guide on  Creating Dashboards.  (./web-app/dashboards) \n ", "url": "https://docs.dune.com/quickstart#5-finalize-and-save-your-work"}
{"content": "\u200b Recap \n Congratulations, you\u2019ve just queried blockchain data, created a visualization, and presented your data on Dune! \n Now, you can share your dashboard with the world. Learn more about sharing your content effectively in our guide on  how to share Dune content.  (./learning/how-tos/share-dune-content) \n ", "url": "https://docs.dune.com/quickstart#recap"}
{"content": "\u200b Next steps \n Enhance your Dune skills and community engagement with these resources: \n \n \n Dune Official Getting Started Video Series  (https://www.youtube.com/watch?v=S-cctFmR828&list=PLK3b5d4iK10ext4v-GBySekaA8-GP8quD&index=1) ::  Learn how the data flows and how to navigate the Dune app to create queries, visualizations, and dashboards. \n \n \n All Ethereum and SQL Basics  (https://web3datadegens.substack.com/p/a-basic-wizard-guide-to-dune-sql) :  Learn all the basic SQL concepts and Ethereum tables that you\u2019ll need in your analysis. \n \n \n Pure SQL Practice:  Sharpen your skills with the \u201ceasy\u201d problems  on hackerrank  (https://www.hackerrank.com/domains/sql) . \n \n \n Join the community : Connect and learn  in our Discord community  (https://discord.com/invite/ErrzwBz)  in the  #\ud83d\udc25\ufe31beginners  and  #\ud83d\ude4b\ufe31query-questions  channels. \n \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /quickstart) Welcome  (/home) Web3 Data Resources  (/learning-resources) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Welcome to Dune  (#welcome-to-dune) Prerequisites:  (#prerequisites) Query blockchain data  (#query-blockchain-data) 1.  Create a new query  (#1-create-a-new-query) 2.  Write SQL  (#2-write-sql) 3.  Run and save your query  (#3-run-and-save-your-query) Create a visualization  (#create-a-visualization) 1.  Create a New Visualization  (#1-create-a-new-visualization) 2.  Set data sources  (#2-set-data-sources) 3.  Customize the visualization settings  (#3-customize-the-visualization-settings) Learn more  (#learn-more) Present your data  (#present-your-data) 1.  Create & name a new dashboard  (#1-create-and-name-a-new-dashboard) 2.  Save and Open  (#2-save-and-open) 3. Edit dashboard & add widgets  (#3-edit-dashboard-and-add-widgets) 4.  Adjust widget layout  (#4-adjust-widget-layout) 5.  Finalize & save your work  (#5-finalize-and-save-your-work) Recap  (#recap) Next steps  (#next-steps)", "url": "https://docs.dune.com/quickstart#next-steps"}
{"content": "\u200b Left Sidebar \n \n Query Explorer: Search and locate relevant content for your query. \n Data Explorer: Discover the necessary data tables for your projects. \n Version History  (/web-app/query-editor/version-history) : Review the query\u2019s edit history and, if required, revert to a previous version. \n Settings: Adjust setting for your query. \n \n \n Double-click any icon to collapse or expand the sidebar. \n \n ", "url": "https://docs.dune.com/learning/how-tos/navigate-query-editor#left-sidebar"}
{"content": "\u200b Central Editor \n This is your main workspace. Here, you can: \n \n Write SQL commands. \n View query results. \n Design visualizations. \n \n Additionally, the bottom-left corner houses icons that further enhance your editing experience. \n \n ", "url": "https://docs.dune.com/learning/how-tos/navigate-query-editor#central-editor"}
{"content": "\u200b Right Sidebar \n This section offers a suite of functionalities: \n \n Schedule queries. \n Materialize query results. \n Download results as CSVs, and more. \n \n \n With these tools at your fingertips, navigating the Dune Query Editor becomes a breeze. Happy querying! Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /learning/how-tos/navigate-query-editor) Create your first visualization  (/learning/how-tos/create-your-first-visualization) Find Datasets on Dune  (/learning/how-tos/find-datasets) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Left Sidebar  (#left-sidebar) Central Editor  (#central-editor) Right Sidebar  (#right-sidebar)", "url": "https://docs.dune.com/learning/how-tos/navigate-query-editor#right-sidebar"}
{"content": "\u200b Available APIs: \n ", "url": "https://docs.dune.com/echo/overview#available-apis"}
{"content": "\u200b EVM \n \n Token Balances  (./evm/balances) : Access accurate and fast real time balances of native and ERC20 tokens of accounts on EVM blockchains. \n Transactions  (./evm/transactions) : Access transactions for accounts in real time across EVM blockchains. \n \n ", "url": "https://docs.dune.com/echo/overview#evm"}
{"content": "\u200b SVM \n These endpoints are currently in beta. \n \n Token Balances  (./svm/balances) : Access accurate and fast real time balances of native, SPL and SPL-2022 tokens of accounts on SVM blockchains. \n Transactions  (./svm/transactions) : Access transactions for accounts in real time across SVM blockchains. \n \n ", "url": "https://docs.dune.com/echo/overview#svm"}
{"content": "\u200b Getting started \n In order to get started, all you need is a Dune API key. See  here  (/api-reference/overview/authentication#generate-an-api-key)  how to generate one.\nThe API key should always be sent in the header  x-dune-api-key . \n ", "url": "https://docs.dune.com/echo/overview#getting-started"}
{"content": "\u200b Pricing & Rate limits \n All Dune users have access to Echo\u2019s free plan, irregardless of their account status on Dune. By default, all users are limited to 10 requests per second.\nIf you need a higher request rate, please get in touch by DMing  mewwts  (https://x.com/mewwts) . \n We offer custom plans with high rate limits and monthly request quotas, and can easily support thousands of RPS and millions of monthly requests. \n ", "url": "https://docs.dune.com/echo/overview#pricing-and-rate-limits"}
{"content": "\u200b React hooks \n Do you have a React app that needs token balances or transaction data?\nGet started by using the  useTokenBalances  and  useTransactions  React hooks from our  @duneanalytics/hooks  (https://www.npmjs.com/package/@duneanalytics/hooks)  package. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /echo/overview) Token Balances  (/echo/evm/balances) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Available APIs:  (#available-apis) EVM  (#evm) SVM  (#svm) Getting started  (#getting-started) Pricing & Rate limits  (#pricing-and-rate-limits) React hooks  (#react-hooks)", "url": "https://docs.dune.com/echo/overview#react-hooks"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Jump right in Export Data Out of Dune Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Welcome  (/home) Quickstart  (/quickstart) Web3 Data Resources  (/learning-resources) Jump right in Create your first query  (/learning/how-tos/create-your-first-query) Create New Content  (/learning/how-tos/create-new-content) Create your first visualization  (/learning/how-tos/create-your-first-visualization) Navigate the Query Editor  (/learning/how-tos/navigate-query-editor) Find Datasets on Dune  (/learning/how-tos/find-datasets) Export Data Out of Dune  (/learning/how-tos/export-data-out) Create and Manage Teams on Dune  (/learning/how-tos/create-and-manage-teams) Understanding Credits on Dune  (/learning/how-tos/credit-system-on-dune) Search for Content on Dune  (/learning/how-tos/search-for-content) Share Dune Content  (/learning/how-tos/share-dune-content) Share your query  (/learning/how-tos/share-your-query) Transfer Ownership  (/learning/how-tos/transfer-ownership) Jump right in Export Data Out of Dune How to export data out of Dune This guide provides a step-by-step process on exporting data from Dune, either through CSV downloads or the API. \n ", "url": "https://docs.dune.com/learning/how-tos/export-data-out"}
{"content": "\u200b Export Methods and File Formats \n You can export data from Dune using two primary methods. Each offers different capabilities and file formats: \n \n CSV Downloads:  Ideal for static data exports, CSV downloads allow you to save query results in a spreadsheet-compatible format. You can easily open these files in spreadsheet software like Microsoft Excel or Google Sheets. \n API Exports : API exports offer more flexibility and customization options. You can retrieve data in JSON or CSV formats, making it suitable for integration with third-party tools or custom analytics platforms. \n \n ", "url": "https://docs.dune.com/learning/how-tos/export-data-out#export-methods-and-file-formats"}
{"content": "\u200b Understanding Credit Usage for Data Export \n Before you start exporting data from Dune, it\u2019s essential to understand how credits are consumed during the export process. Each export action, whether through CSV downloads or the API, deducts credits from your account based on the amount of data and the method used. \n For a comprehensive overview of how credits work in Dune, please refer to our  detailed guide on the credit system  (https://docs.dune.com/learning/how-tos/credit-system-on-dune) \n ", "url": "https://docs.dune.com/learning/how-tos/export-data-out#understanding-credit-usage-for-data-export"}
{"content": "\u200b Costs for Exporting Data: \n \n CSV Exports:  Available  only  to users on  Plus and Premium plans  (https://dune.com/pricing) . Each CSV file download will deduct credits depending on the size and complexity of the data extracted: \n \n Plus Plan:  5,000 data points per credit \n Premium Plan:  25,000 data points per credit \n \n \n API Exports:  Available across all plans, but with varying rate limits and credit costs: \n \n Free Plan:  1,000 data points per credit \n Plus Plan:  5,000 data points per credit \n Premium Plan:  25,000 data points per credit \n \n \n \n For more details on each plan, visit our  pricing page.  (https://dune.com/pricing) \n ", "url": "https://docs.dune.com/learning/how-tos/export-data-out#costs-for-exporting-data"}
{"content": "\u200b Rate Limits: \n Rate limits determine how frequently you can initiate data exports and at what volume. For detailed information on adjusting your export activities to stay within these limits while managing your credits efficiently, refer to our  API rate limits guide  (https://docs.dune.com/api-reference/overview/rate-limits) . \n ", "url": "https://docs.dune.com/learning/how-tos/export-data-out#rate-limits"}
{"content": "\u200b Identify the Dataset for Export \n Begin by pinpointing the dataset or query result you wish to export. For instance, given the recent buzz around Friend.Tech, you might want to export the results from this query:  https://dune.com/queries/2945343  (https://dune.com/queries/2945343) . \n ", "url": "https://docs.dune.com/learning/how-tos/export-data-out#identify-the-dataset-for-export"}
{"content": "\u200b Export via CSV \n \n Navigate to the query interface. \n Simply click the \u201cExport to CSV\u201d button. \n \n \n ", "url": "https://docs.dune.com/learning/how-tos/export-data-out#export-via-csv"}
{"content": "\u200b Export via API \n Ensure you have an API key. If not, generate one: \n \n Navigate to:  Settings  \u2192  API . \n Click on  \u201cCreate new API key\u201d . \n Remember to copy the entire API key before confirming. \n \n \n For this guide, we\u2019ll focus on exporting data using the  \u2018get latest query result\u2019  (/api-reference/executions/endpoint/get-query-result)  endpoint. Here\u2019s a Python example: \n First, create a .env file with the API key you just created. DUNE_API_KEY= <insert your key> \n \n \n import  dotenv \n import  os \n import  json \n import  requests \n import  pandas  as  pd \n \n def   get_latest_query_result ( query_id ) : \n     res_df  =  pd . DataFrame ( ) \n      try : \n         result_url  =   f\"https://api.dune.com/api-referencev1/query/ { query_id } /results\" \n         result_response  =  requests . get ( result_url ,  headers = headers ) \n          print ( json . loads ( result_response . text ) ) \n         query_res  =  json . loads ( result_response . text ) [ \"result\" ] [ \"rows\" ] \n         res_df  =  pd . DataFrame . from_dict ( query_res ) \n      except  Exception  as  e : \n          print ( f\"Error retrieving result for query  { query_id } :  { e } \" ) \n      return  res_df \n \n dotenv . load_dotenv ( 'path_to_env_file' )    # Replace 'path_to_env_file' with your .env file path \n api_key  =  os . getenv ( \"DUNE_API_KEY\" ) \n query_id  =   2945343 \n headers  =   { \"x-dune-api-key\" :  api_key } \n latest_res  =  get_latest_query_result ( query_id ) \n print ( latest_res ) \n \n \n There are multiple methods to export data via the API, and it\u2019s possible to get data in various formats like JSON and CSV. You can even integrate the data with Google Sheets. For a comprehensive guide, refer to  this page  (/api-reference/executions/endpoint/get-query-result) . \n Access the \u2018get latest result\u2019 endpoint directly from the Dune UI. When viewing a query, click the API icon in the top-right corner and copy the endpoint URL. \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /learning/how-tos/export-data-out) Find Datasets on Dune  (/learning/how-tos/find-datasets) Create and Manage Teams on Dune  (/learning/how-tos/create-and-manage-teams) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Export Methods and File Formats  (#export-methods-and-file-formats) Understanding Credit Usage for Data Export  (#understanding-credit-usage-for-data-export) Costs for Exporting Data:  (#costs-for-exporting-data) Rate Limits:  (#rate-limits) Identify the Dataset for Export  (#identify-the-dataset-for-export) Export via CSV  (#export-via-csv) Export via API  (#export-via-api)", "url": "https://docs.dune.com/learning/how-tos/export-data-out#export-via-api"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Data Catalog Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Data Catalog Dune\u2019s extensive data catalog provides detailed analytics for a wide range of blockchains. Our data catalog can be divided into the following categories: \n \n Blockchain Data  (/_sites/docs.dune.com/data-catalog/overview#blockchain-data) \n \n EVM-Compatible Chains  (/_sites/docs.dune.com/data-catalog/overview#evm-compatible-chains) \n Other chains  (/_sites/docs.dune.com/data-catalog/overview#other-chains) \n \n \n Curated Data  (/_sites/docs.dune.com/data-catalog/overview#curated) \n \n dex trades \n nft trades \n labels \n etc. \n \n \n Community Data  (/_sites/docs.dune.com/data-catalog/overview#community-data) \n \n farcaster \n lens protocol \n snapshot \n reservoir \n etc. \n \n \n \n Our entire data catalog is accessible through the Dune  Web App  (/web-app/overview) , the  Dune API  (/api-reference/overview/introduction)  or the  Snowflake Data Marketplace  (https://app.snowflake.com/marketplace/providers/GZSVZMYSCO/Dune) . \n \n Learn about our curated dataset building and contribution process in Spellbook: \n \n ", "url": "https://docs.dune.com/data-catalog/overview"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Web3 Data Resources Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Welcome  (/home) Quickstart  (/quickstart) Web3 Data Resources  (/learning-resources) Jump right in Create your first query  (/learning/how-tos/create-your-first-query) Create New Content  (/learning/how-tos/create-new-content) Create your first visualization  (/learning/how-tos/create-your-first-visualization) Navigate the Query Editor  (/learning/how-tos/navigate-query-editor) Find Datasets on Dune  (/learning/how-tos/find-datasets) Export Data Out of Dune  (/learning/how-tos/export-data-out) Create and Manage Teams on Dune  (/learning/how-tos/create-and-manage-teams) Understanding Credits on Dune  (/learning/how-tos/credit-system-on-dune) Search for Content on Dune  (/learning/how-tos/search-for-content) Share Dune Content  (/learning/how-tos/share-dune-content) Share your query  (/learning/how-tos/share-your-query) Transfer Ownership  (/learning/how-tos/transfer-ownership) Web3 Data Resources Navigate the Ever-Expanding World of Web3 Data with Ease, from Beginners to Experts After you\u2019ve gone through the  quickstart guide  (/quickstart) , you\u2019ll be ready to start learning how to navigate the Web3 data analytics space. \n Analyzing protocols in web3 is both really easy and hard. It\u2019s really easy because everything is transparent and standardized - a deployed contract has a set of functions and events that are pretty much immutable. However, it\u2019s an ever-expanding data arena as new protocols, tokens, and wallets join the fray. \n To build your reputation as an expert wizard, you must stay centered on what you want to analyze and what metrics you want to present. \n ", "url": "https://docs.dune.com/learning-resources"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Web App Alerts Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Web App Overview  (/web-app/overview) Create Queries Create Visualizations Decoding Contracts Create Dashboards  (/web-app/dashboards) Mint Dashboards  (/web-app/dashboard-minting) Teams on Dune  (/web-app/teams) Dune AI  (/web-app/dune-ai) Upload Data  (/web-app/upload-data) Share your work  (/web-app/embeds) Search content  (/web-app/search) Alerts  (/web-app/alerts) Bug Bounty  (/web-app/bug-bounty) Web App Alerts Alerts allow you to receive notifications based on any query Alerts allows users to set notifications for a scheduled query. These notifications are triggered each time the query runs. Supported delivery methods include: \n \n Email:  Multiple email addresses can be added. \n Webhooks:  Alerts can be sent to a specified callback URL, including Slack. \n \n ", "url": "https://docs.dune.com/web-app/alerts"}
{"content": "\u200b Blockchain Data \n Dune provides data for a wide range of blockchains. Our data catalog includes raw data, decoded data, and abstracted data tables for each blockchain. \n ", "url": "https://docs.dune.com/data-catalog/overview#blockchain-data"}
{"content": "\u200b EVM Chains \n We provide the most comprehensive data catalog for Ethereum Mainnet and EVM-compatible rollups, sidechains and other layer 2 solutions.\nAll EVM chains on Dune have raw data, decoded data and abstracted data tables available. \n Raw data  (./evm/ethereum/raw/transactions) Decoded data  (./evm/ethereum/decoded/overview) Curated data  (/data-catalog/curated/overview) \n \n ", "url": "https://docs.dune.com/data-catalog/overview#evm-chains"}
{"content": "\u200b Other Chains \n We provide data for a wide range of blockchains. The depth of data available for these chains may vary, but we always carry the full chain history in its raw form. \n \n ", "url": "https://docs.dune.com/data-catalog/overview#other-chains"}
{"content": "\u200b Adding new blockchains \n If you are a representative of a blockchain you would like to see supported on Dune, please reach out to us. We are always looking to expand our data catalog and provide the most comprehensive data available. \n Request a new blockchain integration!  (https://dune.com/enterprise) \n ", "url": "https://docs.dune.com/data-catalog/overview#adding-new-blockchains"}
{"content": "\u200b Curated \n Dune provides a wide range of curated tables that simplify the process of querying and analyzing blockchain data. These tables are built on top of raw and decoded data tables and provide a high-level view of the data. \n \n Curated Data Curated data simplifies the process of querying and analyzing blockchain data.  (/data-catalog/curated/overview) \n ", "url": "https://docs.dune.com/data-catalog/overview#curated"}
{"content": "\u200b Community Data \n Dune also carries off-chain data important to the web3 ecosystem that is provided by third-party data providers. \n \n ", "url": "https://docs.dune.com/data-catalog/overview#community-data"}
{"content": "\u200b Our Data Difference \n We are building world-class data infrastructure so you don\u2019t have to. Our data catalog is designed to provide the most comprehensive and accurate blockchain data available. We are committed to delivering the highest quality data, with the following features: \n \n Comprehensive Chain Histories:  Full access to blockchain data histories without gaps, ensuring source integrity. \n Accurate and Validated Data:  Commitment to accuracy, with validated consistency and uniqueness for all transactions and events. \n Rich Data Variety:  Decoded data transforms complex byte arrays into clear, structured, and usable information. \n abstracted Data:  Dune\u2019s  Spellbook  (https://github.com/duneanalytics/spellbook)  enables collaborative, community-driven data modeling, unlocking new insights at lightning speed. \n Vibrant Community Data Pools:  Access to vast pools of data contributed by an active and innovative community. \n Cross-Chain:  Our entire data catalog is hosted in the same database, making it easy to compare and contrast data across different chains. \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Blockchain Data  (#blockchain-data) EVM Chains  (#evm-chains) Other Chains  (#other-chains) Adding new blockchains  (#adding-new-blockchains) Curated  (#curated) Community Data  (#community-data) Our Data Difference  (#our-data-difference)", "url": "https://docs.dune.com/data-catalog/overview#our-data-difference"}
{"content": "\u200b Dune Tutorials \n ", "url": "https://docs.dune.com/learning-resources#dune-tutorials"}
{"content": "\u200b Metrics-Driven Analysis \n \n \n Video Series: Delve deep with our end-to-end video series guides: \n \n Uniswap in 12 Days  (https://www.youtube.com/watch?v=FtnGiI9MGgA&list=PLK3b5d4iK10cIrN8c_au9RrC0_eBCOyR2&index=1&t=149s)  (includes metrics like price impact, TVL, MEV volume, liquidity stability) \n Gnosis Safe Point-in-Time  (https://www.youtube.com/watch?v=8atzYkpez5I)  (includes metrics like signers, diversification, and valuations) \n \n \n \n Dashboards for Insights: \n \n \n To understand token trends and contexts, check out this  ERC20 dashboard  (https://dune.com/ilemi/Token-Overview-Metrics)  and this  NFT dashboard  (https://dune.com/rantum/NFT-Collection-Dashboard) . \n \n \n To understand wallet/user segments, you\u2019ll need to leverage  labels  (https://github.com/duneanalytics/spellbook/tree/main/models/labels/addresses)  to enhance your analysis. \n \n \n \n \n Once you have metrics and also understand the underlying tokens and users, it will start to become clear what that real narrative is. Try and pull together a few insights, and then create a compelling dashboard and story around them. Don\u2019t try too hard to capture everything at once - it will become overwhelming for both you and those you share it with. \n ", "url": "https://docs.dune.com/learning-resources#metrics-driven-analysis"}
{"content": "\u200b Analysis Tips \n \n \n Start with a solid foundation. Master  basic SQL and blockchain concepts  (https://web3datadegens.substack.com/p/a-basic-wizard-guide-to-dune-sql) . \n \n \n Scope Your Work:\nWhen looking into a protocol, you\u2019ll need to understand the contract architecture and context. That starts with functions, events, and wallet overviews. There is a  quickstart dashboard  (https://dune.com/ilemi/contract-quickstart)  built just for this, you can see a walkthrough analyzing Opensea  here  (https://read.cryptodatabytes.com/p/how-to-start-analyzing-any-web3-protocol) . \n \n \n Remember that no protocol lives in isolation - there is always some mix of onchain events happening. That could be some new airdrop, a new upstream/downstream protocol integration, large whales making moves, governance changes in protocol parameters, and more. Once you have a solid understanding of protocol history in usage, user, and integration trends, you\u2019re ready to start building some metrics. \n ", "url": "https://docs.dune.com/learning-resources#analysis-tips"}
{"content": "\u200b Engage with the Community \n When you\u2019re done, be sure to share your work  in the Discord  (https://discord.com/invite/ErrzwBz)   #\ud83d\udcfa\ufe31show-your-work  channel and on Twitter tagging  @duneanalytics  (https://twitter.com/DuneAnalytics) . We\u2019ll be sure to give great analysts a boost! Web3 is all about connecting with communities - your queries and dashboards will do nothing if you don\u2019t share it around. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /learning-resources) Quickstart  (/quickstart) Create your first query  (/learning/how-tos/create-your-first-query) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Dune Tutorials  (#dune-tutorials) Metrics-Driven Analysis  (#metrics-driven-analysis) Analysis Tips  (#analysis-tips) Engage with the Community  (#engage-with-the-community)", "url": "https://docs.dune.com/learning-resources#engage-with-the-community"}
{"content": "\u200b Setup \n ", "url": "https://docs.dune.com/web-app/alerts#setup"}
{"content": "\u200b Accessing Alerts \n \n To use Alerts, follow these steps: \n \n Open a saved query that you own. \n Click the \u201cSchedule\u201d button. \n Configure the query schedule. \n Activate the Alerts option. \n Configure the alert delivery method. \n Save the schedule. \n Every time the query runs, the alert will be triggered. \n \n ", "url": "https://docs.dune.com/web-app/alerts#accessing-alerts"}
{"content": "\u200b Alert Timing \n Alerts are triggered after query execution. Delays may occur due to factors like query complexity or system queues. Note that retry mechanisms for failed deliveries are not yet implemented. \n Alerts are not recommended for time-sensitive or critical applications at this stage. \n ", "url": "https://docs.dune.com/web-app/alerts#alert-timing"}
{"content": "\u200b Alert Content \n ", "url": "https://docs.dune.com/web-app/alerts#alert-content"}
{"content": "\u200b Email Alerts \n Email alerts include screenshots of the visualizations you have defined. If you have defined no visualizations, we include a screenshot of the query results by default. Here\u2019s an example: \n \n If you have defined a visualization, we will include it instead of the table, like this: \n \n If your query contains multiple visualizations, or table visualizations (outside the default \u201cQuery results\u201d table), they will all be included, such as here: \n \n ", "url": "https://docs.dune.com/web-app/alerts#email-alerts"}
{"content": "\u200b Webhook Alerts \n Webhook alerts adhere to the following schema: \n { \n    message :  string , \n    query_result :   { \n      execution_id :  string ; \n      query_id :  number ; \n      state :  string ; \n      submitted_at :  string ; \n      expires_at :  string ; \n      execution_started_at :  string ; \n      execution_ended_at :  string ; \n      result :   { \n        data_uri :  string ; \n        metadata :   { \n          column_names :  string [ ] ; \n          result_set_bytes :  number ; \n          total_row_count :  number ; \n          datapoint_count :  number ; \n          pending_time_millis :  number ; \n          execution_time_millis :  number ; \n        } ; \n      } ; \n    } , \n    visualizations :   [ \n      { \n        title :  string ; \n        image_url :  string ; \n      } \n    ] \n } \n \n Here is an example corresponding to the last email example shared earlier: \n { \n   \"message\": \"Query ETH SMA alert was submitted for execution at Wed, 13 Dec 2023 13:42:40 GMT by your query schedule and it was successfully executed with a non-empty result.\\nYou can check its latest result here: https://dune.com/queries/3137182?utm_source=webhook&utm_campaign=alerts\", \n   \"query_result\": { \n     \"execution_id\": \"01HHHPMKG6NBY0B04A36TS3AQH\", \n     \"query_id\": 3137182, \n     \"state\": \"QUERY_STATE_COMPLETED\", \n     \"submitted_at\": \"2023-12-13T13:42:40Z\", \n     \"expires_at\": \"2024-03-12T13:42:48Z\", \n     \"execution_started_at\": \"2023-12-13T13:42:40Z\", \n     \"execution_ended_at\": \"2023-12-13T13:42:48Z\", \n     \"result\": { \n       \"data_uri\": \"https://api.dune.com/api-referencev1/execution/01HHHPMKG6NBY0B04A36TS3AQH/results\", \n       \"metadata\": { \n         \"column_names\": [ \n           \"day\", \n           \"avg_price\", \n           \"sma_20\", \n           \"sma_50\", \n           \"sma_100\", \n           \"sma_200\" \n         ], \n         \"result_set_bytes\": 10710, \n         \"total_row_count\": 91, \n         \"datapoint_count\": 546, \n         \"pending_time_millis\": 13, \n         \"execution_time_millis\": 8038 \n       } \n     } \n   }, \n   \"visualizations\": [ \n     { \n       \"title\": \"SMA\", \n       \"image_url\": \"https://prod-dune-media.s3.eu-west-1.amazonaws.com/screenshots/3137182/01HHHPMKG6NBY0B04A36TS3AQH/5232261.png\" \n     }, \n     { \n       \"title\": \"Counter\", \n       \"image_url\": \"https://prod-dune-media.s3.eu-west-1.amazonaws.com/screenshots/3137182/01HHHPMKG6NBY0B04A36TS3AQH/5451006.png\" \n     }, \n     { \n       \"title\": \"Last days of data\", \n       \"image_url\": \"https://prod-dune-media.s3.eu-west-1.amazonaws.com/screenshots/3137182/01HHHPMKG6NBY0B04A36TS3AQH/5451008.png\" \n     } \n   ] \n } \n \n Validation of the webhook format can be done at  Webhook.site  (https://webhook.site/) . You can easily test it out by triggering manual deliveries by clicking the Manual trigger link below the URL field. \n ", "url": "https://docs.dune.com/web-app/alerts#webhook-alerts"}
{"content": "\u200b Integration with Third-Party Apps \n ", "url": "https://docs.dune.com/web-app/alerts#integration-with-third-party-apps"}
{"content": "\u200b Slack Support via Webhook \n Following these simple steps you have get query results posted directly in Slack at your desired frequency. \n \n Click Create  Create New App  on your  Slack app page  (https://api.slack.com/apps) . \n Choose  From scratch  and give your alert a name, pick the workspace and click  Create App \n Then click \u201cIncoming Webhooks\u201d and activate with the top right toggle. \n Click  Add New Webhook to Workspace  at the bottom of the page. \n Select the Slack channel you want the alert to go to. \n Copy the Slack Webhook URL and paste it into the Dune Alert configuration. \n The help text below the field should indicate that a Slack URL has been detected: \n \n \n Once saved, you will start receiving messages on Slack. Here is an example of how it looks: \n \n ", "url": "https://docs.dune.com/web-app/alerts#slack-support-via-webhook"}
{"content": "\u200b Zapier Integration \n Zapier  (https://zapier.com/)  is a third party solution that supports building integrations between different software solutions without writing any code. With it you can build advanced workflows that relay data between Dune and your favorite work tools. \n We currently offer an experimental  Zapier app  (https://zapier.com/developer/public-invite/194504/2174c6b998748b657f28dab4097f3e80/)  to support connecting Dune with thousands of other tools via Zapier. \n To set it up, follow these steps: \n \n Accept the invite to use our private Zapier app via  this link  (https://zapier.com/developer/public-invite/194504/2174c6b998748b657f28dab4097f3e80/) . \n Create a new zap, with a  Webhook trigger  (https://zapier.com/apps/webhook/integrations) . \n Copy the webhook URL provided by Zapier\u2019s Webhook trigger, and paste it in the Dune webhook URL field. \n Now, on Zapier you can click Test to test that the webhook works. \n Trigger a manual hook request from the Alerts configuration form to test it out, and it should show up on Zapier. \n \n If you want to relay screenshots to other tools, the screenshots will be in the payload. \n If you want to relay query results, the Dune Zapier App includes an action to fetch a query\u2019s latest results by query id, which will allow you to easily fetch query results. \n \n \n \n This is where you can trigger manual hook deliveries: \n \n Your setup on Zapier should look something like this: \n \n ", "url": "https://docs.dune.com/web-app/alerts#zapier-integration"}
{"content": "\u200b Known Issues and Solutions \n \n \n Manual Alert Triggering:  Currently, manual triggering is only available for webhooks. \n \n We\u2019re planning to add it to Email and Slack. In the meantime, you can set your query on a 15-minute schedule for quicker testing. \n \n \n \n No results in webhook:  Instead of including query results in the callback, the webhook payload includes a URL to fetch the query\u2019s results in case you need to action on them. \n \n We do not include datapoints in the hook callback in order to prevent unwanted credit spend on data exports. \n We\u2019re open to feedback on changing this behavior. If you have thoughts, let us know. \n \n \n \n ", "url": "https://docs.dune.com/web-app/alerts#known-issues-and-solutions"}
{"content": "\u200b Feedback \n Feedback can be provided through the Alerts Beta Telegram channel. \n Join the channel  (https://t.me/+bt5J1QlJ3_FhMDU0) \n ", "url": "https://docs.dune.com/web-app/alerts#feedback"}
{"content": "\u200b Acknowledgement \n Thank you to everyone that participated in our beta testing program. Your feedback has been essential for improving this feature. \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /web-app/alerts) Search content  (/web-app/search) Bug Bounty  (/web-app/bug-bounty) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Setup  (#setup) Accessing Alerts  (#accessing-alerts) Alert Timing  (#alert-timing) Alert Content  (#alert-content) Email Alerts  (#email-alerts) Webhook Alerts  (#webhook-alerts) Integration with Third-Party Apps  (#integration-with-third-party-apps) Slack Support via Webhook  (#slack-support-via-webhook) Zapier Integration  (#zapier-integration) Known Issues and Solutions  (#known-issues-and-solutions) Feedback  (#feedback) Acknowledgement  (#acknowledgement)", "url": "https://docs.dune.com/web-app/alerts#acknowledgement"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Jump right in Search for Content on Dune Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Welcome  (/home) Quickstart  (/quickstart) Web3 Data Resources  (/learning-resources) Jump right in Create your first query  (/learning/how-tos/create-your-first-query) Create New Content  (/learning/how-tos/create-new-content) Create your first visualization  (/learning/how-tos/create-your-first-visualization) Navigate the Query Editor  (/learning/how-tos/navigate-query-editor) Find Datasets on Dune  (/learning/how-tos/find-datasets) Export Data Out of Dune  (/learning/how-tos/export-data-out) Create and Manage Teams on Dune  (/learning/how-tos/create-and-manage-teams) Understanding Credits on Dune  (/learning/how-tos/credit-system-on-dune) Search for Content on Dune  (/learning/how-tos/search-for-content) Share Dune Content  (/learning/how-tos/share-dune-content) Share your query  (/learning/how-tos/share-your-query) Transfer Ownership  (/learning/how-tos/transfer-ownership) Jump right in Search for Content on Dune How to efficiently search for content on Dune With over 100K dashboards, 700 saved queries, and a continuous influx of new content each week, navigating Dune can sometimes feel overwhelming. However, with a grasp of the basics, finding what you need becomes a breeze. \n In this guide, we\u2019ll walk you through the essentials of searching for content on Dune, focusing on three primary areas: \n \n Discover page \n Global search bar \n Library \n \n ", "url": "https://docs.dune.com/learning/how-tos/search-for-content"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Dune Catalyst Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune Catalyst  (/catalyst/overview) Dune Catalyst Empower Your Blockchain with the Leading Data Platform. ", "url": "https://docs.dune.com/catalyst/overview"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Jump right in Find Datasets on Dune Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Welcome  (/home) Quickstart  (/quickstart) Web3 Data Resources  (/learning-resources) Jump right in Create your first query  (/learning/how-tos/create-your-first-query) Create New Content  (/learning/how-tos/create-new-content) Create your first visualization  (/learning/how-tos/create-your-first-visualization) Navigate the Query Editor  (/learning/how-tos/navigate-query-editor) Find Datasets on Dune  (/learning/how-tos/find-datasets) Export Data Out of Dune  (/learning/how-tos/export-data-out) Create and Manage Teams on Dune  (/learning/how-tos/create-and-manage-teams) Understanding Credits on Dune  (/learning/how-tos/credit-system-on-dune) Search for Content on Dune  (/learning/how-tos/search-for-content) Share Dune Content  (/learning/how-tos/share-dune-content) Share your query  (/learning/how-tos/share-your-query) Transfer Ownership  (/learning/how-tos/transfer-ownership) Jump right in Find Datasets on Dune How to find datasets on Dune Navigating over a million data tables on Dune might seem daunting. This guide simplifies the process, highlighting the categories of datasets available and offering tips on efficient searching. \n ", "url": "https://docs.dune.com/learning/how-tos/find-datasets"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Jump right in Transfer Ownership Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Welcome  (/home) Quickstart  (/quickstart) Web3 Data Resources  (/learning-resources) Jump right in Create your first query  (/learning/how-tos/create-your-first-query) Create New Content  (/learning/how-tos/create-new-content) Create your first visualization  (/learning/how-tos/create-your-first-visualization) Navigate the Query Editor  (/learning/how-tos/navigate-query-editor) Find Datasets on Dune  (/learning/how-tos/find-datasets) Export Data Out of Dune  (/learning/how-tos/export-data-out) Create and Manage Teams on Dune  (/learning/how-tos/create-and-manage-teams) Understanding Credits on Dune  (/learning/how-tos/credit-system-on-dune) Search for Content on Dune  (/learning/how-tos/search-for-content) Share Dune Content  (/learning/how-tos/share-dune-content) Share your query  (/learning/how-tos/share-your-query) Transfer Ownership  (/learning/how-tos/transfer-ownership) Jump right in Transfer Ownership How to transfer ownership of your creations This guide explains how to transfer ownership of content, including queries and dashboards, among different users and team accounts. \n ", "url": "https://docs.dune.com/learning/how-tos/transfer-ownership"}
{"content": "\u200b Discover Page \n Navigate to the Discover page to begin your exploration. Here, you\u2019ll find four categories to delve into: dashboards, queries, wizards (our esteemed creators \ud83e\uddd9 on Dune), and teams. \n \n For both dashboards and queries, you can refine your search based on: \n \n Favorites: Sort by the number of stars received within a specific timeframe. \n Trending: Identify popular content within a selected period. \n New: Filter by the content\u2019s creation date. \n \n \n By default, the Discover page showcases trending dashboards from the past 4 hours. This feature offers a real-time glimpse into the crypto world, highlighting what others are currently viewing and creating. It\u2019s an invaluable resource for spotting early trends and insights. \n ", "url": "https://docs.dune.com/learning/how-tos/search-for-content#discover-page"}
{"content": "\u200b Global Search Bar \n \n Click on the search bar located at the top left or use the shortcut Cmd/Ctrl + P. \n Enter your desired keywords. \n The results will display related dashboards, queries, wizards, or teams. \n Dive deeper into a category (e.g., \u201cDashboards\u201d) and select your preferred ranking criteria. \n Choose the content that best suits your needs. \n \n \n When searching for a dashboard, consider the number of stars it has received and its creator. For added assurance, you can also review the query\u2019s source code to understand its logic. \n ", "url": "https://docs.dune.com/learning/how-tos/search-for-content#global-search-bar"}
{"content": "\u200b Library: A Hub for Your Creations \n To access content you\u2019ve personally created, visit your library. Here, you can find all your dashboards and queries. Enhance your organization by categorizing them into various \u201cFolders\u201d. Additionally, the library allows you to search, filter, and sort your content based on different criteria. \n \n It\u2019s crucial to note that the Library\u2019s content is context-sensitive. Depending on the user or team profile you\u2019re viewing, you\u2019ll see creations specific to that account. \n \n Happy searching! Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /learning/how-tos/search-for-content) Understanding Credits on Dune  (/learning/how-tos/credit-system-on-dune) Share Dune Content  (/learning/how-tos/share-dune-content) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Discover Page  (#discover-page) Global Search Bar  (#global-search-bar) Library: A Hub for Your Creations  (#library-a-hub-for-your-creations)", "url": "https://docs.dune.com/learning/how-tos/search-for-content#library-a-hub-for-your-creations"}
{"content": "\u200b Why Your Blockchain Should Be on Dune \n Join the  largest crypto data community  and unlock unmatched benefits for your project. Dune is the  source of truth  for blockchain data, providing essential tools and community engagement. \n \n Community : Connect with over  550k active analysts , fostering collaboration and driving insights. \n Exposure : Gain visibility with over  1M unique visitors , boosting your project\u2019s reach and credibility. \n Trusted Data : Access data from  60+ chains  (/data-catalog/overview) ,  1.5M datasets , and  750K queries \u2014transparent, accurate, and composable. \n Growth : Scale your ecosystem, attracting  top protocols, developers, and community members . \n Industry Leadership : Leverage Dune\u2019s leading infrastructure and build  trust and transparency  within the crypto world. \n \n ", "url": "https://docs.dune.com/catalyst/overview#why-your-blockchain-should-be-on-dune"}
{"content": "\u200b Integration Options \n Dune offers flexible integration routes for both EVM and non-EVM chains, allowing you to easily integrate your blockchain data into the platform. Here are the three primary routes for integration: \n EVM Chains \n White-Glove Service  for EVM-data-compatible chains \n Integrate  from a node provider \n Gain access to fully  decoded (protocol) and curated datasets \n  (/_sites/docs.dune.com/catalyst/overview#1-evm-chains) Non-EVM Chains (RPC Route) \n Index from nodes \n Dune  builds custom tables  for chain analytics \n  (/_sites/docs.dune.com/catalyst/overview#2-non-evm-chains-rpc-route) Non-EVM Chains (Database Route) \n Index and maintain transformed data  from AWS or GCS \n Syncs hourly  from AWS S3 or GCS to Dune \n  (/_sites/docs.dune.com/catalyst/overview#3-non-evm-chains-database-route) \n ", "url": "https://docs.dune.com/catalyst/overview#integration-options"}
{"content": "\u200b 1. EVM Chains \n What it is: \n For EVM-based chains, Dune provides a fully-managed, white-glove service approach to integrate blockchain data. This involves ingesting raw data, decoding smart contracts, and curating datasets for deeper analytics. \n Technical Requirements: \n \n \n Node Provider : \n Your chain will need a reliable node provider, such as QuickNode, Alchemy, Infura, Chainstack, or Tatum. \n \n \n RPC Node Calls : \n The RPC node must support the following methods so Dune can transform raw data into Dune\u2019s standard EVM schema for  transactions, logs, traces, and blocks : \n \n eth_getBlockByNumber  (for blocks/transactions) \n eth_getBlockReceipts  (for logs) \n debug_traceBlockByNumber  (for traces) \n eth_getTransactionReceipt  (alternative for logs) \n trace_block  (alternative for traces) \n \n \n \n Standardized ABIs : \n Your chain should support smart contract definitions with standardized ABIs. This typically includes an API endpoint like  [contract_getsourcecode](https://docs.etherscan.io/api-endpoints/contracts#get-contract-source-code-for-verified-contract-source-codes) , allowing Dune to pull ABIs for contract addresses. The endpoint should provide: \n \n Is it a verified contract? \n ABI: JSON format (potentially stringified) \n ContractName: string \n Proxy: boolean \n Implementation: address of proxy contract (if proxy) \n \n \n \n Example Chains \n To get a feel of how data on Dune looks for this integration route, check out examples like  Ethereum  (/data-catalog/evm/ethereum/overview) ,  Base  (/data-catalog/evm/base/overview) , or  Polygon  (/data-catalog/evm/polygon/overview) . \n \n ", "url": "https://docs.dune.com/catalyst/overview#1-evm-chains"}
{"content": "\u200b 2. Non-EVM Chains: RPC Route \n What it is: \n For non-EVM chains supporting RPC calls, Dune provides an integration method via node indexing. This setup allows data to flow directly from the blockchain nodes to Dune, transforming it into raw datasets that can be used in analysis and dashboards. \n Technical Requirements: \n \n Node Indexing : The chain should have a node provider capable of making relevant RPC calls (e.g.,  getBlock ,  getTransaction , or chain-specific alternatives). \n \n Example Chains \n To get a feel of how data on Dune looks for this integration route, check out  Solana  (/data-catalog/solana/overview) ,  Bitcoin  (/data-catalog/bitcoin/overview) , or  Aptos  (/data-catalog/aptos/overview) . \n \n ", "url": "https://docs.dune.com/catalyst/overview#2-non-evm-chains-rpc-route"}
{"content": "\u200b 3. Non-EVM Chains: Database Route \n What it is: \n For chains where an RPC approach isn\u2019t applicable, Dune can integrate data through a database route. This method involves indexing chain data into Dune from datasets that are already transformed and stored in cloud solutions such as AWS S3 or Google Cloud Storage (GCS). \n Technical Requirements: \n \n Data Format : AVRO (preferred) or Parquet format. \n Folder Structure : Data should follow the structure  bucket-name/chain/table-name/yyyy-mm-dd/hh-mm-ss-XXX...XXX.avro . \n S3 Bucket : Must have \u201crequester pays\u201d disabled and be located in the EU. \n Table Management : Provide a list of tables, their size, and growth rate (daily or monthly). \n Data Updates : Tables are indexed and refreshed hourly (append-only, no row-level updates or deletes). \n Backfills : Full table replacements can be requested on a case-by-case basis. \n Storage Costs : All Dune storage costs are fully covered. \n \n Example Chains \n To explore examples of this integration, check out the data for  Polkadot  (/data-catalog/substrate/overview)  or  Near  (/data-catalog/near/overview) . \n \n ", "url": "https://docs.dune.com/catalyst/overview#3-non-evm-chains-database-route"}
{"content": "\u200b Data Latency \n Data latency is important to consider when integrating your chain with Dune. The platform ensures fast data availability, but latency varies based on the integration route: \n \n \n EVM Chains & Non-EVM RPC Chains : These chains aim to stay synchronized with the latest block, minimizing delays to a few seconds or minutes. Dune\u2019s infrastructure ensures minimal latency, allowing you to access real-time data quickly. \n \n \n Non-EVM Database Route : Data flows from your cloud database into Dune on an hourly basis. This introduces a bit more delay compared to RPC-based integrations, but the data remains highly reliable. \n \n \n For more detailed information on data freshness and latency, refer to  Dune\u2019s data freshness documentation  (/data-catalog/data-freshness) . \n ", "url": "https://docs.dune.com/catalyst/overview#data-latency"}
{"content": "\u200b Ready to Integrate? \n Have Questions? Ready to Get Started? Contact our partnership team today to get started with Dune Catalyst integration or to learn more about how we can help power your blockchain data journey.  (https://dune.com/enterprise) Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /catalyst/overview) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Why Your Blockchain Should Be on Dune  (#why-your-blockchain-should-be-on-dune) Integration Options  (#integration-options) 1. EVM Chains  (#1-evm-chains) 2. Non-EVM Chains: RPC Route  (#2-non-evm-chains-rpc-route) 3. Non-EVM Chains: Database Route  (#3-non-evm-chains-database-route) Data Latency  (#data-latency) Ready to Integrate?  (#ready-to-integrate)", "url": "https://docs.dune.com/catalyst/overview#ready-to-integrate"}
{"content": "\u200b Categories of Datasets \n Dune processes blockchain data in several stages: ingestion, decoding, aggregation, and standardization. This results in three main categories: raw, decoded, and curated. Additionally, there\u2019s a community category that houses community-supported off-chain datasets like Reservoir, Snapshot, and others. \n Beyond these, Dune showcases the most frequently used datasets under the \u201cessential\u201d category. Your materialized query results are neatly categorized under \u201cmaterialized views\u201d. \n ![data categories](images/data categories.png) \n ", "url": "https://docs.dune.com/learning/how-tos/find-datasets#categories-of-datasets"}
{"content": "\u200b Available Chains on Dune \n Dune supports 30 EVM chains and many non-EVM chains like Solana, Bitcoin, NEAR and others. For a complete list of  supported chains  (/data-catalog) , visit the  data explorer and view the full selection  (https://dune.com/queries?category=canonical)  under \u201cRaw blockchain data\u201d. \n \n ", "url": "https://docs.dune.com/learning/how-tos/find-datasets#available-chains-on-dune"}
{"content": "\u200b Search via the Data Explorer \n The data explorer is an invaluable tool for pinpointing specific datasets among the vast collection. For instance, to locate datasets for Uniswap v2 within the \u201cDecoded\u201d and \u201cSpells\u201d categories, follow the steps illustrated here: \n Once you\u2019ve identified the desired table, use the double-arrow symbol to instantly transfer the full table name to the editor. \n Ensure you\u2019re at the correct search level. At times, a nested search space might yield unexpected results. We\u2019re refining this user experience. For now, the URL can help you verify your current position. \n \n Heuristics for when to use which categories \n Starting Point: If unsure, begin with the \u201cEssentials\u201d category. \n Protocol-Specific Analysis: The \u201cDecoded projects\u201d category is ideal. Filter by a specific chain, event, or function to expedite your search. \n Ecosystem Research: The \u201cRaw\u201d category is a good starting point. Alternatively, the \u201cSpells\u201d category might have pre-aggregated data for your analysis \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /learning/how-tos/find-datasets) Navigate the Query Editor  (/learning/how-tos/navigate-query-editor) Export Data Out of Dune  (/learning/how-tos/export-data-out) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Categories of Datasets  (#categories-of-datasets) Available Chains on Dune  (#available-chains-on-dune) Search via the Data Explorer  (#search-via-the-data-explorer)", "url": "https://docs.dune.com/learning/how-tos/find-datasets#search-via-the-data-explorer"}
{"content": "\u200b Transferring Query Ownership \n \n Click the cogwheel button to access settings. \n In the \u201cOwner\u201d dropdown, select the new owner, be it another team you\u2019re part of or a teammate within the current team. \n \n \n ", "url": "https://docs.dune.com/learning/how-tos/transfer-ownership#transferring-query-ownership"}
{"content": "\u200b Viewing Ownership Changes \n Click the \u201cVersion history\u201d button to see changes in ownership. \n \n ", "url": "https://docs.dune.com/learning/how-tos/transfer-ownership#viewing-ownership-changes"}
{"content": "\u200b Transferring Dashboard Ownership \n \n Click \u201cEdit\u201d then \u201cSettings\u201d to open the modal. \n Follow the same steps as above to transfer ownership of your dashboard. \n \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /learning/how-tos/transfer-ownership) Share your query  (/learning/how-tos/share-your-query) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Transferring Query Ownership  (#transferring-query-ownership) Viewing Ownership Changes  (#viewing-ownership-changes) Transferring Dashboard Ownership  (#transferring-dashboard-ownership)", "url": "https://docs.dune.com/learning/how-tos/transfer-ownership#transferring-dashboard-ownership"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Datashare FAQs Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/datashare/datashare) Getting Started  (/datashare/datashare-trial) FAQs  (/datashare/datashare-faqs) Datashare FAQs Frequently Asked Questions about Dune Datashare I'm interested in Datashare and would like to move forward. Please go to our  Enterprise  (https://dune.com/enterprise)  page on Dune and fill out the available short form. Our Datashare team will reach out to you directly! I'm interested in data that isn't available for the trial. We can provide any of Dune\u2019s vast catalog on Snowflake. For a permissionless trial we only offer the pre-uploaded tables available. You can reach out to us at  datashares-sales@dune.com  (mailto:datashares-sales@dune.com)  to discuss your specific needs. How often does the trial data get refreshed? Currently the data is updated every 24 hours by default, for special cases we can discuss more frequent updates. We replicate the data to multiple regions to ensure low latency and high availability. I clicked GET and did not see the popup window. What happened? In some cases, Snowflake has to prep and duplicate the data to a local server before it can be downloaded and added to your Snowflake. In this case, Snowflake will either duplicate the data and then make it available to you, or send you an email when it is available for you to download. How long does the trial run? The trial period for each dataset (chain) runs for 30 days. I'm facing an issue I don't see on this list. Where do I go? Check out our datashare channel on  Discord  (https://discord.gg/2VCqwzzF7u)  or email  support@dune.com  (mailto:support@dune.com) . Our support staff is ready to help you with your issue. Please make sure to provide as much context on the issue as possible for our staff. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /datashare/datashare-faqs) Getting Started  (/datashare/datashare-trial) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/datashare/datashare-faqs"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functions and Operators Conversions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators Conversions ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/conversion"}
{"content": "\u200b Implicit Conversions \n DuneSQL will implicitly convert numeric and character values to the correct type if such a conversion is possible. \n DuneSQL will not convert implicitly between character and numeric types. \n For example, a query that expects a  VARCHAR  will not automatically convert a  BIGINT  value to an equivalent  VARCHAR . \n When necessary, values can be explicitly cast to a particular type using the  cast function  (/_sites/docs.dune.com/query-engine/Functions-and-operators/conversion#cast) . \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/conversion#implicit-conversions"}
{"content": "\u200b Implicit Casting with numeric types \n DuneSQL has added support for implicit casts when performing operations with  INT256  and  UINT256  and other numeric types like  INTEGER ,  BIGINTEGER ,  DECIMAL , or  DOUBLE .\nThis allows you to use  INT256  and  UINT256  without adding casts explicitly. \n Whenever DuneSQL needs to find a common type for  INT256  or  UINT256  and another numeric type, it will generally go towards the bigger type. \n We consider  INT256  to be bigger than  UINT256 . In some cases, this might lead to an overflow error when trying to include  UINT256  and  INT256  values into the same expression. \n TINYINT ,  SMALLINT ,  INTEGER ,  BIGINT , and  DECIMAL  type with zero scale, like  DECIMAL(2,0)  will be converted to  INT256  or  UINT256 .\nPlease note that some conversions to  UINT256  will fail, since this type cannot hold negative values. \n For operations involving  INT256  or  UINT256  and  DECIMAL  type with non-zero scale, like  DECIMAL(2,1) ,\nthe result type is  DOUBLE . Also, for operations involving  INT256  or  UINT256  and  REAL  or  DOUBLE  types, the result type is  DOUBLE .\nPlease note that  DOUBLE  is an approximate numeric type and hence the conversion might lose some precision.\nYou can use explicit cast to override DuneSQL conversion rules. \n With implicit conversion, this arithmetic expression: \n SELECT   2   *  UINT256  '1' ; \n \n will be equivalent to: \n SELECT  CAST ( 2   AS  UINT256 )   *  UINT256  '1' ; \n \n Similarly, this comparison: \n SELECT  INT256  '1'   >   0 ; \n \n will be equivalent to: \n SELECT  INT256  '1'   >  CAST ( 0   AS  INT256 ) ; \n \n DuneSQL uses implicit conversions in many other contexts. Here are some examples: \n SELECT   COALESCE ( 1 ,  INT256  '2' ) ; \n -- will resolve to INT256 \n \n SELECT   CASE   \n      WHEN   false   THEN   BIGINT   '0'   \n      WHEN   false   THEN  INT256  '1'   \n      WHEN   true   THEN  UINT256  '2'   \n END ; \n -- will resolve to INT256 \n \n SELECT   *   FROM   ( \n      ( VALUES   TINYINT   '0' )   \n      UNION   \n      ( VALUES  INT256  '1' )   \n      UNION   \n      ( VALUES   DOUBLE   '2' ) ) ; \n -- will resolve to DOUBLE \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/conversion#implicit-casting-with-numeric-types"}
{"content": "\u200b Conversion functions \n \u200b  (#cast) cast() \n cast(value AS type)  \u2192 type \n Explicitly cast a value as a type. This can be used to cast a varchar to\na numeric value type and vice versa. \n \u200b  (#try-cast) try_cast() \n try_cast(value AS type)  \u2192 type \n Like  cast , but returns  null  if the cast\nfails. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/conversion#conversion-functions"}
{"content": "\u200b Formatting \n \u200b  (#format) format() \n format(format, args\\...)  \u2192 varchar \n Returns a formatted string using the specified  format\nstring  (https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Formatter.html#syntax) \nand arguments: \n      SELECT   format ( '%s%%' ,   123 ) ; \n      -- '123%' \n \n      SELECT   format ( '%.5f' ,  pi ( ) ) ; \n      -- '3.14159' \n \n      SELECT   format ( '%03d' ,   8 ) ; \n      -- '008' \n \n      SELECT   format ( '%,.2f' ,   1234567.89 ) ; \n      -- '1,234,567.89' \n \n      SELECT   format ( '%-7s,%7s' ,   'hello' ,   'world' ) ; \n      -- 'hello  ,  world' \n \n      SELECT   format ( '%2$s %3$s %1$s' ,   'a' ,   'b' ,   'c' ) ; \n      -- 'b c a' \n \n      SELECT   format ( '%1$tA, %1$tB %1$te, %1$tY' ,   date   '2006-07-04' ) ; \n      -- 'Tuesday, July 4, 2006' \n \n \u200b  (#format-number) format_number() \n format_number(number)  \u2192 varchar\nReturns a formatted string using a unit symbol: \n SELECT format_number(123456); \u2014 \u2018123K\u2019\nSELECT format_number(1000000); \u2014 \u20181M\u2019 \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/conversion#formatting"}
{"content": "\u200b Miscellaneous \n \u200b  (#typeof) typeof() \n typeof(expr)  \u2192 varchar \n Returns the name of the type of the provided expression: \n      SELECT  typeof ( 123 ) ;   -- integer \n      SELECT  typeof ( 'cat' ) ;   -- varchar(3) \n      SELECT  typeof ( cos ( 2 )   +   1.5 ) ;   -- double \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/conversion) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Implicit Conversions  (#implicit-conversions) Implicit Casting with numeric types  (#implicit-casting-with-numeric-types) Conversion functions  (#conversion-functions) cast()  (#cast) try_cast()  (#try-cast) Formatting  (#formatting) format()  (#format) format_number()  (#format-number) Miscellaneous  (#miscellaneous) typeof()  (#typeof)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/conversion#miscellaneous"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functions and Operators Base58 functions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators Base58 functions Base58 is a binary-to-text encoding scheme that is commonly used in Bitcoin and Solana. It uses an alphabet of 58 characters, which is the same as the Base64 encoding scheme, but omits the characters  0 ,  O ,  I , and  l  to avoid confusion between similar-looking letters and numbers. \n You can use the  from_base58  function to convert a Base58-encoded string to a  VARBINARY  value. For example, the following query converts the Base58-encoded string  3DZBMRwnSU8f  to a  VARBINARY  value: \n SELECT   \n     from_base58 ( '3DZBMRwnSU8f' ) \n -- results in VARBINARY 0x030094357700000000 \n \n Now that we are able to convert Base58-encoded strings to  VARBINARY  values, we can use the  bytearray_to_bigint  function to convert the  VARBINARY  value to a  BIGINT  value. However, we need to consider more things: \n \n \n The decoded  VARBINARY  value does not only contain the data we want to convert to a  BIGINT  value. It also contains a discriminator that indicates which function of a solana program was called. We need to remove this discriminator before we can convert the  VARBINARY  value to a  BIGINT  value. We do this by using the  bytearray_substring  function. \n \n \n Solana uses little-endian byte order, so we need to reverse the byte order before we can convert the  VARBINARY  value to a  BIGINT  value. We do this by using the  bytearray_reverse  function. \n \n \n SELECT   \n     bytearray_to_bigint ( bytearray_reverse ( bytearray_substring ( from_base58 ( '3DZBMRwnSU8f' ) ,   2 ,   8 ) ) )   as  token_sold_amount \n -- results in BIGINT 2000000000 \n \n In a real-world scenario, here is how you would use these functions to decode a Base58-encoded string that represents a token amount in a Solana swap transaction: \n SELECT \n sp . call_inner_instructions [ 1 ] . data \n , from_base58 ( sp . call_inner_instructions [ 1 ] . data )   as  first_step \n , bytearray_substring ( from_base58 ( sp . call_inner_instructions [ 1 ] . data ) ,   2 ,   8 )   as  second_step \n , bytearray_reverse ( bytearray_substring ( from_base58 ( sp . call_inner_instructions [ 1 ] . data ) ,   2 ,   8 ) )   as  third_step \n , bytearray_to_bigint ( bytearray_reverse ( bytearray_substring ( from_base58 ( sp . call_inner_instructions [ 1 ] . data ) ,   2 ,   8 ) ) )   as  decoded_amount \n FROM  whirlpool_solana . whirlpool_call_swap sp \n WHERE  sp . account_whirlpool  =   '7qbRF6YsyGuLUVs6Y1q64bdVrfe4ZcUUz1JRdoVNUJnm' \n AND  call_tx_id  =   '44kmeC1edSfp21K5kKNVViJvLHG8XQqqu3KbHsrYcYZGmopWwBgP48c9u1DRBMGtQcbvyxd2TT8syY7ZvwpHqkhF' \n and  call_block_slot  =   187701147 \n \n \u2192 Query in Dune  (https://dune.com/queries/2846422) \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/base58"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functions and Operators Conditional expressions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators Conditional expressions ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/conditional"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functions and Operators Tron address functions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators Tron address functions Tron blockchain adopted a custom type of addresses. It is similar to  Base58  (/query-engine/Functions-and-operators/base58)  encoding format, with some modifications. \n Under basic tron address encoding format an address can be encoded as: \n base58encode ( concat ( <constant-prefix>, <address>, <checksum> ) ) \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/tronaddress"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functions and Operators Varbinary functions (DuneSQL) Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators Varbinary functions (DuneSQL) ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/varbinary"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functions and Operators Mathematical functions and operators Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators Mathematical functions and operators ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/math"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functions and Operators UUID functions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators UUID functions uuid()  \u2192 uuid \n Returns a pseudo randomly generated  uuid_type (type 4). Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/uuid) URL functions  (/query-engine/Functions-and-operators/url) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/uuid"}
{"content": "\u200b Functions \n \u200b  (#from-base58) from_base58() \n from_base58(varchar)  \u2192  varbinary \n Converts a Base58-encoded string to a  VARBINARY  value. \n SELECT   \n     from_base58 ( '3DZBMRwnSU8f' ) \n -- results in VARBINARY 0x030094357700000000 \n \n \u200b  (#to-base58) to_base58() \n to_base58(varbinary)  \u2192  varchar \n Converts a  VARBINARY  value to a Base58-encoded string. \n SELECT   \n     to_base58 ( 0x030094357700000000 ) \n -- results in base58 encoded varchar 3DZBMRwnSU8f \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/base58) Array functions and operators  (/query-engine/Functions-and-operators/array) Binary  (/query-engine/Functions-and-operators/binary) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Functions  (#functions) from_base58()  (#from-base58) to_base58()  (#to-base58)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/base58#functions"}
{"content": "\u200b CASE \n The standard SQL  CASE  expression has two forms. The \u201csimple\u201d form\nsearches each  value  expression from left to right until it finds one\nthat equals  expression : \n CASE expression \n     WHEN value THEN result \n     [ WHEN ... ] \n     [ ELSE result ] \n END \n \n The  result  for the matching  value  is returned. If no match is found,\nthe  result  from the  ELSE  clause is returned if it exists, otherwise\nnull is returned. Example: \n      SELECT  a , \n             CASE  a \n                 WHEN   1   THEN   'one' \n                 WHEN   2   THEN   'two' \n                 ELSE   'many' \n             END \n \n The \u201csearched\u201d form evaluates each boolean  condition  from left to\nright until one is true and returns the matching  result : \n CASE \n     WHEN condition THEN result \n     [ WHEN ... ] \n     [ ELSE result ] \n END \n \n If no conditions are true, the  result  from the  ELSE  clause is\nreturned if it exists, otherwise null is returned. Example: \n      SELECT  a ,  b , \n             CASE \n                 WHEN  a  =   1   THEN   'aaa' \n                 WHEN  b  =   2   THEN   'bbb' \n                 ELSE   'ccc' \n             END \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/conditional#case"}
{"content": "\u200b IF \n The  IF  expression has two forms, one supplying only a  true_value  and\nthe other supplying both a  true_value  and a  false_value : \n if(condition, true_value) \n Evaluates and returns  true_value  if  condition  is true, otherwise\nnull is returned and  true_value  is not evaluated. \n if(condition, true_value, false_value) \n Evaluates and returns  true_value  if  condition  is true, otherwise\nevaluates and returns  false_value . \n The following  IF  and  CASE  expressions are equivalent: \n SELECT \n   orderkey , \n   totalprice , \n    IF ( totalprice  >=   150000 ,   'High Value' ,   'Low Value' ) \n FROM  tpch . sf1 . orders ; \n \n SELECT \n   orderkey , \n   totalprice , \n    CASE \n      WHEN  totalprice  >=   150000   THEN   'High Value' \n      ELSE   'Low Value' \n    END \n FROM  tpch . sf1 . orders ; \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/conditional#if"}
{"content": "\u200b COALESCE {#coalesce_function} \n coalesce(value1, value2\\[, \\...\\]) \n Returns the f non-null  value  in the argument list. Like a  CASE \nexpression, arguments are only evaluated if necessary. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/conditional#coalesce-coalesce-function"}
{"content": "\u200b NULLIF \n nullif(value1, value2) \n Returns null if  value1  equals  value2 , otherwise returns  value1 . \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/conditional#nullif"}
{"content": "\u200b TRY \n try(expression) \n Evaluate an expression and handle certain types of errors by returning\n NULL . \n In cases where it is preferable that queries produce  NULL  or default\nvalues instead of failing when corrupt or invalid data is encountered,\nthe  TRY  function may be useful. To specify default values, the  TRY \nfunction can be used in conjunction with the  COALESCE  function. \n The following errors are handled by  TRY : \n \n Division by zero \n Invalid cast or function argument \n Numeric value out of range \n \n Examples \n Source table with some invalid data: \n SELECT   *   FROM  shipping ; \n \n origin_state | origin_zip | packages | total_cost \n --------------+------------+----------+------------ \n California   |      94131 |       25 |        100 \n California   |      P332a |        5 |         72 \n California   |      94025 |        0 |        155 \n New Jersey   |      08544 |      225 |        490 \n (4 rows) \n \n Query failure without  TRY : \n SELECT  CAST ( origin_zip  AS   BIGINT )   FROM  shipping ; \n \n Query failed: Cannot cast 'P332a' to BIGINT \n \n NULL  values with  TRY : \n SELECT  TRY ( CAST ( origin_zip  AS   BIGINT ) )   FROM  shipping ; \n \n origin_zip \n ------------ \n      94131 \n      NULL \n      94025 \n      08544 \n (4 rows) \n \n Query failure without  TRY : \n SELECT  total_cost  /  packages  AS  per_package  FROM  shipping ; \n \n Query failed: Division by zero \n \n Default values with  TRY  and  COALESCE : \n SELECT   COALESCE ( TRY ( total_cost  /  packages ) ,   0 )   AS  per_package  FROM  shipping ; \n \n per_package \n ------------- \n          4 \n         14 \n          0 \n         19 \n (4 rows) \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/conditional) Comparisons  (/query-engine/Functions-and-operators/comparison) Conversions  (/query-engine/Functions-and-operators/conversion) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page CASE  (#case) IF  (#if) COALESCE {#coalesce_function}  (#coalesce-coalesce-function) NULLIF  (#nullif) TRY  (#try)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/conditional#try"}
{"content": "\u200b Functions \n \u200b  (#from-tron-address) from_tron_address() \n from_tron_address(varchar)  \u2192  varbinary \n Converts a Tron address string to the corresponding  VARBINARY  hex address. \n SELECT   \n     from_tron_address ( 'THHRK1bA7YRPZBcLnTP1SZy9ipUpsRwpo6' ) \n -- results in VARBINARY 0x503aa4ad108bd3a89ba0310e23b49fb654cd6986 \n \n \u200b  (#to-tron-address) to_tron_address() \n to_tron_address(varbinary)  \u2192  varchar \n Encodes a  VARBINARY  hex address to the corresponding Tron address. \n SELECT   \n     to_tron_address ( 0x503aa4ad108bd3a89ba0310e23b49fb654cd6986 ) \n -- results 'THHRK1bA7YRPZBcLnTP1SZy9ipUpsRwpo6' \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/tronaddress) TON address functions  (/query-engine/Functions-and-operators/tonaddress) String functions and operators  (/query-engine/Functions-and-operators/string) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Functions  (#functions) from_tron_address()  (#from-tron-address) to_tron_address()  (#to-tron-address)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/tronaddress#functions"}
{"content": "\u200b Varbinary Functions \n Dune SQL represents varbinarys using the varbinary type. \n To make it simpler to work with varbinarys we have the following helper functions, which work with these two kinds of representation. They simplify interactions with varbinarys, as they automatically account for the  0x -prefix and use byte index instead of character index. For instance, the varbinary_substring methods take indexes by byte, not by character (twice the varbinary length). \n You can use these function to extract data from undecoded events logs, or calldata. For instance, if you have a function that takes a  uint256  as an argument, you can use  varbinary_to_uint256  to extract the value from the calldata. You\u2019ll oftentimes need to use  varbinary_substring  to extract the correct part of the calldata or use other bytearray manipulation functions to get the correct value. \n select  tx_hash , \n         data , \n        varbinary_substring ( data , 97 , 32 )   as  fee , \n        varbinary_to_uint256 ( varbinary_substring ( data , 97 , 32 ) )   as  fee_uint256 \n from  optimism . logs \n where  contract_address  =   0xa1ace9ce6862e865937939005b1a6c5ac938a11f \n and  topic0  =   0xc9d5ada2ea384fe04826ecd1b258955ac73c3e2e20d755108eafde90bc5588d4 \n -- sample transaction hash \n and  tx_hash  IN   ( 0x3e3c558e7f723e3bb7de1d8f5f920ca206e3e878984296a2b8e6af2969003a19 , \n                  0xccfd2033adfb1fdd14fdfc047fe554ba7549e396abc6c559e9528a4259295b89 ) \n \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/varbinary#varbinary-functions"}
{"content": "\u200b Varbinary to Numeric Functions \n The varbinary conversion functions throw an overflow exception if the varbinary is larger than the number of bytes supported of the type, even if the most significant bytes are all zero. It is possible to use  varbinary_ltrim  in order to trim the zero bytes from the left. \n Here is a dashboard  (https://dune.com/dune/dune-sql-byte-array-functions-uint256-int256-support)  with examples covering all of the below functions. For a more comprehensive look at all special DuneSQL functions, use this  dashboard  (https://dune.com/cryptuschrist/dunesql-functions)  from  cryptuschrist  (https://dune.com/cryptuschrist) . \n \u200b  (#varbinary-to-integer) varbinary_to_integer() \n varbinary_to_integer(varbinary)  \u2192 integer \n Returns the  INTEGER  value of a big-endian varbinary of length <= 4 representing the integer in two\u2019s complement. If the varbinary has length < 4 it is padded with zero bytes. \n -- convert bytearray to integer [result will be either 1 or 0] \n -- if 1 = true, 0 = false \n SELECT  tx_hash , \n        varbinary_to_integer ( varbinary_ltrim ( varbinary_substring ( data , 1 , 32 ) ) )   as  isQuote_number , \n         CASE   WHEN   varbinary_to_integer ( varbinary_ltrim ( varbinary_substring ( data , 1 , 32 ) ) )   =   1   THEN   TRUE   ELSE   FALSE   END   AS  isQuote \n FROM  arbitrum . logs \n WHERE  contract_address  =   0xdaf4ffb05bfcb2c328c19135e3e74e1182c88283 \n AND  topic0  =   0xf1bc206c8d659bf05edd19865dbae82643062168ec3970d9d7c5468f900487d9 \n LIMIT   10 \n \n \u200b  (#varbinary-to-bigint) varbinary_to_bigint() \n varbinary_to_bigint(varbinary)  \u2192 bigint \n Returns the  BIGINT  value of a big-endian varbinary of length <= 8 representing the bigint in two\u2019s complement. If the varbinary has length < 8 it is padded with zero bytes. \n -- convert bytearray to integer [result will be either 1 or 0] \n -- if 1 = true, 0 = false \n SELECT  tx_hash , \n        varbinary_to_bigint ( varbinary_ltrim ( varbinary_substring ( data , 1 , 32 ) ) )   as  isQuote_number , \n         CASE   WHEN   varbinary_to_bigint ( varbinary_ltrim ( varbinary_substring ( data , 1 , 32 ) ) )   =   1   THEN   TRUE   ELSE   FALSE   END   AS  isQuote \n FROM  arbitrum . logs \n WHERE  contract_address  =   0xdaf4ffb05bfcb2c328c19135e3e74e1182c88283 \n AND  topic0  =   0xf1bc206c8d659bf05edd19865dbae82643062168ec3970d9d7c5468f900487d9 \n LIMIT   10 \n \n \u200b  (#varbinary-to-decimal) varbinary_to_decimal() \n varbinary_to_decimal(varbinary)  \u2192 decimal(38,0) \n Returns the  DECIMAL(38,0)  value of a big-endian varbinary of length <= 16 representing the decimal(38,0) in two\u2019s complement. If the varbinary has length < 16 it is padded with zero bytes. \n -- using raw table to get usdc transfers amount \n -- transfer topic0 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef \n -- usdc contract_address = 0xaf88d065e77c8cc2239327c5edb3a432268e5831 \n SELECT  tx_hash , \n         data , \n        varbinary_to_decimal ( varbinary_ltrim ( data ) )   as  data_decimal \n FROM  arbitrum . logs \n WHERE  topic0  =   0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef \n AND  contract_address  =   0xaf88d065e77c8cc2239327c5edb3a432268e5831 \n AND  block_time  >=   NOW ( )   -   interval   '1'   day \n LIMIT   50 \n \n \u200b  (#varbinary-to-uint256) varbinary_to_uint256() \n varbinary_to_uint256(varbinary)  \u2192 uint256 \n Returns the  UINT256  of a big-endian varbinary of length <= 32 representing the unsigned integer. If the varbinary has length < 32 it is padded with zero bytes. \n select  tx_hash , \n         data , \n        varbinary_substring ( data , 97 , 32 )   as  fee , \n        varbinary_to_uint256 ( varbinary_substring ( data , 97 , 32 ) )   as  fee_uint256 \n from  optimism . logs \n where  contract_address  =   0xa1ace9ce6862e865937939005b1a6c5ac938a11f \n and  topic0  =   0xc9d5ada2ea384fe04826ecd1b258955ac73c3e2e20d755108eafde90bc5588d4 \n -- sample transaction hash \n and  tx_hash  IN   ( 0x3e3c558e7f723e3bb7de1d8f5f920ca206e3e878984296a2b8e6af2969003a19 , \n                  0xccfd2033adfb1fdd14fdfc047fe554ba7549e396abc6c559e9528a4259295b89 ) \n \n \u200b  (#varbinary-to-int256) varbinary_to_int256() \n varbinary_to_int256(varbinary)  \u2192 int256 \n Returns the  INT256  of a big-endian varbinary of length <= 32 representing the signed integer. If the varbinary has length < 32 it is padded with zero bytes. \n select  tx_hash , \n         data , \n        varbinary_substring ( data , 65 , 32 )   as  sizeDelta , \n        varbinary_to_int256 ( varbinary_substring ( data , 65 , 32 ) )   as  sizeDelta_int256 \n from  optimism . logs \n where  contract_address  =   0xa1ace9ce6862e865937939005b1a6c5ac938a11f \n and  topic0  =   0xc9d5ada2ea384fe04826ecd1b258955ac73c3e2e20d755108eafde90bc5588d4 \n -- sample transaction hash \n and  tx_hash  IN   ( 0x3e3c558e7f723e3bb7de1d8f5f920ca206e3e878984296a2b8e6af2969003a19 , \n                  0xccfd2033adfb1fdd14fdfc047fe554ba7549e396abc6c559e9528a4259295b89 ) \n \n \u200b  (#bytea2numeric) bytea2numeric() \n bytea2numeric(varbinary)  \u2192 bigint \n This function has been deprecated. It is an alias for  varbinary_to_bigint . \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/varbinary#varbinary-to-numeric-functions"}
{"content": "\u200b Numeric to Varbinary \n \u200b  (#converting-uint256-to-varbinary) Converting uint256 to varbinary \n varbinary_ltrim(cast(uint256 as varbinary))  \u2192 varbinary \n Converts a uint256 type number into varbinary. \n select  varbinary_ltrim ( \n         cast ( UINT256  '101691398105299641525402875323276528467270701520'   as   varbinary ) \n      )   as  vb \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/varbinary#numeric-to-varbinary"}
{"content": "\u200b Varbinary to text \n \u200b  (#from-utf8) from_utf8() \n from_utf8(varbinary)  \u2192 varchar \n Converts a varbinary to a string using the UTF-8 encoding. \n Select  from_utf8 ( 0x48656c6c6f20576f726c64 ) \n -- returns \"Hello World\" \n \n most commonly will have to be used like this: \n Select  from_utf8 ( varbinary_ltrim ( 0x0000000000000000006e66746e657264732e6169 ) ) \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/varbinary#varbinary-to-text"}
{"content": "\u200b Text to varbinary \n \u200b  (#from-hex) from_hex() \n from_hex(varchar)  \u2192 varbinary \n Converts a varbinary expression in datatype  string  to  varbinary  datatype \n Select  from_hex ( '0x6574686275696c646572' ) \n -- returns VARBINARY 0x6574686275696c646572 \n \n  You  cannot  use  cast(x as varbinary)  in these cases as it will actually encode the string as varbinary which is different from converting the expression to  varbinary .   \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/varbinary#text-to-varbinary"}
{"content": "\u200b Varbinary Manipulation Functions \n \u200b  (#varbinary-concat) varbinary_concat() \n varbinary_concat(varbinary, varbinary)  \u2192 varbinary \n Concatenates two varbinarys or strings. \n SELECT  varbinary_concat ( 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 , \n                          0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48 ) \n \n varbinary_concat(varchar, varchar)  \u2192 varchar \n Concatenates two varbinarys or strings. \n -- concatenate varchar \n -- using typeof to check the datatype \n SELECT  varbinary_concat ( '0xabcd' ,   '0x00ab' )   as  varbinary_varchar_concat , \n        typeof ( varbinary_concat ( '0xabcd' ,   '0x00ab' ) )   as  varbinary_varchar_type \n \n \n \u200b  (#varbinary-length) varbinary_length() \n varbinary_length(varbinary)  \u2192 bigint \n Returns the length of a varbinary. \n   -- this will return 20 \n SELECT  varbinary_length ( 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 ) \n \n varbinary_length(varchar)  \u2192 bigint \n Returns the length of a string. \n   -- this will return 20 \n SELECT  typeof ( '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' )   as  data_type , \n        varbinary_length ( '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' )  varchar_length \n \n \u200b  (#varbinary-ltrim) varbinary_ltrim() \n varbinary_ltrim(varbinary)  \u2192 varbinary \n Removes zero bytes or spaces from the beginning of a varbinary \n   -- this will remove the zeros at the front, \n   -- returning 0xa2b80f9c09558945800ddf4f8786dcc8b1c44974 \n SELECT  varbinary_ltrim ( 0x000000000000000000000000a2b80f9c09558945800ddf4f8786dcc8b1c44974 ) \n \n varbinary_ltrim(varchar)  \u2192 varchar \n Removes spaces from the beginning of a string. \n   -- this will remove the zeros at the front, \n   -- returning 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 \n SELECT  typeof ( '0x0000000000000000000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' )   as  data_type , \n        varbinary_ltrim ( '0x0000000000000000000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' )  varchar_ltrim \n \n \u200b  (#varbinary-rtrim) varbinary_rtrim() \n varbinary_rtrim(varbinary) or varbinary_rtrim(varchar)  \u2192 varbinary or varchar \n Removes zero bytes or spaces from the end of a varbinary or string. \n   -- this will remove the zeros at the end, \n   -- returning 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 \n SELECT  varbinary_ltrim ( 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000 ) \n \n \u200b  (#varbinary-position) varbinary_position() \n varbinary_position(varbinary, varbinary)  \u2192 bigint \n Returns the index of the first occurrence of a given bytearray or string (or 0 if not found) within a varbinary or string. \n \n -- get $ARKM claimers  \n SELECT   *   FROM  ethereum . transactions \n WHERE  block_time  >=   TIMESTAMP   '2023-07-17'   -- claim start date \n AND  varbinary_position ( data , 0x3d13f874 )   =   1   -- 0x3d13f874 is the methodID \n AND  success \n LIMIT   100 \n \n \n varbinary_position(varchar, varchar)  \u2192 bigint \n Returns the index of the first occurrence of a given bytearray or string (or 0 if not found) within a varbinary or string. \n -- search for '0x6cc2' and return its position \n SELECT  varbinary_position ( '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' , '0x6cc2' )   \n \n \u200b  (#varbinary-replace) varbinary_replace() \n varbinary_replace(varbinary, varbinary, varbinary)  \u2192 varbinary \n Greedily replaces occurrences of a pattern within a varbinary. \n \n -- replacing the blackhole address (ETH) \n -- to WETH address \n SELECT  varbinary_replace ( 0x0000000000000000000000000000000000000000 , \n                           0x0000000000000000000000000000000000000000 , \n                           0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 )    \n \n varbinary_replace(varchar, varchar, varchar)  \u2192 varchar \n Greedily replaces occurrences of a pattern within a string. \n \n SELECT  varbinary_replace ( '0x0000000000000000000000000000000000000000a2b80f9c09558945800ddf4f8786dcc8b1c44974' , \n                           '0x0000000000000000000000000000000000000000' , \n                           '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' )    \n \n \u200b  (#varbinary-reverse) varbinary_reverse() \n varbinary_reverse(varbinary)  \u2192 varbinary \n Reverses a given varbinary. \n \n SELECT  varbinary_reverse ( 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 ) \n \n varbinary_reverse(varchar)  \u2192 varchar \n Reverses a given string. \n -- '0xabcdef' as original \n -- '0xefcdab' as reversed \n SELECT   '0xabcdef'   as  original , \n        varbinary_reverse ( '0xabcdef' )   as  reversed \n \n \u200b  (#varbinary-starts-with) varbinary_starts_with() \n varbinary_starts_with(varbinary, varbinary)  \u2192 boolean \n Determines whether a varbinary starts with a prefix. \n \n -- get $ARKM claimers  \n -- varbinary_starts_with checks whether  \n -- data starts with 0x3d13f874 (claim methodID) \n SELECT   *   FROM  ethereum . transactions \n WHERE  block_time  >=   TIMESTAMP   '2023-07-17' \n AND  varbinary_starts_with ( data , 0x3d13f874 )   -- returns true if starts with 0x3d13f874 \n AND  success \n LIMIT   100 \n \n \n varbinary_starts_with(varbinary, varbinary)  \u2192 boolean \n Determines whether a varbinary starts with a prefix. \n -- returns true if starts with 0x3d13f874 \n SELECT  varbinary_starts_with ( 0x3d13f874abcd , 0x3d13f874 )   \n \n \n \u200b  (#varbinary-substring) varbinary_substring() \n varbinary_substring(varbinary, integer)  \u2192 varbinary \n Returns a suffix varbinary or string starting at a given index. \n -- using varbinary_substring starting from the 21th index \n -- this returns 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2  \n SELECT   0x0000000000000000000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2   as  original_bytearray , \n        varbinary_substring ( 0x0000000000000000000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 , 21 )   as  bytearraysubstring_data \n \n Returns a subvarbinary of a given length starting at an index. \n -- getting the sizeDelta using varbinary_substring \n -- and converting to uint256 using varbinary_to_uint256 \n SELECT  tx_hash , \n        varbinary_substring ( data , 65 , 32 )   as  sizeDelta , \n        varbinary_to_uint256 ( varbinary_substring ( data , 65 , 32 ) )   as  sizeDelta_uint256 \n FROM  optimism . logs \n WHERE  contract_address  =   0xa1ace9ce6862e865937939005b1a6c5ac938a11f \n AND  topic0  =   0xc9d5ada2ea384fe04826ecd1b258955ac73c3e2e20d755108eafde90bc5588d4 \n -- some sample transaction hash \n AND  tx_hash  IN   ( 0x3e3c558e7f723e3bb7de1d8f5f920ca206e3e878984296a2b8e6af2969003a19 ,   \n                  0xccfd2033adfb1fdd14fdfc047fe554ba7549e396abc6c559e9528a4259295b89 )   \n \n varbinary_substring(varbinary, integer, integer)  \u2192 varbinary \n Returns a subvarbinary of a given length starting at an index. Be aware that the length is in bytes, not characters. \n -- returns  0xabcdef \n SELECT   0xabcdefabcdef   as  varbinary_data , \n        varbinary_substring ( 0xabcdefabcdef , 1 , 3 )   as  varbinary_substring \n \n \u200b  (#keccak) keccak() \n keccak(varbinary)  \u2192 varbinary \n Returns the Keccak-256 hash of  varbinary . \n      SELECT  keccak ( to_utf8 ( 'Transfer(address,address,uint256)' ) )   --0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/varbinary) UUID functions  (/query-engine/Functions-and-operators/uuid) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Varbinary Functions  (#varbinary-functions) Varbinary to Numeric Functions  (#varbinary-to-numeric-functions) varbinary_to_integer()  (#varbinary-to-integer) varbinary_to_bigint()  (#varbinary-to-bigint) varbinary_to_decimal()  (#varbinary-to-decimal) varbinary_to_uint256()  (#varbinary-to-uint256) varbinary_to_int256()  (#varbinary-to-int256) bytea2numeric()  (#bytea2numeric) Numeric to Varbinary  (#numeric-to-varbinary) Converting uint256 to varbinary  (#converting-uint256-to-varbinary) Varbinary to text  (#varbinary-to-text) from_utf8()  (#from-utf8) Text to varbinary  (#text-to-varbinary) from_hex()  (#from-hex) Varbinary Manipulation Functions  (#varbinary-manipulation-functions) varbinary_concat()  (#varbinary-concat) varbinary_length()  (#varbinary-length) varbinary_ltrim()  (#varbinary-ltrim) varbinary_rtrim()  (#varbinary-rtrim) varbinary_position()  (#varbinary-position) varbinary_replace()  (#varbinary-replace) varbinary_reverse()  (#varbinary-reverse) varbinary_starts_with()  (#varbinary-starts-with) varbinary_substring()  (#varbinary-substring) keccak()  (#keccak)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/varbinary#varbinary-manipulation-functions"}
{"content": "\u200b Mathematical operators \n Operator Description + Addition - Subtraction * Multiplication / Division (integer division performs truncation) % Modulus (remainder) \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/math#mathematical-operators"}
{"content": "\u200b Mathematical functions \n \u200b  (#abs) abs() \n abs(x)  \u2192 same as input \n Returns the absolute value of  x . \n \u200b  (#cbrt) cbrt() \n cbrt(x)  \u2192 double \n Returns the cube root of  x . \n \u200b  (#ceil) ceil() \n ceil(x)  \u2192 same as input \n This is an alias for  ceiling . \n \u200b  (#ceiling) ceiling() \n ceiling(x)  \u2192 same as input \n Returns  x  rounded up to the nearest integer. \n \u200b  (#degrees) degrees() \n degrees(x)  \u2192 double \n Converts angle  x  in radians to degrees. \n \u200b  (#e) e() \n e()  \u2192 double \n Returns the constant Euler\u2019s number. \n \u200b  (#exp) exp() \n exp(x)  \u2192 double \n Returns Euler\u2019s number raised to the power of  x . \n \u200b  (#floor) floor() \n floor(x)  \u2192 same as input \n Returns  x  rounded down to the nearest integer. \n \u200b  (#ln) ln() \n ln(x)  \u2192 double \n Returns the natural logarithm of  x . \n \u200b  (#log) log() \n log(b, x)  \u2192 double \n Returns the base  b  logarithm of  x . \n \u200b  (#log2) log2() \n log2(x)  \u2192 double \n Returns the base 2 logarithm of  x . \n \u200b  (#log10) log10() \n log10(x)  \u2192 double \n Returns the base 10 logarithm of  x . \n \u200b  (#mod) mod() \n mod(n, m)  \u2192 same as input \n Returns the modulus (remainder) of  n  divided by  m . \n \u200b  (#pi) pi() \n pi()  \u2192 double \n Returns the constant Pi. \n \u200b  (#pow) pow() \n pow(x, p)  \u2192 double \n This is an alias for  power . \n \u200b  (#power) power() \n power(x, p)  \u2192 double \n Returns  x  raised to the power of  p . \n \u200b  (#radians) radians() \n radians(x)  \u2192 double \n Converts angle  x  in degrees to radians. \n \u200b  (#round) round() \n round(x)  \u2192 same as input \n Returns  x  rounded to the nearest integer. \n \u200b  (#round-2) round() \n round(x, d)  \u2192 same as input \n Returns  x  rounded to  d  decimal places. \n \u200b  (#sign) sign() \n sign(x)  \u2192 same as input \n Returns the signum function of  x , that is: \n \n 0 if the argument is 0, \n 1 if the argument is greater than 0, \n -1 if the argument is less than 0.\nFor double arguments, the function additionally returns: \n NaN if the argument is NaN, \n 1 if the argument is +Infinity, \n -1 if the argument is -Infinity. \n \n \u200b  (#sqrt) sqrt() \n sqrt(x)  \u2192 double \n Returns the square root of  x . \n \u200b  (#truncate) truncate() \n truncate(x)  \u2192 double \n Returns  x  rounded to integer by dropping digits after decimal point. \n \u200b  (#width-bucket) width_bucket() \n width_bucket(x, bound1, bound2, n)  \u2192 bigint \n Returns the bin number of  x  in an equi-width histogram with the specified  bound1  and  bound2  bounds and  n  number of buckets. \n \u200b  (#width-bucket-2) width_bucket() \n width_bucket(x, bins)  \u2192 bigint \n Returns the bin number of  x  according to the bins specified by the array  bins . The  bins  parameter must be an array of doubles and is assumed to be in sorted ascending order. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/math#mathematical-functions"}
{"content": "\u200b Random functions \n \u200b  (#rand) rand() \n rand()  \u2192 double \n This is an alias for  random() . \n \u200b  (#random) random() \n random()  \u2192 double \n Returns a pseudo-random value in the range 0.0 <= x < 1.0. \n \u200b  (#random-2) random() \n random(n)  \u2192 same as input \n Returns a pseudo-random number between 0 and n (exclusive). \n \u200b  (#random-3) random() \n random(m, n)  \u2192 same as input \n Returns a pseudo-random number between m and n (exclusive). \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/math#random-functions"}
{"content": "\u200b Trigonometric functions \n All trigonometric function arguments are expressed in radians. See unit conversion functions  degrees  and  radians . \n \u200b  (#acos) acos() \n acos(x)  \u2192 double \n Returns the arc cosine of  x . \n \u200b  (#asin) asin() \n asin(x)  \u2192 double \n Returns the arc sine of  x . \n \u200b  (#atan) atan() \n atan(x)  \u2192 double \n Returns the arc tangent of  x . \n \u200b  (#atan2) atan2() \n atan2(y, x)  \u2192 double \n Returns the arc tangent of  y / x . \n \u200b  (#cos) cos() \n cos(x)  \u2192 double \n Returns the cosine of  x . \n \u200b  (#cosh) cosh() \n cosh(x)  \u2192 double \n Returns the hyperbolic cosine of  x . \n \u200b  (#sin) sin() \n sin(x)  \u2192 double \n Returns the sine of  x . \n \u200b  (#tan) tan() \n tan(x)  \u2192 double \n Returns the tangent of  x . \n \u200b  (#sinh) sinh() \n sinh(x)  \u2192 double\nReturns the hyperbolic sine of  x . \n \u200b  (#tanh) tanh() \n tanh(x)  \u2192 double \n Returns the hyperbolic tangent of  x . \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/math#trigonometric-functions"}
{"content": "\u200b Floating point functions \n \u200b  (#infinity) infinity() \n infinity()  \u2192 double \n Returns the constant representing positive infinity. \n \u200b  (#is-finite) is_finite() \n is_finite(x)  \u2192 boolean \n Determine if  x  is finite. \n \u200b  (#is-infinite) is_infinite() \n is_infinite(x)  \u2192 boolean \n Determine if  x  is infinite. \n \u200b  (#is-nan) is_nan() \n is_nan(x)  \u2192 boolean \n Determine if  x  is not-a-number. \n \u200b  (#nan) nan() \n nan()  \u2192 double \n Returns the constant representing not-a-number. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/math#floating-point-functions"}
{"content": "\u200b Base conversion functions \n \u200b  (#from-base) from_base() \n from_base(string, radix)  \u2192 bigint \n Returns the value of  string  interpreted as a base- radix  number. \n \u200b  (#to-base) to_base() \n to_base(x, radix)  \u2192 varchar \n Returns the base- radix  representation of  x . \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/math#base-conversion-functions"}
{"content": "\u200b Statistical functions \n \u200b  (#cosine-similarity) cosine_similarity() \n cosine_similarity(x, y)  \u2192 double \n Returns the cosine similarity between the sparse vectors  x  and  y :\nSELECT cosine_similarity(MAP(ARRAY[\u2018a\u2019], ARRAY[1.0]), MAP(ARRAY[\u2018a\u2019], ARRAY[2.0])); \u2014 1.0 \n \u200b  (#wilson-interval-lower) wilson_interval_lower() \n wilson_interval_lower(successes, trials, z)  \u2192 double \n Returns the lower bound of the Wilson score interval of a Bernoulli\ntrial process at a confidence specified by the z-score  z . \n \u200b  (#wilson-interval-upper) wilson_interval_upper() \n wilson_interval_upper(successes, trials, z)  \u2192 double \n Returns the upper bound of the Wilson score interval of a Bernoulli\ntrial process at a confidence specified by the z-score  z . \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/math#statistical-functions"}
{"content": "\u200b Cumulative distribution functions \n \u200b  (#beta-cdf) beta_cdf() \n beta_cdf(a, b, v)  \u2192 double \n Compute the Beta cdf with given a, b parameters: P(N < v; a, b). The a,\nb parameters must be positive real numbers and value v must be a real\nvalue. The value v must lie on the interval [0, 1]. \n \u200b  (#inverse-beta-cdf) inverse_beta_cdf() \n inverse_beta_cdf(a, b, p)  \u2192 double \n Compute the inverse of the Beta cdf with given a, b parameters for the\ncumulative probability (p): P(N < n). The a, b parameters must be\npositive real values. The probability p must lie on the interval [0,\n1]. \n \u200b  (#inverse-normal-cdf) inverse_normal_cdf() \n inverse_normal_cdf(mean, sd, p)  \u2192 double \n Compute the inverse of the Normal cdf with given mean and standard \n \u200b  (#normal-cdf) normal_cdf() \n normal_cdf(mean, sd, v)  \u2192 double \n Compute the Normal cdf with given mean and standard deviation (sd): P(N\n< v; mean, sd). The mean and value v must be real values and the\nstandard deviation must be a real and positive value. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/math) Map functions and operators  (/query-engine/Functions-and-operators/map) Machine learning functions  (/query-engine/Functions-and-operators/ml) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Mathematical operators  (#mathematical-operators) Mathematical functions  (#mathematical-functions) abs()  (#abs) cbrt()  (#cbrt) ceil()  (#ceil) ceiling()  (#ceiling) degrees()  (#degrees) e()  (#e) exp()  (#exp) floor()  (#floor) ln()  (#ln) log()  (#log) log2()  (#log2) log10()  (#log10) mod()  (#mod) pi()  (#pi) pow()  (#pow) power()  (#power) radians()  (#radians) round()  (#round) round()  (#round-2) sign()  (#sign) sqrt()  (#sqrt) truncate()  (#truncate) width_bucket()  (#width-bucket) width_bucket()  (#width-bucket-2) Random functions  (#random-functions) rand()  (#rand) random()  (#random) random()  (#random-2) random()  (#random-3) Trigonometric functions  (#trigonometric-functions) acos()  (#acos) asin()  (#asin) atan()  (#atan) atan2()  (#atan2) cos()  (#cos) cosh()  (#cosh) sin()  (#sin) tan()  (#tan) sinh()  (#sinh) tanh()  (#tanh) Floating point functions  (#floating-point-functions) infinity()  (#infinity) is_finite()  (#is-finite) is_infinite()  (#is-infinite) is_nan()  (#is-nan) nan()  (#nan) Base conversion functions  (#base-conversion-functions) from_base()  (#from-base) to_base()  (#to-base) Statistical functions  (#statistical-functions) cosine_similarity()  (#cosine-similarity) wilson_interval_lower()  (#wilson-interval-lower) wilson_interval_upper()  (#wilson-interval-upper) Cumulative distribution functions  (#cumulative-distribution-functions) beta_cdf()  (#beta-cdf) inverse_beta_cdf()  (#inverse-beta-cdf) inverse_normal_cdf()  (#inverse-normal-cdf) normal_cdf()  (#normal-cdf)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/math#cumulative-distribution-functions"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functions and Operators EVM Decoding Functions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators EVM Decoding Functions Functions to decode raw EVM events and function calls in DuneSQL. The EVM decoding functions enable users to decode raw EVM data (using the ABI) into human-readable tables within SQL queries, simplifying subsequent analysis. \ud83e\uddd1\u200d\ud83c\udfeb See the below example dashboard for an illustration. \n Example Dashboard A dashboard with examples of EVM Decoding functions.  (https://dune.com/dune/evm-decoding-functions) \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/evm-decoding-functions"}
{"content": "\u200b Functions \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/evm-decoding-functions#functions"}
{"content": "\u200b decode_evm_event() \n decode_evm_event(abi: varchar, input: table [, topics: descriptor [, data: descriptor [, null_on_error: boolean]]])  \u2192 table \n Decodes EVM events according to the provided ABI; returns each decoded parameter as a separate column as defined in the inputs\u2019 name and type. \n \u200b  (#arguments) Arguments \n \n abi  (required, type: varchar): This is the event specification in JSON format. The passed value must be constant at analysis time. Each input specified in the ABI results in one output column. \n input  (required, type: table): This is the table or query providing the topics and data for event decoding. The passed table or query must be preceded with the  TABLE  keyword. \n topics  (optional, type: descriptor, default: DESCRIPTOR(topic0, topic1, topic2, topic3)): Specifies which columns of the input contain the topics. Null topics are ignored by the function. \n data  (optional, type: descriptor, default: DESCRIPTOR(data)): Specifies which column of the input contains the data. \n null_on_error  (optional, type: boolean, default: true): Specifies the function behavior if a decoding error occurs. By default, the error is suppressed, and null values are produced. \n \n \u200b  (#function-output) Function Output \n The function produces one output column for each parameter defined in the ABI inputs. Column names are based on the parameter names in the ABI, or default to  _arg0 ,  _arg1 , etc., if not named in the ABI. Columns are ordered by the  indexed  property in the ABI, with  indexed  inputs first. \n Pass-through columns: In addition to decoded columns, the  decode_evm_event  function outputs all columns from the input table, i.e. the returned table will have one column for each ABI argument, followed by all columns of the INPUT table. \n \u200b  (#examples) Examples \n \n Basic Usage  (https://dune.com/queries/3851471) \n \n SELECT   *   \n FROM   TABLE   ( \n     decode_evm_event  ( \n       abi  = >   '{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokensSoldIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokensSoldAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"currencyBoughtAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"extraFeeRecipients\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"extraFeeAmounts\",\"type\":\"uint256[]\"}],\"name\":\"CurrencyPurchase\",\"type\":\"event\"}' , \n       input  = >   TABLE   ( \n          SELECT   *   \n          FROM   polygon . logs \n          WHERE  topic0  =   0xb57378559821141c0e7ae964206b7523234d19e5783ade99b3d665eee495c997 \n          LIMIT   20 \n        ) \n      ) \n    ) \n \n \n Using Custom Topics and Data Columns  (https://dune.com/queries/3861622) \n \n SELECT   *   \n FROM   TABLE   ( \n     decode_evm_event  ( \n       abi  = >   '{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokensSoldIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokensSoldAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"currencyBoughtAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"extraFeeRecipients\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"extraFeeAmounts\",\"type\":\"uint256[]\"}],\"name\":\"CurrencyPurchase\",\"type\":\"event\"}' , \n       input  = >   TABLE   ( \n          SELECT  topic0  as  my_topic_0 ,  topic1  as  my_topic_1 ,  topic2  as  my_last_topic ,   data   as  my_data_column ,   *   \n          FROM   polygon . logs \n          WHERE  topic0  =   0xb57378559821141c0e7ae964206b7523234d19e5783ade99b3d665eee495c997 \n          LIMIT   20 \n        ) , \n       topics  = >  DESCRIPTOR ( my_topic_0 ,  my_topic_1 ,  my_last_topic ) , \n        data   = >  DESCRIPTOR ( my_data_column ) , \n       null_on_error  = >   false \n      ) \n    ) \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/evm-decoding-functions#decode-evm-event"}
{"content": "\u200b decode_evm_function_call() \n decode_evm_function_call(abi: varchar, data: table [, input: descriptor [, output: descriptor [, null_on_error: boolean]]])  \u2192 table \n Decodes EVM function calls according to the provided ABI; returns each decoded input and output parameter as separate columns as defined in the ABI. \n \u200b  (#arguments-2) Arguments \n \n abi  (required, type: varchar): This is the function call specification in JSON format. The passed value must be constant at analysis time. The query engine uses this argument to determine the names and types of the result columns. Each input and output specified in the ABI results in one output column. \n data  (required, type: table): This is the table or query providing the input and output columns for function call decoding. The passed table or query must be preceded with the  TABLE  keyword. \n input  (optional, type: descriptor, default: DESCRIPTOR(input)): Specifies which columns of the data table contain the input varbinary for the function call. By default, the function will use the column named  input . \n output  (optional, type: descriptor, default: DESCRIPTOR(output)): Specifies which columns of the data table contain the output varbinary for the function call. By default, the function will use the column named  output . \n null_on_error  (optional, type: boolean, default: true): Specifies the function behavior if a decoding error occurs. By default, the error is suppressed, and null values are produced. \n \n \u200b  (#function-output-2) Function Output \n The function produces one output column for each input and output of the function call as specified in the ABI. Column names are based on the input and output names in the ABI, or default to  _input0 ,  _input1 , etc., and  _output0 ,  _output1 , etc., if not named in the ABI. If two arguments (either input or output) have the same name in the ABI, the last declared argument will take precedence. \n Pass-through columns: In addition to decoded columns, the  decode_evm_function_call  function outputs all columns from the input table, i.e. the returned table will have one column for each ABI argument, followed by all columns of the DATA table. \n \u200b  (#examples-2) Examples \n \n Basic Usage  (https://dune.com/queries/4001654) \n \n SELECT   *   \n FROM   TABLE   ( \n     decode_evm_function_call  ( \n       abi  = >   '{\"name\":\"getPlanet\",\"type\":\"function\",\"inputs\":[{\"name\":\"planetId\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"planetName\",\"type\":\"string\"},{\"name\":\"planetType\",\"type\":\"string\"}]}' , \n        data   = >   TABLE   ( \n          SELECT   *   \n          FROM   polygon . traces \n          WHERE  starts_with ( input ,   0x34efcb8e ) \n          LIMIT   20 \n        ) \n      ) \n    ) \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/evm-decoding-functions#decode-evm-function-call"}
{"content": "\u200b Tips \n \u200b  (#how-to-find-the-abi) How to find the ABI \n \n \n \u26a0\ufe0f ABI inputted should be for only that event or function call, not for the entire contract. \n \n \n For more info on what is an ABI, we recommend visiting  this resource  (https://www.quicknode.com/guides/ethereum-development/smart-contracts/what-is-an-abi) . \n \n \n Generally the best way to find the ABI is by visiting a block explorer like Etherscan, input the contract address, and go to Contract \u2014> Code \u2014> Contract ABI and find the ABI for that specific event. \n \n \n \n \u200b  (#how-to-find-the-topic0-and-filter-for-the-event-emitted) How to find the  topic0  and filter for the event emitted \n \n Generally, you can find the  topic0  by going to a block explorer. We recommend finding  an example transaction  (https://basescan.org/tx/0x446c2c7c605cde83d6aba87921fceec40b111b97166ddbee513424eefae31ba5#eventlog) . Then, go to the \u201cLogs\u201d tab, identify the event you want, and grab the  topic0  from there. \n topic0  is a keccak256 hash of the event\u2019s name concatenated with the types of its indexed parameters, without any spaces. \n \n \n \u200b  (#how-to-find-the-input-and-filter-for-the-function-called) How to find the  input  and filter for the function called \n \n Generally, you can find the  input  by going to a block explorer. We recommend finding  an example transaction  (https://basescan.org/tx/0x446c2c7c605cde83d6aba87921fceec40b111b97166ddbee513424eefae31ba5) . In the \u201cOverview\u201d tab, scroll down and click on \u201cclick to show more\u201d. Then grab the MethodId in the Input Data filed. \n The MethodId you identified is the first 4 bytes of the keccak256 hash of the function signature. So we can use the function  starts_with(input, <MethodID>) to filter for the function call now. \n \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/evm-decoding-functions) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Functions  (#functions) decode_evm_event()  (#decode-evm-event) Arguments  (#arguments) Function Output  (#function-output) Examples  (#examples) decode_evm_function_call()  (#decode-evm-function-call) Arguments  (#arguments-2) Function Output  (#function-output-2) Examples  (#examples-2) Tips  (#tips) How to find the ABI  (#how-to-find-the-abi) How to find the topic0 and filter for the event emitted  (#how-to-find-the-topic0-and-filter-for-the-event-emitted) How to find the input and filter for the function called  (#how-to-find-the-input-and-filter-for-the-function-called)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/evm-decoding-functions#tips"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functions and Operators HyperLogLog functions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators HyperLogLog functions Trino implements the  approx_distinct  (/query-engine/Functions-and-operators/aggregate#approximate-aggregate-functions)  function using the  HyperLogLog  (https://en.wikipedia.org/wiki/HyperLogLog)  data structure. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/hyperloglog"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functions and Operators SS58 functions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators SS58 functions ss58 or substrate58 is an address encoding scheme that is commonly used in substrate-based chains. It is similar to  Base58  (/query-engine/Functions-and-operators/base58)  encoding format, with some modifications. \n Under basic ss58 encoding format an address can be encoded as: \n base58encode ( concat ( <address-type>, <address>, <checksum> ) ) \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/ss58"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Executions and Results Get Latest Query Result Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Overview  (/api-reference/executions/execution-object) POST Execute Query  (/api-reference/executions/endpoint/execute-query) POST Cancel Execution  (/api-reference/executions/endpoint/cancel-execution) GET Get Execution Status  (/api-reference/executions/endpoint/get-execution-status) GET Get Execution Result  (/api-reference/executions/endpoint/get-execution-result) GET Get Execution Result in CSV  (/api-reference/executions/endpoint/get-execution-result-csv) GET Get Latest Query Result  (/api-reference/executions/endpoint/get-query-result) GET Get Latest Query Result in CSV  (/api-reference/executions/endpoint/get-query-result-csv) Queries Materialized Views Webhooks Data Management Endpoints Tables Preset Endpoints DEX EigenLayer EVM Contracts Farcaster Markets Projects Executions and Results Get Latest Query Result Given a query ID, returns the latest executed result of a query on Dune in JSON format GET / v1 / query / {query_id} / results Try it You must pass parameter query_id. \n Returns the latest execution id and results (in JSON) of that latest run, regardless of the job id/run or if it is run in the app or the api. \n The query specified must either be public or a query you have ownership of (you or a team you belong to have ownership). \n \n This endpoint does NOT trigger an execution but does  consume credits through datapoints  (https://dune.com/pricing) . \n Read more on  Filtering  (../filtering) ,  Sorting  (../sorting) , and  Sampling  (../sampling)  to learn more about flexibly grabbing query results. \n Read more on  Pagination  (../pagination)  to get the most out of the API and handle large results. \n \n \n Dune internally has a maximum query result size limit (which currently is 8GB, but subject to increase in the future). If your query yields more than 8GB of data, the result will be truncated in storage. In such cases, pulling the result data (using pagination) but without specifying  allow_partial_results  set to true will trigger an error message: \u201cerror\u201d: \u201cPartial Result, please request with \u2018allows_partial_results=true\u2019\u201d. If you wish to retrieve partial results, you can pass the parameter  allow_partial_results=true . But please make sure you indeed want to fetch the truncated result. \n \n Execute query and get result in one call  If you are using the  Python SDK  (https://github.com/duneanalytics/dune-client/tree/d2195b2a9577e2dcae5d2600cb3eddce20987f38) , you can directly executes and fetches result in one function call, like below:  Python SDK \n import  dotenv ,  os ,  json \n from  dune_client . types  import  QueryParameter \n from  dune_client . client  import  DuneClient \n from  dune_client . query  import  QueryBase \n \n # change the current working directory where .env file lives \n os . chdir ( \"/Users/abc/local-Workspace/python-notebook-examples\" ) \n # load .env file \n dotenv . load_dotenv ( \".env\" ) \n # setup Dune Python client \n dune  =  DuneClient . from_env ( ) \n \n Use  run_query  to get result in JSON,\n run_query_csv  to get result in CSV format,\nand  run_query_dataframe  to get result in Pandas dataframe \n result = dune.run_query( \n     query=query # pass in query to run  \n     , performance = 'large' # optionally define which tier to run the execution on (default is \"medium\") \n     ) \n \n \n Headers \u200b  (#parameter-x-dune-api-key) X-Dune-Api-Key string required API Key for the service Path Parameters \u200b  (#parameter-query-id) query_id string required Query ID Query Parameters \u200b  (#parameter-api-key) api_key string Alternative to using the X-Dune-Api-Key header \u200b  (#parameter-allow-partial-results) allow_partial_results boolean This enables returning a query result that was too large and only a partial result is\navailable. By default allow_partial_results is set to false and a failed state is returned. \u200b  (#parameter-columns) columns string Specifies a comma-separated list of column names to return. If omitted, all columns are included.\nTip: use this to limit the result to specific columns, reducing datapoints cost of the call. \u200b  (#parameter-filters) filters string Expression to filter out rows from the results to return. This expression is similar to\na SQL WHERE clause. More details about it in the Filtering section of the doc.\nThis parameter is incompatible with sample_count. \u200b  (#parameter-ignore-max-datapoints-per-request) ignore_max_datapoints_per_request boolean There is a default 250,000 datapoints limit to make sure you don't accidentally spend all\nyour credits in one call. To ignore the max limit, you can add\nignore_max_datapoints_per_request=true \u200b  (#parameter-limit) limit integer Limit number of rows to return. This together with 'offset' allows easy pagination through\nresults in an incremental and efficient way. This parameter is incompatible\nwith sampling (sample_count). \u200b  (#parameter-offset) offset integer Offset row number to start (inclusive, first row means offset=0) returning results\nfrom. This together with 'limit' allows easy pagination through results in an\nincremental and efficient way. This parameter is incompatible with sampling (sample_count). \u200b  (#parameter-query-id) queryID integer required \u200b  (#parameter-sample-count) sample_count integer Number of rows to return from the result by sampling the data. This is useful when you\nwant to get a uniform sample instead of the entire result. If the result has less\nthan the sample count, the entire result is returned. Note that this will return a\nrandomized sample, so not every call will return the same result. This parameter is\nincompatible with  offset ,  limit , and  filters  parameters. \u200b  (#parameter-sort-by) sort_by string Expression to define the order in which the results should be returned. This expression\nis similar to a SQL ORDER BY clause. More details about it in the Sorting section of the doc. Response 200 - application/json \u200b  (#response-cancelled-at) cancelled_at string Timestamp of when the query execution was cancelled, if applicable. \u200b  (#response-execution-ended-at) execution_ended_at string Timestamp of when the query execution ended. \u200b  (#response-execution-id) execution_id string Unique identifier for the execution of the query. \u200b  (#response-execution-started-at) execution_started_at string Timestamp of when the query execution started. \u200b  (#response-expires-at) expires_at string Timestamp of when the query result expires. \u200b  (#response-is-execution-finished) is_execution_finished boolean Whether the state of the query execution is terminal. This can be used for polling purposes. \u200b  (#response-next-offset) next_offset integer Offset that can be used to retrieve the next page of results. \u200b  (#response-next-uri) next_uri string URI that can be used to fetch the next page of results. \u200b  (#response-query-id) query_id integer Unique identifier of the query. \u200b  (#response-result) result object The object containing the results and metadata of the query execution Show   child attributes \u200b  (#response-result-metadata) result. metadata object Metadata about the execution of the query, including details like column names,\nrow counts, and execution times. Show   child attributes \u200b  (#response-result-metadata-column-names) result.metadata. column_names string[] Names of the columns in the result set. \u200b  (#response-result-metadata-column-types) result.metadata. column_types string[] Types of the columns in the result set. \u200b  (#response-result-metadata-datapoint-count) result.metadata. datapoint_count integer Results cell count is used for billing/pricing plans\nhere we expose the these values to the user, so that they can track their costs \u200b  (#response-result-metadata-execution-time-millis) result.metadata. execution_time_millis integer Time in milliseconds that the query took to execute. \u200b  (#response-result-metadata-pending-time-millis) result.metadata. pending_time_millis integer Time in milliseconds that the query was pending before execution. \u200b  (#response-result-metadata-result-set-bytes) result.metadata. result_set_bytes integer ResultSetBytes represents the raw data bytes returned by the SQL execution engine, it includes: \n \n total nr of bytes used on 1 line with all the column names (the header of the result set) \n total nr of bytes for all the row values (the result set of rows) \n \n it doesn't include overheads such as the presence of column names for every row in the JSON result type.\nit also doesn't include opmitizations such as compression \u200b  (#response-result-metadata-row-count) result.metadata. row_count integer Number of rows in the result set for the current page of results. \u200b  (#response-result-metadata-total-result-set-bytes) result.metadata. total_result_set_bytes integer Total number of bytes in the result set. This doesn't include the json representation overhead. \u200b  (#response-result-metadata-total-row-count) result.metadata. total_row_count integer Number of rows in the result set for the entire result set. \u200b  (#response-result-rows) result. rows object[] A list of rows. A row is dictionary of key-value pairs returned by the query,\neach pair corresponding to a column Show   child attributes \u200b  (#response-result-rows-key) result.rows. {key} object \u200b  (#response-state) state string The state of the query execution. \u200b  (#response-submitted-at) submitted_at string Timestamp of when the query was submitted. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/executions/endpoint/get-query-result) Get Execution Result in CSV  (/api-reference/executions/endpoint/get-execution-result-csv) Get Latest Query Result in CSV  (/api-reference/executions/endpoint/get-query-result-csv) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/api-reference/executions/endpoint/get-query-result"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) DuneSQL Datatypes DuneSQL has a set of built-in data types, described below. \n Implicit Conversion and Casting to other datatypes is described in  the conversion function documentation  (/query-engine/Functions-and-operators/conversion) . \n ", "url": "https://docs.dune.com/query-engine/datatypes"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functions and Operators Machine learning functions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators Machine learning functions The machine learning plugin provides machine learning functionality as\nan aggregation function. It enables you to train Support Vector Machine\n(SVM) based classifiers and regressors for the supervised learning\nproblems. \n Note: The machine learning functions are not optimized for distributed\nprocessing. The capability to train large data sets is limited by this\nexecution of the final training on a single instance. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/ml"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functions and Operators LiveFetch functions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators LiveFetch functions LiveFetch functions send HTTP requests to a specified URL. The LiveFetch functions send HTTP requests to a specified URL.\nUsing the LiveFetch functions, you can interact with HTTP servers directly in SQL queries.\nThey allow to fetch data from external APIs, as well as invoke remote procedure calls. \n With the LiveFetch functions we can e.g. pull in a list of coins from coingecko: \n SELECT   *   FROM  UNNEST ( \n     CAST ( json_parse ( \n         http_get ( 'https://api.coingecko.com/api/v3/coins/list' ) ) \n      AS  array ( json ) ) )  t ( coin_data ) \n \n \n Example Dashboard A dashboard with examples of LiveFetch functions.  (https://dune.com/dune/dunesql-live-fetch-functions) \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/live-fetch"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Dune Echo Proxy Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune Echo Overview  (/echo/overview) EVM SVM React Hooks  (/echo/hooks) Proxy  (/echo/proxy) Dune Echo Proxy Echo can be used either on the backend or directly from the frontend. If integrating Echo from the frontend, you might want to consider using a Proxy to protect your API key. \n We\u2019ve created this repository that trivially deploys to Cloudflare Workers to help you get started:  https://github.com/duneanalytics/echo-proxy  (https://github.com/duneanalytics/echo-proxy) \n Cloudflare Workers is a serverless platform that allows you to deploy your code to a global network of data centers, and is perfect for this use case. It offers 100k invocations per day for free. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /echo/proxy) React Hooks  (/echo/hooks) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/echo/proxy"}
{"content": "\u200b Data structures \n Trino implements HyperLogLog data sketches as a set of 32-bit buckets\nwhich store a  maximum hash . They can be stored sparsely (as a map from\nbucket ID to bucket), or densely (as a contiguous memory block). The\nHyperLogLog data structure starts as the sparse representation,\nswitching to dense when it is more efficient. The P4HyperLogLog\nstructure is initialized densely and remains dense for its lifetime. \n hyperloglog_type  implicitly casts to\n p4hyperloglog_type , while one can\nexplicitly cast  HyperLogLog  to  P4HyperLogLog : \n     cast(hll AS P4HyperLogLog) \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/hyperloglog#data-structures"}
{"content": "\u200b Serialization \n Data sketches can be serialized to and deserialized from  varbinary .\nThis allows them to be stored for later use. Combined with the ability\nto merge multiple sketches, this allows one to calculate\n approx_distinct  of the elements of a partition of a query, then for the entirety of a query with very little\ncost. \n For example, calculating the  HyperLogLog  for daily unique users will\nallow weekly or monthly unique users to be calculated incrementally by\ncombining the dailies. This is similar to computing weekly revenue by\nsumming daily revenue. Uses of  approx_distinct  with  GROUPING SETS  can be converted to use  HyperLogLog . \n Examples: \n    CREATE   TABLE  visit_summaries  (    \n     visit_date  date , \n     hll  varbinary \n    ) \n    INSERT   INTO  visit_summaries \n    SELECT  visit_date ,  cast ( approx_set ( user_id )   AS   varbinary ) \n    FROM  user_visits \n    GROUP   BY  visit_date ; \n \n    SELECT  cardinality ( merge ( cast ( hll  AS  HyperLogLog ) ) )   AS  weekly_unique_users \n    FROM  visit_summaries \n    WHERE  visit_date  >=   current_date   -   interval   '7'   day ; \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/hyperloglog#serialization"}
{"content": "\u200b Functions \n \u200b  (#approx-set) approx_set() \n approx_set(x)  \u2192 HyperLogLog \n Returns the  HyperLogLog  sketch of the input data set of  x . This data\nsketch underlies  approx_distinct  and can be stored and used later by calling  cardinality() . \n \u200b  (#cardinality) cardinality() \n cardinality(hll)  \u2192 bigint \n This will perform  approx_distinct  on\nthe data summarized by the  hll  HyperLogLog data sketch. \n \u200b  (#empty-hll) empty_hll() \n empty_hll()  \u2192 HyperLogLog \n Returns an empty  HyperLogLog . \n \u200b  (#merge) merge() \n merge(hyperloglog)  \u2192 HyperLogLog\nReturns the  HyperLogLog  of the aggregate union of the individual  hll \nHyperLogLog structures. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/hyperloglog) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) JSON functions  (/query-engine/Functions-and-operators/json) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Data structures  (#data-structures) Serialization  (#serialization) Functions  (#functions) approx_set()  (#approx-set) cardinality()  (#cardinality) empty_hll()  (#empty-hll) merge()  (#merge)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/hyperloglog#functions"}
{"content": "\u200b Functions \n \u200b  (#from-ss58) from_ss58() \n from_ss58(varchar)  \u2192  varbinary \n Converts an ss58-encoded string to the corresponding  VARBINARY  address. \n SELECT   \n     from_ss58 ( '1qnJN7FViy3HZaxZK9tGAA71zxHSBeUweirKqCaox4t8GT7' ) \n -- results in VARBINARY 0x2534454d30f8a028e42654d6b535e0651d1d026ddf115cef59ae1dd71bae074e \n \n \u200b  (#to-ss58) to_ss58() \n to_ss58(varbinary, int)  \u2192  varchar \n Encodes an address of a specific network type into its ss58  VARCHAR  representation. For example: \n \n Polkadot  has address type 0 \n Kusama  has address type 2 \n Generic Substrate  has address type 42 \n \n SELECT   \n     to_ss58 ( '0x2534454d30f8a028e42654d6b535e0651d1d026ddf115cef59ae1dd71bae074e' ,   2 ) \n -- results 'DR6pMC4GJiVbgPtNNuw1xgxJyEsYYuXKXq7ZCVBjfFrh3V5' \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/ss58) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) TON address functions  (/query-engine/Functions-and-operators/tonaddress) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Functions  (#functions) from_ss58()  (#from-ss58) to_ss58()  (#to-ss58)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/ss58#functions"}
{"content": "\u200b Boolean \n ", "url": "https://docs.dune.com/query-engine/datatypes#boolean"}
{"content": "\u200b BOOLEAN \n This type captures boolean values  true  and  false . \n ", "url": "https://docs.dune.com/query-engine/datatypes#boolean-2"}
{"content": "\u200b Binary \n ", "url": "https://docs.dune.com/query-engine/datatypes#binary"}
{"content": "\u200b VARBINARY \n Variable length binary data. In Dune, we store addresses, hashes, calldata and logs as  varbinary  data types. \n SQL statements support usage of binary data with the prefix  0x . The\nbinary data has to use hexadecimal format. For example, the binary form\nof  eh?  is  X'65683F' . \n We have built custom functions to make it easier to work with varbinaries in DuneSQL. Check the  varbinary functions  (/query-engine/Functions-and-operators/varbinary)  page for more information. \n ", "url": "https://docs.dune.com/query-engine/datatypes#varbinary"}
{"content": "\u200b Integer \n ", "url": "https://docs.dune.com/query-engine/datatypes#integer"}
{"content": "\u200b TINYINT \n A 8-bit signed two\u2019s complement integer with a minimum value of  -2^7 \nand a maximum value of  2^7 - 1 . \n ", "url": "https://docs.dune.com/query-engine/datatypes#tinyint"}
{"content": "\u200b SMALLINT \n A 16-bit signed two\u2019s complement integer with a minimum value of\n -2^15  and a maximum value of  2^15 - 1 . \n ", "url": "https://docs.dune.com/query-engine/datatypes#smallint"}
{"content": "\u200b INTEGER \n A 32-bit signed two\u2019s complement integer with a minimum value of\n -2^31  and a maximum value of  2^31 - 1 . The name  INT  is also\navailable for this type. \n ", "url": "https://docs.dune.com/query-engine/datatypes#integer-2"}
{"content": "\u200b BIGINT \n A 64-bit signed two\u2019s complement integer with a minimum value of\n -2^63  and a maximum value of  2^63 - 1 . \n ", "url": "https://docs.dune.com/query-engine/datatypes#bigint"}
{"content": "\u200b UINT256  (Dune SQL) \n A 256-bit unsigned integer with a minimum value of 0 and a maximum value of 2^256 - 1. This data type can represent only non-negative integers, including very large positive integers, as well as zero. Since there is no sign bit, all 256 bits can be used to represent the magnitude of the number. This data type is commonly used in EVM smart contracts to represent balances and other quantities. \n ", "url": "https://docs.dune.com/query-engine/datatypes#uint256-dune-sql"}
{"content": "\u200b INT256  (Dune SQL) \n A 256-bit signed two\u2019s complement integer with a minimum value of -2^255 and a maximum value of 2^255 - 1. This data type can represent a wide range of values, including very large negative and positive integers, as well as zero. \n This data type is commonly used in EVM smart contracts to represent balances and other quantities, more specifically when the value can be negative. \n ", "url": "https://docs.dune.com/query-engine/datatypes#int256-dune-sql"}
{"content": "\u200b Floating-point \n ", "url": "https://docs.dune.com/query-engine/datatypes#floating-point"}
{"content": "\u200b REAL \n A real is a 32-bit inexact, variable-precision implementing the IEEE\nStandard 754 for Binary Floating-Point Arithmetic. \n Example literals:  REAL '10.3' ,  REAL '10.3e0' ,  REAL '1.03e1' \n ", "url": "https://docs.dune.com/query-engine/datatypes#real"}
{"content": "\u200b DOUBLE \n A double is a 64-bit inexact, variable-precision implementing the IEEE\nStandard 754 for Binary Floating-Point Arithmetic. \n Example literals:  DOUBLE '10.3' ,  DOUBLE '1.03e1' ,  10.3e0 ,  1.03e1 \n ", "url": "https://docs.dune.com/query-engine/datatypes#double"}
{"content": "\u200b Fixed-precision \n ", "url": "https://docs.dune.com/query-engine/datatypes#fixed-precision"}
{"content": "\u200b DECIMAL \n A fixed precision decimal number. Precision up to 38 digits is supported\nbut performance is best up to 18 digits. \n The decimal type takes two literal parameters: \n \n precision  - total number of digits \n scale  - number of digits in fractional part. Scale is optional\nand defaults to 0. \n \n Example type definitions:  DECIMAL(10,3) ,  DECIMAL(20) \n Example literals:  DECIMAL '10.3' ,  DECIMAL '1234567890' ,  1.1 \n ", "url": "https://docs.dune.com/query-engine/datatypes#decimal"}
{"content": "\u200b String \n ", "url": "https://docs.dune.com/query-engine/datatypes#string"}
{"content": "\u200b VARCHAR \n Variable length character data with an optional maximum length. \n Example type definitions:  varchar ,  varchar(20) \n SQL statements support simple literal, as well as Unicode usage: \n \n literal string :  'Hello winter !' \n Unicode string with default escape character:\n U&'Hello winter \\2603 !' \n Unicode string with custom escape character:\n U&'Hello winter #2603 !' UESCAPE '#' \n \n A Unicode string is prefixed with  U&  and requires an escape character\nbefore any Unicode character usage with 4 digits. In the examples above\n \\2603  and  #2603  represent a snowman character. Long Unicode codes\nwith 6 digits require usage of the plus symbol before the code. For\nexample, you need to use  \\+01F600  for a grinning face emoji. \n ", "url": "https://docs.dune.com/query-engine/datatypes#varchar"}
{"content": "\u200b CHAR \n Fixed length character data. A  CHAR  type without length specified has\na default length of 1. A  CHAR(x)  value always has  x  characters. For\nexample, casting  dog  to  CHAR(7)  adds 4 implicit trailing spaces.\nLeading and trailing spaces are included in comparisons of  CHAR \nvalues. As a result, two character values with different lengths\n( CHAR(x)  and  CHAR(y)  where  x != y ) will never be equal. \n Example type definitions:  char ,  char(20) \n      Select   *   from  ethereum . transactions   where   \"from\"   =   0xc8ebccc5f5689fa8659d83713341e5ad19349448 \n \n ", "url": "https://docs.dune.com/query-engine/datatypes#char"}
{"content": "\u200b JSON \n JSON value type, which can be a JSON object, a JSON array, a JSON\nnumber, a JSON string,  true ,  false  or  null . \n ", "url": "https://docs.dune.com/query-engine/datatypes#json"}
{"content": "\u200b Date and time \n See also  date and time functions  (/query-engine/Functions-and-operators/datetime) . \n ", "url": "https://docs.dune.com/query-engine/datatypes#date-and-time"}
{"content": "\u200b DATE \n Calendar date (year, month, day). \n Example:  DATE '2001-08-22' \n ", "url": "https://docs.dune.com/query-engine/datatypes#date"}
{"content": "\u200b TIME \n TIME  is an alias for  TIME(3)  (millisecond precision). \n ", "url": "https://docs.dune.com/query-engine/datatypes#time"}
{"content": "\u200b TIME(P) \n Time of day (hour, minute, second) without a time zone with  P  digits\nof precision for the fraction of seconds. A precision of up to 12\n(picoseconds) is supported. \n Example:  TIME '01:02:03.456' \n ", "url": "https://docs.dune.com/query-engine/datatypes#time-p"}
{"content": "\u200b TIME WITH TIME ZONE \n Time of day (hour, minute, second, millisecond) with a time zone. Values\nof this type are rendered using the time zone from the value. Time zones\nare expressed as the numeric UTC offset value: \n      SELECT   TIME   '01:02:03.456 -08:00' ; \n      -- 1:02:03.456-08:00 \n \n ", "url": "https://docs.dune.com/query-engine/datatypes#time-with-time-zone"}
{"content": "\u200b TIMESTAMP \n TIMESTAMP  is an alias for  TIMESTAMP(3)  (millisecond precision). \n ", "url": "https://docs.dune.com/query-engine/datatypes#timestamp"}
{"content": "\u200b TIMESTAMP(P) \n Calendar date and time of day without a time zone with  P  digits of\nprecision for the fraction of seconds. A precision of up to 12\n(picoseconds) is supported. This type is effectively a combination of\nthe  DATE  and  TIME(P)  types. \n TIMESTAMP(P) WITHOUT TIME ZONE  is an equivalent name. \n Timestamp values can be constructed with the  TIMESTAMP  literal\nexpression. Alternatively, language constructs such as\n localtimestamp(p) , or a number of `date and time functions and\noperators can\nreturn timestamp values. \n Casting to lower precision causes the value to be rounded, and not\ntruncated. Casting to higher precision appends zeros for the additional\ndigits. \n The following examples illustrate the behavior: \n      SELECT   TIMESTAMP   '2020-06-10 15:55:23' ; \n      -- 2020-06-10 15:55:23 \n \n      SELECT   TIMESTAMP   '2020-06-10 15:55:23.383345' ; \n      -- 2020-06-10 15:55:23.383345 \n \n      SELECT  typeof ( TIMESTAMP   '2020-06-10 15:55:23.383345' ) ; \n      -- timestamp(6) \n \n      SELECT  cast ( TIMESTAMP   '2020-06-10 15:55:23.383345'   as   TIMESTAMP ( 1 ) ) ; \n       -- 2020-06-10 15:55:23.4 \n \n      SELECT  cast ( TIMESTAMP   '2020-06-10 15:55:23.383345'   as   TIMESTAMP ( 12 ) ) ; \n      -- 2020-06-10 15:55:23.383345000000 \n \n ", "url": "https://docs.dune.com/query-engine/datatypes#timestamp-p"}
{"content": "\u200b TIMESTAMP WITH TIME ZONE  {#timestamp-with-time-zone-data-type} \n TIMESTAMP WITH TIME ZONE  is an alias for  TIMESTAMP(3) WITH TIME ZONE \n(millisecond precision). \n ", "url": "https://docs.dune.com/query-engine/datatypes#timestamp-with-time-zone-timestamp-with-time-zone-data-type"}
{"content": "\u200b TIMESTAMP(P) WITH TIME ZONE \n Instant in time that includes the date and time of day with  P  digits\nof precision for the fraction of seconds and with a time zone. Values of\nthis type are rendered using the time zone from the value. Time zones\ncan be expressed in the following ways: \n \n UTC , with  GMT ,  Z , or  UT  usable as aliases for UTC. \n +hh:mm  or  -hh:mm  with  hh:mm  as an hour and minute offset from\nUTC. Can be written with or without  UTC ,  GMT , or  UT  as an\nalias for UTC. \n An  IANA time zone name  (https://www.iana.org/time-zones) . \n \n The following examples demonstrate some of these syntax options: \n      SELECT   TIMESTAMP   '2001-08-22 03:04:05.321 UTC' ; \n      -- 2001-08-22 03:04:05.321 UTC \n \n      SELECT   TIMESTAMP   '2001-08-22 03:04:05.321 -08:30' ; \n      -- 2001-08-22 03:04:05.321 -08:30 \n \n      SELECT   TIMESTAMP   '2001-08-22 03:04:05.321 GMT-08:30' ; \n      -- 2001-08-22 03:04:05.321 -08:30 \n \n      SELECT   TIMESTAMP   '2001-08-22 03:04:05.321 America/New_York' ; \n      -- 2001-08-22 03:04:05.321 America/New_York \n \n ", "url": "https://docs.dune.com/query-engine/datatypes#timestamp-p-with-time-zone"}
{"content": "\u200b INTERVAL YEAR TO MONTH \n Span of years and months. \n Example:  INTERVAL '3' MONTH \n ", "url": "https://docs.dune.com/query-engine/datatypes#interval-year-to-month"}
{"content": "\u200b INTERVAL DAY TO SECOND \n Span of days, hours, minutes, seconds and milliseconds. \n Example:  INTERVAL '2' DAY \n ", "url": "https://docs.dune.com/query-engine/datatypes#interval-day-to-second"}
{"content": "\u200b Structural \n ", "url": "https://docs.dune.com/query-engine/datatypes#structural"}
{"content": "\u200b ARRAY \n An array of the given component type. \n Example:  ARRAY[1, 2, 3] \n ", "url": "https://docs.dune.com/query-engine/datatypes#array"}
{"content": "\u200b MAP \n A map between the given component types. \n Example:  MAP(ARRAY['foo', 'bar'], ARRAY[1, 2]) \n ", "url": "https://docs.dune.com/query-engine/datatypes#map"}
{"content": "\u200b ROW \n A structure made up of fields that allows mixed types. The fields may be\nof any SQL type. \n By default, row fields are not named, but names can be assigned. \n Example:  CAST(ROW(1, 2e0) AS ROW(x BIGINT, y DOUBLE)) \n Named row fields are accessed with field reference operator ( . ). \n Example:  CAST(ROW(1, 2.0) AS ROW(x BIGINT, y DOUBLE)).x \n Named or unnamed row fields are accessed by position with the subscript\noperator ( [] ). The position starts at  1  and must be a constant. \n Example:  ROW(1, 2.0)[1] \n ", "url": "https://docs.dune.com/query-engine/datatypes#row"}
{"content": "\u200b Network address \n ", "url": "https://docs.dune.com/query-engine/datatypes#network-address"}
{"content": "\u200b IPADDRESS \n An IP address that can represent either an IPv4 or IPv6 address.\nInternally, the type is a pure IPv6 address. Support for IPv4 is handled\nusing the  IPv4-mapped IPv6 address  range\n( 4291#section-2.5.5.2 ). When creating an\n IPADDRESS , IPv4 addresses will be mapped into that range. When\nformatting an  IPADDRESS , any address within the mapped range will be\nformatted as an IPv4 address. Other addresses will be formatted as IPv6\nusing the canonical format defined in  5952 . \n Examples:  IPADDRESS '10.0.0.1' ,  IPADDRESS '2001:db8::1' \n ", "url": "https://docs.dune.com/query-engine/datatypes#ipaddress"}
{"content": "\u200b UUID \n ", "url": "https://docs.dune.com/query-engine/datatypes#uuid"}
{"content": "\u200b UUID \n This type represents a UUID (Universally Unique IDentifier), also known\nas a GUID (Globally Unique IDentifier), using the format defined in\n 4122 \\ \n Example:  UUID '12151fd2-7586-11e9-8f9e-2a86e4085a59' \n ", "url": "https://docs.dune.com/query-engine/datatypes#uuid-2"}
{"content": "\u200b HyperLogLog \n Calculating the approximate distinct count can be done much more cheaply\nthan an exact count using the\n HyperLogLog  (https://en.wikipedia.org/wiki/HyperLogLog)  data sketch. \n ", "url": "https://docs.dune.com/query-engine/datatypes#hyperloglog"}
{"content": "\u200b HyperLogLog \n A HyperLogLog sketch allows efficient computation of  approx_distinct . It starts as a sparse\nrepresentation, switching to a dense representation when it becomes more\nefficient. \n ", "url": "https://docs.dune.com/query-engine/datatypes#hyperloglog-2"}
{"content": "\u200b P4HyperLogLog \n A P4HyperLogLog sketch is similar to  hyperloglog_type , but it starts (and remains) in the dense representation. \n ", "url": "https://docs.dune.com/query-engine/datatypes#p4hyperloglog"}
{"content": "\u200b SetDigest \n ", "url": "https://docs.dune.com/query-engine/datatypes#setdigest"}
{"content": "\u200b SetDigest \n A SetDigest (setdigest) is a data sketch structure used in calculating\n Jaccard similarity\ncoefficient  (https://en.wikipedia.org/wiki/Jaccard_index)  between two\nsets. \n SetDigest encapsulates the following components: \n \n HyperLogLog  (https://en.wikipedia.org/wiki/HyperLogLog) \n MinHash with a single hash\nfunction  (http://en.wikipedia.org/wiki/MinHash#Variant_with_a_single_hash_function) \n \n The HyperLogLog structure is used for the approximation of the distinct\nelements in the original set. \n The MinHash structure is used to store a low memory footprint signature\nof the original set. The similarity of any two sets is estimated by\ncomparing their signatures. \n SetDigests are additive, meaning they can be merged together. \n ", "url": "https://docs.dune.com/query-engine/datatypes#setdigest-2"}
{"content": "\u200b Quantile digest \n ", "url": "https://docs.dune.com/query-engine/datatypes#quantile-digest"}
{"content": "\u200b QDigest \n A quantile digest (qdigest) is a summary structure which captures the\napproximate distribution of data for a given input set, and can be\nqueried to retrieve approximate quantile values from the distribution.\nThe level of accuracy for a qdigest is tunable, allowing for more\nprecise results at the expense of space. \n A qdigest can be used to give approximate answer to queries asking for\nwhat value belongs at a certain quantile. A useful property of qdigests\nis that they are additive, meaning they can be merged together without\nlosing precision. \n A qdigest may be helpful whenever the partial results of\n approx_percentile  can be reused. For example, one may be interested in\na daily reading of the 99th percentile values that are read over the\ncourse of a week. Instead of calculating the past week of data with\n approx_percentile ,  qdigest s could be stored daily, and quickly\nmerged to retrieve the 99th percentile value. \n ", "url": "https://docs.dune.com/query-engine/datatypes#qdigest"}
{"content": "\u200b T-Digest \n ", "url": "https://docs.dune.com/query-engine/datatypes#t-digest"}
{"content": "\u200b TDigest \n A T-digest (tdigest) is a summary structure which, similarly to qdigest,\ncaptures the approximate distribution of data for a given input set. It\ncan be queried to retrieve approximate quantile values from the\ndistribution. \n TDigest has the following advantages compared to QDigest: \n \n higher performance \n lower memory usage \n higher accuracy at high and low percentiles \n \n T-digests are additive, meaning they can be merged together. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/datatypes) Writing Efficient Queries  (/query-engine/writing-efficient-queries) Reserved keywords  (/query-engine/reserved-keywords) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Boolean  (#boolean) BOOLEAN  (#boolean-2) Binary  (#binary) VARBINARY  (#varbinary) Integer  (#integer) TINYINT  (#tinyint) SMALLINT  (#smallint) INTEGER  (#integer-2) BIGINT  (#bigint) UINT256 (Dune SQL)  (#uint256-dune-sql) INT256 (Dune SQL)  (#int256-dune-sql) Floating-point  (#floating-point) REAL  (#real) DOUBLE  (#double) Fixed-precision  (#fixed-precision) DECIMAL  (#decimal) String  (#string) VARCHAR  (#varchar) CHAR  (#char) JSON  (#json) Date and time  (#date-and-time) DATE  (#date) TIME  (#time) TIME(P)  (#time-p) TIME WITH TIME ZONE  (#time-with-time-zone) TIMESTAMP  (#timestamp) TIMESTAMP(P)  (#timestamp-p) TIMESTAMP WITH TIME ZONE {#timestamp-with-time-zone-data-type}  (#timestamp-with-time-zone-timestamp-with-time-zone-data-type) TIMESTAMP(P) WITH TIME ZONE  (#timestamp-p-with-time-zone) INTERVAL YEAR TO MONTH  (#interval-year-to-month) INTERVAL DAY TO SECOND  (#interval-day-to-second) Structural  (#structural) ARRAY  (#array) MAP  (#map) ROW  (#row) Network address  (#network-address) IPADDRESS  (#ipaddress) UUID  (#uuid) UUID  (#uuid-2) HyperLogLog  (#hyperloglog) HyperLogLog  (#hyperloglog-2) P4HyperLogLog  (#p4hyperloglog) SetDigest  (#setdigest) SetDigest  (#setdigest-2) Quantile digest  (#quantile-digest) QDigest  (#qdigest) T-Digest  (#t-digest) TDigest  (#tdigest)", "url": "https://docs.dune.com/query-engine/datatypes#tdigest"}
{"content": "\u200b Feature vector \n To solve a problem with the machine learning technique, especially as a\nsupervised learning problem, it is necessary to represent the data set\nwith the sequence of pairs of labels and feature vector. A label is a\ntarget value you want to predict from the unseen feature and a feature\nis a A N-dimensional vector whose elements are numerical values. In\nTrino, a feature vector is represented as a map-type value, whose key is\nan index of each feature, so that it can express a sparse vector. Since\nclassifiers and regressors can recognize the map-type feature vector,\nthere is a function to construct the feature from the existing numerical\nvalues,  features : \n SELECT  features ( 1.0 ,   2.0 ,   3.0 )   AS  features ; \n \n Result: \n Features {0=1.0, 1=2.0, 2=3.0} \n The output from  features  can be directly passed to ML functions. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/ml#feature-vector"}
{"content": "\u200b Classification \n Classification is a type of supervised learning problem to predict the\ndistinct label from the given feature vector. The interface looks\nsimilar to the construction of the SVM model from the sequence of pairs\nof labels and features implemented in Teradata Aster or  BigQuery\nML  (https://cloud.google.com/bigquery/docs/bqml-introduction) . The\nfunction to train a classification model looks like as follows: \n      SELECT \n       learn_classifier ( \n         species , \n         features ( sepal_length ,  sepal_width ,  petal_length ,  petal_width ) \n        )   AS  model \n      FROM \n       iris \n \n It returns the trained model in a serialized format. \n model \n ------------------------------------------------- \n 3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63 \n 68 61 72 29 3e \n \n classify  returns the predicted label by using the trained model. The trained model can not be saved natively,\nand needs to be passed in the format of a nested query: \n      SELECT \n       classify ( features ( 5.9 ,   3 ,   5.1 ,   1.8 ) ,  model )   AS  predicted_label \n      FROM   ( \n        SELECT \n         learn_classifier ( species ,  features ( sepal_length ,  sepal_width ,  petal_length ,  petal_width ) )   AS  model \n        FROM \n         iris \n      )  t \n \n predicted_label \n ----------------- \n Iris-virginica \n \n As a result you need to run the training process at the same time when\npredicting values. Internally, the model is trained by\n libsvm  (https://www.csie.ntu.edu.tw/~cjlin/libsvm/) . You can use\n learn_libsvm_classifier  to control the\ninternal parameters of the model. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/ml#classification"}
{"content": "\u200b Regression \n Regression is another type of supervised learning problem, predicting\ncontinuous value, unlike the classification problem. The target must be\nnumerical values that can be described as  double . \n The following code shows the creation of the model predicting\n sepal_length  from the other 3 features: \n      SELECT \n       learn_regressor ( sepal_length ,  features ( sepal_width ,  petal_length ,  petal_width ) )   AS  model \n      FROM \n       iris \n \n The way to use the model is similar to the classification case: \n      SELECT \n       regress ( features ( 3 ,   5.1 ,   1.8 ) ,  model )   AS  predicted_target \n      FROM   ( \n        SELECT \n         learn_regressor ( sepal_length ,  features ( sepal_width ,  petal_length ,  petal_width ) )   AS  model \n        FROM  iris \n      )  t ; \n \n predicted_target \n ------------------- \n 6.407376822560477 \n \n Internally, the model is trained by\n libsvm  (https://www.csie.ntu.edu.tw/~cjlin/libsvm/) .\n learn_libsvm_regressor  provides you a\nway to control the training process. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/ml#regression"}
{"content": "\u200b Machine learning functions {#machine-learning-functions-1} \n \u200b  (#features) features() \n features(double, ...)  \u2192 map(bigint, double) \n Returns the map representing the feature vector. \n \u200b  (#learn-classifier) learn_classifier() \n learn_classifier(label, features)  \u2192 Classifier \n Returns an SVM-based classifier model, trained with the given label and\nfeature data sets. \n \u200b  (#learn-libsvm-classifier) learn_libsvm_classifier() \n learn_libsvm_classifier(label, features, params)  \u2192 Classifier \n Returns an SVM-based classifier model, trained with the given label and\nfeature data sets. You can control the training process by libsvm\nparameters. \n \u200b  (#classify) classify() \n classify(features, model)  \u2192 label \n Returns a label predicted by the given classifier SVM model. \n \u200b  (#learn-regressor) learn_regressor() \n learn_regressor(target, features)  \u2192 Regressor \n Returns an SVM-based regressor model, trained with the given target and\nfeature data sets. \n \u200b  (#learn-libsvm-regressor) learn_libsvm_regressor() \n learn_libsvm_regressor(target, features, params)  \u2192 Regressor \n Returns an SVM-based regressor model, trained with the given target and\nfeature data sets. You can control the training process by libsvm\nparameters. \n \u200b  (#regress) regress() \n regress(features, model)  \u2192 target \n Returns a predicted target value by the given regressor SVM model. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/ml) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Feature vector  (#feature-vector) Classification  (#classification) Regression  (#regression) Machine learning functions {#machine-learning-functions-1}  (#machine-learning-functions-machine-learning-functions-1) features()  (#features) learn_classifier()  (#learn-classifier) learn_libsvm_classifier()  (#learn-libsvm-classifier) classify()  (#classify) learn_regressor()  (#learn-regressor) learn_libsvm_regressor()  (#learn-libsvm-regressor) regress()  (#regress)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/ml#machine-learning-functions-machine-learning-functions-1"}
{"content": "\u200b API support and credentials \n There are no limits to the supported APIs. The URL can point to any public or private API. \n If you need to pass credentials for the API, you can include them in the headers.\nFor example, you can use the  Authorization  header to pass a token.\nIf you choose to hardcode the credentials in the query, please make sure to keep the query private.\nOptionally, you can use a query parameter as a placeholder: \n SELECT  http_get ( \n      'https://api.blastscan.io/api?module=block&action=getblocknobytime&timestamp=1711712564&closest=before&apikey={{api_key}}' \n ) ; \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/live-fetch#api-support-and-credentials"}
{"content": "\u200b Functions \n \u200b  (#http-get) http_get() \n http_get(url: varchar)  \u2192 varchar \n http_get(url: varchar, headers: array(varchar))  \u2192 varchar \n The function sends an HTTP GET request to the given URL, optionally including the provided headers,\nand returns the response body as  varchar . \n Often, the response is a JSON document. You can process it further with  JSON-processing SQL functions  (/query-engine/Functions-and-operators/json) .\nOther response formats, like html, are also supported. \n \u200b  (#http-post) http_post() \n http_post(url: varchar, body: varchar)  \u2192 varchar \n http_post(url: varchar, body: varchar, headers: array(varchar))  \u2192 varchar \n The function sends an HTTP POST request to the given URL, including the provided data in the request body,\nand optionally including the headers. It returns the response body as  varchar . \n The type of the body argument is  varchar . It gives you flexibility to send JSON data as well as text. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/live-fetch#functions"}
{"content": "\u200b Limits \n Call timeout:  A call issued by an HTTP function times out after 5 seconds. \n Throttling:  Requests from each query execution are limited to 50 requests per second per proxy.\nThere are currently 3 proxies configured per clusterset. The rate limit is shared between all HTTP function calls\nmade within the query. \n Response size limit:  Maximum accepted response body size is 2_097_152 bytes (2 MiB). \n Request size limit:  Maximum accepted request body size for  http_post()  is 1_000_000 bytes. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/live-fetch#limits"}
{"content": "\u200b Examples \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/live-fetch#examples"}
{"content": "\u200b Single HTTP GET request to list coins from CoinGecko \n SELECT  http_get ( 'https://api.coingecko.com/api/v3/coins/list' ) ; \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/live-fetch#single-http-get-request-to-list-coins-from-coingecko"}
{"content": "\u200b Multiple HTTP GET requests parametrized with Dune data \n SELECT \n     http_get ( concat ( 'https://coins.llama.fi/prices/current/ethereum:' ,  CAST ( contract_address  AS   varchar ) ) ) \n FROM  tokens_ethereum . stablecoins ; \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/live-fetch#multiple-http-get-requests-parametrized-with-dune-data"}
{"content": "\u200b JSON processing with http_get() \n SELECT \n     contract_address , \n     json_query ( \n         http_get ( concat ( 'https://coins.llama.fi/prices/current/ethereum:' ,  CAST ( contract_address  AS   varchar ) ) ) , \n          'lax $.coins.*?(@.decimals==18).keyvalue()?(@.name==\"symbol\" || @.name==\"price\" || @.name==\"decimals\").value' \n          WITH  ARRAY WRAPPER \n         EMPTY ARRAY  ON  EMPTY \n )   as  coin_data \n FROM  tokens_ethereum . stablecoins ; \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/live-fetch#json-processing-with-http-get"}
{"content": "\u200b Using http_get() in a subquery as a static filter \n By wrapping the  http_get()  function in a subquery, you can use it as a static filter in the main query.\nIt helps to avoid repeating the same HTTP request multiple times. \n SELECT   * \n FROM \n     ethereum . transactions  t1 , \n      ( SELECT  from_hex ( json_extract_scalar ( http_get ( 'https://api.ensideas.com/ens/resolve/vitalik.eth' ) , '$.address' ) ) )  t2 ( x ) \n WHERE  t1 . \"from\"   =  t2 . x ; \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/live-fetch#using-http-get-in-a-subquery-as-a-static-filter"}
{"content": "\u200b RPC call with http_post() \n SELECT  http_post ( \n \t\t 'https://docs-demo.quiknode.pro' , \n \t\t '{\"method\":\"eth_chainId\",\"params\":[],\"id\":1,\"jsonrpc\":\"2.0\"}' , \n \t\tARRAY [ 'Content-Type: application/json' ] ) ; \n \n If you want a more complex example,  see this post call to compound comet read functions here  (https://dune.com/queries/3571891) . \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/live-fetch#rpc-call-with-http-post"}
{"content": "\u200b Handling quotation marks \n If your payload contains the  '  character, you need to quote it properly because it is the bounding character of  varchar .\nEach  '  character should be doubled, and the query engine will unwrap them. \n SELECT  json_value ( \n \t        http_post ( \n \t\t\t     'https://httpbin.org/post' , \n \t\t\t\t 'foo' , \n \t\t\t\tARRAY [ 'MyHeader : Use two '' quotes' ] ) , \n \t\t\t 'lax $.headers.Myheader' ) ; \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/live-fetch) Lambda expressions  (/query-engine/Functions-and-operators/lambda) Logical operators  (/query-engine/Functions-and-operators/logical) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page API support and credentials  (#api-support-and-credentials) Functions  (#functions) http_get()  (#http-get) http_post()  (#http-post) Limits  (#limits) Examples  (#examples) Single HTTP GET request to list coins from CoinGecko  (#single-http-get-request-to-list-coins-from-coingecko) Multiple HTTP GET requests parametrized with Dune data  (#multiple-http-get-requests-parametrized-with-dune-data) JSON processing with http_get()  (#json-processing-with-http-get) Using http_get() in a subquery as a static filter  (#using-http-get-in-a-subquery-as-a-static-filter) RPC call with http_post()  (#rpc-call-with-http-post) Handling quotation marks  (#handling-quotation-marks)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/live-fetch#handling-quotation-marks"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Solana Solana Overview Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Overview  (/data-catalog/solana/overview) Account Activity  (/data-catalog/solana/account-activity) Blocks  (/data-catalog/solana/blocks) IDL Decoded Tables  (/data-catalog/solana/idl-tables) Instruction Calls  (/data-catalog/solana/instruction-calls) Rewards  (/data-catalog/solana/rewards) Transactions  (/data-catalog/solana/transactions) Vote Transactions  (/data-catalog/solana/vote-transactions) Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Solana Solana Overview Solana data on Dune Full Solana data guide   (https://read.cryptodatabytes.com/p/starter-guide-to-solana-data-analysis) \n Raw data tables are very useful for getting transactions, pre and post-balances, and instructions data. As a non-EVM chain, Solana Raw data looks quite different from other chains (largely due to its account structure). You can learn to get started with Solana analysis  in this guide  (https://web3datadegens.substack.com/p/starter-guide-to-solana-data-analysis) . \n However, queries that have been written using raw data tables are notoriously hard to understand and audit due to the nature of the encoded data commonly found in these tables. Furthermore, the raw data tables have a very large number of rows and hence can be slow to query. Most of the time you are better off working with  decoded data  (/data-catalog/solana/idl-tables)  from IDL decoding. \n Solana Account Activity Detailed account activity on Solana  (/data-catalog/solana/account-activity) Solana Blocks Block information and statistics on Solana  (/data-catalog/solana/blocks) Solana IDL Tables Interface description language (IDL) tables for Solana  (/data-catalog/solana/idl-tables) Solana Instruction Calls Solana instruction calls data  (/data-catalog/solana/instruction-calls) Solana Rewards Reward distributions on Solana  (/data-catalog/solana/rewards) Solana Transactions Transaction details on Solana  (/data-catalog/solana/transactions) Solana Vote Transactions Voting transactions within the Solana network  (/data-catalog/solana/vote-transactions) Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/solana/overview) Traces  (/data-catalog/substrate/traces) Account Activity  (/data-catalog/solana/account-activity) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/solana/overview"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Dune Index Transactions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Dune Index Transactions Understanding transactions as a foundational component of the Dune Index ", "url": "https://docs.dune.com/data-catalog/dune-index/transactions"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Base Base Overview Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Overview  (/data-catalog/evm/base/overview) Raw Decoded Curated Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Base Base Overview Base data on Dune Base is a secure, low-cost, builder-friendly Ethereum Layer 2 solution incubated by Coinbase. It is designed to onboard the next billion users to the blockchain, emphasizing ease of use and accessibility for a global audience. The platform aims for progressive decentralization over the years, underlining its commitment to an open, global cryptoeconomy. \n As an Ethereum L2, Base offers the security, stability, and scalability necessary to support your onchain applications. Developers can deploy any EVM-compatible codebase and smoothly transition users and assets from Ethereum L1, Coinbase, and other compatible chains. \n Big Features, Small Fees: \nBase provides an Ethereum Virtual Machine (EVM) environment at significantly lower costs. It introduces early access to new Ethereum features such as Account Abstraction (ERC4337), developer-friendly APIs for gasless transactions, and advanced smart contract wallets. \n Open Source Commitment: \nBuilt on the MIT-licensed OP Stack in collaboration with Optimism, Base contributes as the second Core Development team to ensure the OP Stack remains a public good accessible to all. \n Scaled by Coinbase: \nBase leverages Coinbase\u2019s robust infrastructure to offer decentralized apps enhanced product integration, straightforward fiat onramps, and access to a vast network of millions of verified users within the Coinbase ecosystem. \n Base documentation Explore comprehensive documentation on Base, detailing its architecture, protocol, and resources for developers.  (https://base.org/docs) \n ", "url": "https://docs.dune.com/data-catalog/evm/base/overview"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Polygon Polygon PoS Network Overview Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Overview  (/data-catalog/evm/polygon/overview) Raw Decoded Curated Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Polygon Polygon PoS Network Overview Polygon PoS Network data on Dune Polygon PoS is a proof-of-stake blockchain network that serves as a scaling solution for Ethereum. It combines the security and interoperability of Ethereum with the speed and efficiency of standalone networks, facilitating faster and cheaper transactions. Polygon PoS leverages a network of validators who stake their tokens to secure the network, participate in consensus, and manage governance. \n High Performance and Low Transaction Costs: \nPolygon PoS offers significant improvements in speed and transaction costs over Ethereum\u2019s mainnet by processing transactions on a sidechain before committing them to the Ethereum blockchain. This approach minimizes congestion and gas fees. \n Ethereum Compatibility: \nFully compatible with Ethereum, Polygon PoS enables developers to deploy existing Ethereum applications without significant changes, using familiar tools and frameworks. \n Decentralized and Secure: \nThe proof-of-stake model ensures that the network remains decentralized and secure, with validators and delegators actively participating in the consensus and governance processes. \n Polygon PoS documentation Comprehensive documentation on the Polygon PoS network, including guides on its architecture, staking mechanisms, and development resources.  (https://docs.polygon.technology/docs/home) \n ", "url": "https://docs.dune.com/data-catalog/evm/polygon/overview"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Bitcoin Bitcoin data Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin Overview  (/data-catalog/bitcoin/overview) Blocks  (/data-catalog/bitcoin/blocks) Inputs  (/data-catalog/bitcoin/inputs) Outputs  (/data-catalog/bitcoin/outputs) Transactions  (/data-catalog/bitcoin/transactions) NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Bitcoin Bitcoin data Bitcoin is the first and most well-known blockchain. a full guide on all Bitcoin concepts  (https://web3datadegens.substack.com/p/how-to-analyze-bitcoin-data-with) \n Bitcoin uses a UTXO transaction model, and has a heavy focus on signatures and scripts for \u201clocking\u201d and \u201cunlocking\u201d tokens. They are also most well known for being tied to a 21 million token supply, and halvenings. \n ", "url": "https://docs.dune.com/data-catalog/bitcoin/overview"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Ethereum Ethereum Overview Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Overview  (/data-catalog/evm/ethereum/overview) Raw Decoded Curated Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Ethereum Ethereum Overview Ethereum data on Dune Ethereum is a decentralized, open-source blockchain system that features its own cryptocurrency, Ether. It is a platform for numerous decentralized applications (dApps), including everything from financial tools to games and complex databases. Ethereum is well-known for its flexibility and its pioneering role in the introduction and use of smart contracts, which are self-executing contracts with the terms of the agreement directly written into code. \n The network supports a broad range of applications due to its general-purpose nature, and it operates on a proof-of-stake consensus mechanism, enhancing its scalability and energy efficiency compared to earlier proof-of-work systems. \n Versatility and Developer Support: \nEthereum supports the creation of a wide variety of applications beyond simple transactions. This includes decentralized finance (DeFi) applications, NFTs, and more, supported by a robust development toolkit and a strong global community. \n Smart Contract Functionality: \nEthereum\u2019s use of smart contracts automates enforcement, management, performance, and payment \u2014 they execute automatically when conditions are met. \n Ethereum documentation The official documentation for Ethereum, providing a wealth of resources on how to build on and interact with the platform.  (https://ethereum.org/en/developers/docs/) \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/overview"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation NEAR NEAR Data Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Overview  (/data-catalog/near/overview) Actions  (/data-catalog/near/actions) Block Chunks  (/data-catalog/near/block_chunks) Circulating Supply  (/data-catalog/near/circulating_supply) FT Transfers  (/data-catalog/near/ft_transfers) Function Call  (/data-catalog/near/function_call) Balances  (/data-catalog/near/balances) NFT Transfers  (/data-catalog/near/nft_transfers) Logs  (/data-catalog/near/logs) Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot NEAR NEAR Data NEAR blockchain data on Dune ", "url": "https://docs.dune.com/data-catalog/near/overview"}
{"content": "\u200b Overview \n The transaction component of the Dune Index measures blockchain activity by counting transactions that transfer at least 1 USD in value. This filtered approach helps focus on meaningful economic activity while maintaining a simple, verifiable methodology. \n ", "url": "https://docs.dune.com/data-catalog/dune-index/transactions#overview"}
{"content": "\u200b Methodology \n The transaction metric employs a straightforward filtering approach: \n \n \n Base Criteria \n \n Count only transactions with transfers of $1 or more \n Convert all token transfers to USD value at time of transaction \n Include both native token and token contract transfers \n \n \n \n Rationale \n \n $1 threshold excludes dust transactions and spam \n Low threshold maintains inclusivity of meaningful activity \n Simple criteria enables consistent cross-chain comparison \n \n \n \n Implementation \n \n Track successful transfers only \n Calculate USD value at transaction time \n Aggregate across all supported token types \n \n \n \n Transactions Metrics Code For specifics on how this is implemented, refer to the transactions metrics code in the Spellbook repository.  (https://github.com/duneanalytics/spellbook/tree/main/dbt_subprojects/daily_spellbook/models/_metrics/transactions) \n ", "url": "https://docs.dune.com/data-catalog/dune-index/transactions#methodology"}
{"content": "\u200b Technical Considerations \n Several factors influence transaction counting: \n \n \n Value Calculation \n \n Use time-weighted token prices \n Account for token decimals and precision \n Handle cases of missing price data \n \n \n \n Cross-Chain Standardization \n \n Apply consistent $1 threshold across networks \n Account for different token value representations \n Handle multi-token transactions appropriately \n \n \n \n ", "url": "https://docs.dune.com/data-catalog/dune-index/transactions#technical-considerations"}
{"content": "\u200b Limitations \n Understanding the metric\u2019s limitations is crucial: \n \n \n Threshold Effects \n \n May exclude some meaningful sub-$1 activity \n Still includes some non-meaningful activity above $1 \n Value threshold is nominal, not inflation-adjusted \n \n \n \n Technical Constraints \n \n Requires reliable price data for all tokens \n Must handle complex transaction types consistently \n Network upgrades may affect transaction classification \n \n \n \n ", "url": "https://docs.dune.com/data-catalog/dune-index/transactions#limitations"}
{"content": "\u200b Usage Guidelines \n When analyzing transaction data: \n \n \n Trend Analysis \n \n Focus on directional changes over time \n Compare across similar time periods \n Consider seasonal and cyclical patterns \n \n \n \n Context \n \n Use alongside other Dune Index components \n Consider network-specific factors \n Account for major protocol changes \n \n \n \n The transaction count provides a foundational measure of blockchain adoption while the $1 threshold helps filter out noise, making it a valuable component of the Dune Index despite its inherent limitations. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/dune-index/transactions) Net Transfers  (/data-catalog/dune-index/net-transfers) Overview  (/data-catalog/curated/overview) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Overview  (#overview) Methodology  (#methodology) Technical Considerations  (#technical-considerations) Limitations  (#limitations) Usage Guidelines  (#usage-guidelines)", "url": "https://docs.dune.com/data-catalog/dune-index/transactions#usage-guidelines"}
{"content": "\u200b Data Catalog \n Logs Detailed event logs from smart contracts, providing insights into interactions within the Base network.  (./raw/logs) Blocks Information on blocks, illustrating the operational capacity and activity levels on Base.  (./raw/blocks) Transactions Extensive transaction data, showcasing the efficiency and execution of operations on Base.  (./raw/transactions) decoded Enhanced transaction data decoded for better analysis and understanding of contract executions.  (./decoded/overview) Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/base/overview) NFT Trades  (/data-catalog/evm/b3/curated-data/nft/nft-trades) Blocks  (/data-catalog/evm/base/raw/blocks) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Data Catalog  (#data-catalog)", "url": "https://docs.dune.com/data-catalog/evm/base/overview#data-catalog"}
{"content": "\u200b Data Catalog \n Logs Insights into smart contract interactions through detailed event logs, providing visibility into the dynamic activity on the Polygon PoS network.  (./raw/logs) Blocks Information on blocks processed on the Polygon PoS network, reflecting the network\u2019s high throughput and capacity for handling large volumes of transactions.  (./raw/blocks) Transactions Extensive transaction data, highlighting the operational efficiency and reduced costs facilitated by the PoS mechanism.  (./raw/transactions) decoded Decoded transaction information for enhanced analysis and understanding of smart contract executions on the Polygon PoS network.  (./decoded/overview) Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/polygon/overview) NFT Trades  (/data-catalog/evm/optimism/curated-data/nft/nft-trades) Blocks  (/data-catalog/evm/polygon/raw/blocks) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Data Catalog  (#data-catalog)", "url": "https://docs.dune.com/data-catalog/evm/polygon/overview#data-catalog"}
{"content": "\u200b Data Available \n Blocks Blocks are the base unit that all transactions fit into.  (/data-catalog/bitcoin/blocks) Transactions Transactions contain all spent inputs and created outputs from a UTXO transaction.  (/data-catalog/bitcoin/transactions) Outputs Just the outputs, unnested.  (/data-catalog/bitcoin/outputs) Inputs Just the inputs, unnested.  (/data-catalog/bitcoin/inputs) Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/bitcoin/overview) User Transactions  (/data-catalog/aptos/user_transactions) Blocks  (/data-catalog/bitcoin/blocks) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Data Available  (#data-available)", "url": "https://docs.dune.com/data-catalog/bitcoin/overview#data-available"}
{"content": "\u200b Data Catalog \n Logs Event logs from smart contracts, showcasing the diverse and dynamic usage of Ethereum\u2019s decentralized platform.  (./raw/logs) Blocks Information on Ethereum blocks, reflecting the network\u2019s activity and scalability achievements.  (./raw/blocks) Transactions Detailed information on transactions, underscoring the high throughput and complexity of operations on Ethereum.  (./raw/transactions) decoded Decoded transaction data, facilitating easier analysis and deeper understanding of smart contract operations.  (./decoded/overview) Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/ethereum/overview) Traces  (/data-catalog/evm/degen/raw/traces) Transactions  (/data-catalog/evm/ethereum/raw/transactions) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Data Catalog  (#data-catalog)", "url": "https://docs.dune.com/data-catalog/evm/ethereum/overview#data-catalog"}
{"content": "\u200b What is NEAR? \n NEAR is a public, sharded, proof-of-stake blockchain designed to provide scalability, security, and user-friendliness for decentralized applications (dApps). With its unique account model, sharding mechanism, and developer-friendly environment, NEAR enables fast transactions at low costs while maintaining decentralization. It shares design goals with Ethereum 2.0 but includes optimizations for ease of use and performance. \n NEAR\u2019s sharding system, Nightshade, enables horizontal scaling, meaning the network\u2019s capacity grows as the number of validators and nodes increases. This architecture, combined with a focus on developer tools and user experience, makes NEAR an ideal platform for building scalable Web3 applications. \n ", "url": "https://docs.dune.com/data-catalog/near/overview#what-is-near"}
{"content": "\u200b Key Concepts of NEAR \n NEAR\u2019s infrastructure is built on several key components that ensure its scalability, performance, and ease of use. These components work together to enable developers to build on-chain applications while providing a smooth experience for users. \n ", "url": "https://docs.dune.com/data-catalog/near/overview#key-concepts-of-near"}
{"content": "\u200b Sharding with Nightshade \n Nightshade is NEAR\u2019s solution to scaling the blockchain by splitting the network into multiple shards, each processing its own set of transactions. This sharding allows the blockchain to handle more transactions as the network grows, enabling high throughput and low-latency finality. \n ", "url": "https://docs.dune.com/data-catalog/near/overview#sharding-with-nightshade"}
{"content": "\u200b Proof-of-Stake Consensus \n NEAR uses a proof-of-stake consensus mechanism. Validators are chosen through an auction process based on the amount of NEAR tokens they stake. This system incentivizes honest behavior while ensuring decentralization, as anyone can become a validator if they meet the staking requirements. \n ", "url": "https://docs.dune.com/data-catalog/near/overview#proof-of-stake-consensus"}
{"content": "\u200b NEAR Accounts and Access Keys \n NEAR introduces a human-readable  account system (e.g.,  alice.near )  (https://docs.near.org/concepts/protocol/account-id)  that simplifies interaction with the blockchain. Each account can have  multiple keys with different levels of access (Full-Access and Function-Call Keys)  (https://docs.near.org/concepts/protocol/access-keys) , allowing for more granular permission controls and better user experience. This flexibility makes it easier for developers to manage dApp permissions and onboard users. \n ", "url": "https://docs.dune.com/data-catalog/near/overview#near-accounts-and-access-keys"}
{"content": "\u200b Gas (Execution Fees) \n Gas is an essential part of NEAR\u2019s network, used to cover the cost of transactions and prevent network abuse. Each transaction or action executed on the NEAR blockchain requires gas, which is measured in gas units. The cost is based on network demand, and gas fees are paid in NEAR tokens. To learn more,  visit here.  (https://docs.near.org/concepts/protocol/gas#gas-units--gas-price) \n ", "url": "https://docs.dune.com/data-catalog/near/overview#gas-execution-fees"}
{"content": "\u200b Transaction Lifecycle & Data Flow \ud83c\udf0a \n NEAR employs a unique transaction lifecycle where transactions are first validated on the sender\u2019s shard, turned into receipts, and then processed on the receiver\u2019s shard. This process ensures efficient transaction routing, even in cross-shard communication. After transaction execution, any remaining gas is refunded to the sender, ensuring efficient use of resources. \n Watch this quick video to understand how NEAR data flows. For a text version, visit  this page  (https://docs.near.org/concepts/data-flow/near-data-flow) . \n \n ", "url": "https://docs.dune.com/data-catalog/near/overview#transaction-lifecycle-and-data-flow"}
{"content": "\u200b Anatomy of a Transaction \ud83d\udd0e \n A transaction in NEAR consists of one or more actions that are signed by the sender\u2019s account and executed by the network. These actions could include transferring tokens, invoking smart contracts, or staking. \n \u200b  (#key-components-of-a-transaction) Key Components of a Transaction \n \n Signer : The account that signs the transaction. \n Receiver : The account that will execute the actions. \n Actions : Operations like  FunctionCall ,  Transfer ,  DeployContract , etc. A transaction can include multiple actions, but all are executed on the same receiver. \n PublicKey : The public key used to sign the transaction (so the network can verify the signature). \n Nonce : A number that is incremented for each transaction sent by the Signer. \n BlockHash : The hash of a recent block, to limit the time-validity of the transaction. \n \n \u200b  (#types-of-actions) Types of Actions \n \n FunctionCall : Invoke a function on a contract (optionally attaching NEAR to the call). \n Transfer : Move NEAR tokens between accounts. \n DeployContract : Deploy a new contract to an account. \n CreateAccount : Create a new sub-account under an existing account. \n DeleteAccount : Remove an account and transfer its remaining balance to a beneficiary. \n AddKey / DeleteKey : Add or remove public keys associated with an account. \n Stake : Stake NEAR tokens to become a validator or delegate stake to one. \n DelegateActions : Execute a meta-transaction on behalf of another account. \n \n NEAR documentation Explore comprehensive documentation on NEAR, detailing its architecture, protocol, and resources for developers.  (https://docs.near.org/) \n ", "url": "https://docs.dune.com/data-catalog/near/overview#anatomy-of-a-transaction"}
{"content": "\u200b NEAR Data on Dune \n NEAR blockchain data is partitioned and categorized to provide developers and users with an easily accessible dataset to interact with and analyze the network\u2019s on-chain activity. The primary data tables in Dune for NEAR include the following: \n Actions Records actions such as transfers, contract deployments, and function calls performed within the NEAR network.  (/data-catalog/near/actions) Block Chunks Stores chunk-level data, with each block consisting of multiple chunks from different shards.  (/data-catalog/near/block_chunks) Circulating Supply Table holding daily circulating and total supply of tokens in NEAR.  (/data-catalog/near/circulating_supply) FT Transfers Tracks fungible token (FT) transfers across the NEAR network.  (/data-catalog/near/ft_transfers) Function Calls Contains flattened out actions of the   function_call  type.  (/data-catalog/near/function_call) NFT Transfers Captures non-fungible token (NFT) transfers, including token ID and sender/receiver details.  (/data-catalog/near/nft_transfers) Balances Stores account balance data, including liquid, staked, and locked balances.  (/data-catalog/near/balances) Logs This table captures the output generated during the execution of smart contracts.  (/data-catalog/near/logs) Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/near/overview) Transactions  (/data-catalog/bitcoin/transactions) Actions  (/data-catalog/near/actions) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page What is NEAR?  (#what-is-near) Key Concepts of NEAR  (#key-concepts-of-near) Sharding with Nightshade  (#sharding-with-nightshade) Proof-of-Stake Consensus  (#proof-of-stake-consensus) NEAR Accounts and Access Keys  (#near-accounts-and-access-keys) Gas (Execution Fees)  (#gas-execution-fees) Transaction Lifecycle & Data Flow \ud83c\udf0a  (#transaction-lifecycle-and-data-flow) Anatomy of a Transaction \ud83d\udd0e  (#anatomy-of-a-transaction) Key Components of a Transaction  (#key-components-of-a-transaction) Types of Actions  (#types-of-actions) NEAR Data on Dune  (#near-data-on-dune)", "url": "https://docs.dune.com/data-catalog/near/overview#near-data-on-dune"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded Overview Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Overview  (/data-catalog/evm/ethereum/overview) Raw Decoded Overview  (/data-catalog/evm/ethereum/decoded/overview) Call Tables  (/data-catalog/evm/ethereum/decoded/call-tables) Event Logs  (/data-catalog/evm/ethereum/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/ethereum/decoded/contracts) logs_decoded  (/data-catalog/evm/ethereum/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/ethereum/decoded/traces-decoded) Curated Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded Overview Simplifying smart contract analysis through human-readable tables. ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/decoded/overview"}
{"content": "\u200b Overview of Dune\u2019s Decoded Data Approach \n Dune uses the ABI (Application Binary Interface) of smart contracts to decode blockchain transactions into structured tables. Each event log and function call from the ABI are parsed into their own tables. This decoding process transforms the raw, encoded data on the blockchain into human-readable tables, simplifying the analysis of smart contract data. \n Dune\u2019s decoded data approach offers several benefits: \n \n \n Enhanced Readability:  The decoded data tables provide a clear and intuitive representation of smart contract activities \n \n \n Efficient Analysis:  The structured tables enable efficient querying and analysis of smart contract data \n \n \n Handling Multiple Contract Instances:  For smart contracts with multiple instances, Dune aggregates the data from these instances into a single table, simplifying the analysis process. \n \n \n Collaborative Mapping:  Dune\u2019s smart contract library is continuously expanded through the active participation of the Dune community, ensuring that the decoding coverage remains comprehensive and current. \n \n \n Explore decoded logs  (/data-catalog/evm/ethereum/decoded/event-logs) Explore decoded traces  (/data-catalog/evm/ethereum/decoded/call-tables) \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/decoded/overview#overview-of-dunes-decoded-data-approach"}
{"content": "\u200b Which contracts have decoded data? \n Contract submission on Dune are driven by the community. Usually the odds are good that the contract you are looking at is already decoded, but esepecially for new projects or new contracts, it might be that the contract is not decoded yet. In those cases you can submit the contract to be decoded. Decoding usually takes about 24 hours, in special cases it might take longer. \n You can check if contracts are already decoded by querying  [blockchain].contracts  (/data-catalog/evm/ethereum/decoded/contracts)  tables, the  data explorer  (/web-app/query-editor/data-explorer)  or use  this dashboard  (https://dune.com/dune/is-my-contract-decoded-yet-v2) . \n If you want to submit several contracts at the same time, there is also the possibility of submitting a batch of contracts. To do so, please use  this CSV  (https://gist.github.com/antonio-mendes/c6a43c22862581674c11462cae230e23)  as a template and fill it in with the appropriate information for the contracts you want to decode. Afterwards send the CSV to  decoding@dune.com  (mailto:decoding@dune.com) . \n Submit any contract for decoding  (/web-app/decoding/decoding-contracts) Explore already decoded contracts  (/data-catalog/evm/ethereum/decoded/contracts) \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/decoded/overview#which-contracts-have-decoded-data"}
{"content": "\u200b How does decoding work? \n Smart Contracts on any EVM blockchain are mostly written in high level languages like  Solidity  (https://docs.soliditylang.org/en/v0.8.2)  or  Vyper  (https://vyper.readthedocs.io/en/stable) . \n In order for them to be able to be deployed to an EVM execution environment, they need to be compiled to EVM executable bytecode. Once deployed, the bytecode gets associated to an address on the respective chain and is permanently stored in this chain\u2019s state storage. \n To be able to interact with this smart contract, which is now just bytecode, we need a guide to be able to call the functions which are defined in the high-level languages. This translation of names and arguments into byte representation is done using an  Application Binary Interface (ABI) . \n The ABI documents names, types, and arguments precisely which allows us to interact with the smart contract using a somewhat human readable format. The ABI can be compiled using the high level language source code. \n The ABI is used to call a smart contract or interpret the data it emits. \n \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/decoded/overview#how-does-decoding-work"}
{"content": "\u200b Decoding Example \n We are going to look at an event log of an ERC20 transfer event from the  smart contract  (https://etherscan.io/token/0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5#readContract)  that represents the $PICKLE token. \n On  Etherscan  (https://etherscan.io/tx/0x2bb7c8283b782355875fa37d05e4bd962519ea294678a3dcf2fdffbbd0761bc5#eventlog)  the undecoded event looks like this: \n \n If we query for this transaction in the  ethereum.logs  table in the Dune database, we will receive the same encoded bytecode as our result dataset. \n SELECT   * \n FROM  ethereum . logs \n WHERE  tx_hash  =   0x2bb7c8283b782355875fa37d05e4bd962519ea294678a3dcf2fdffbbd0761bc5 \n \n \n We could make short work of this encoded bytecode by using  DuneSQL Varbinary functions  (/query-engine/Functions-and-operators/varbinary)  to decode it, but having the contract\u2019s ABI at hand makes this process much easier. This contract is decoded in Dune, so we can use the  pickle_finance_ethereum.PickleToken_evt_Transfer  table to access the decoded event log. \n SELECT   * \n FROM  pickle_finance_ethereum . PickleToken_evt_Transfer \n WHERE  evt_tx_hash  =   0x2bb7c8283b782355875fa37d05e4bd962519ea294678a3dcf2fdffbbd0761bc5 \n \n \n Now this is actually useful for analyzing this transaction! \n How exactly does this work? \n Since we know which event we are looking at here, we can simply convert the encoded bytecode to decoded data by decoding the bytecode according to it\u2019s datatype. \n The structure for the  Transfer  event log of an ERC20 token will always be: \n Transfer ( address   from ,   address  to ,   uint256  value ) \n \n This basically tells us that topic2 and topic3 are of the type  address (32bytes) and are respectively the sender and recipient of the token transfer. An event log only has 3 indexed fields, so the  data  field is used to store the information about how much units of the token have been moved in this transaction. This field is called  value . \n Since  topic0  always is just the Keccak-256 hash of the signature of the event, we are left with decoding  topic1 ,  topic2  and  data . \n In this case, they map out like this: \n raw data field decoded data description raw data decoded data topic0 keccak(\u2018Transfer(address,address,uint256\u201d)) 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef not needed, this table only contains event logs from the  transfer  event log topic1 from 0x00000000000000000000000075e89d5979e4f6fba9f97c104c2f0afb3f1dcb88 0x75e89d5979e4f6fba9f97c104c2f0afb3f1dcb88 topic2 to 0x00000000000000000000000087d9da48db6e1f925cb67d3b7d2a292846c24cf7 0x87d9da48db6e1f925cb67d3b7d2a292846c24cf7 data value 0x00000000000000000000000000000000000000000000001a894d51f85cb08000 489509000000000000000 \n Now what works for a single erc20 token, works for all erc20 tokens. We can use defined interfaces to decode the data of any erc20 token transfer event log. \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/decoded/overview#decoding-example"}
{"content": "\u200b How do I understand decoded data? \n Decoded data is the high level programming language representation of two pieces of software talking to each other via the blockchain. \n It\u2019s not always easy for a human to understand what exactly is going on in these interactions, but most of the time, looking at column names and the data that is transmitted within them should help you to understand what is happening within that specific log or call. \n If you are not able to make sense of the data by just searching the tables, it usually helps to look at single transactions using the transaction hash and Etherscan. \n Furthermore, actually going into the smart contracts code (our favorite way to do this is  DethCode  (https://etherscan.deth.net) ) to read the comments or the actual logic can help to understand the smart contract\u2019s emitted data. \n If that also doesn\u2019t lead to satisfactory results, scouring the relevant docs and GitHub of the project can lead you to the desired answers. Furthermore, talking to the developers and core community of a project can also help you to get an understanding of the smart contracts. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/ethereum/decoded/overview) Withdrawals  (/data-catalog/evm/ethereum/raw/withdrawals) Call Tables  (/data-catalog/evm/ethereum/decoded/call-tables) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Overview of Dune\u2019s Decoded Data Approach  (#overview-of-dunes-decoded-data-approach) Which contracts have decoded data?  (#which-contracts-have-decoded-data) How does decoding work?  (#how-does-decoding-work) Decoding Example  (#decoding-example) How do I understand decoded data?  (#how-do-i-understand-decoded-data)", "url": "https://docs.dune.com/data-catalog/evm/ethereum/decoded/overview#how-do-i-understand-decoded-data"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Dune Index Dune Index Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Dune Index Dune Index The Dune Index is a comprehensive indicator of blockchain adoption across the industry. ", "url": "https://docs.dune.com/data-catalog/dune-index/introduction"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Aptos Aptos data Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Overview  (/data-catalog/aptos/overview) Blocks  (/data-catalog/aptos/blocks) Events  (/data-catalog/aptos/events) Move Modules  (/data-catalog/aptos/move_modules) Move Resources  (/data-catalog/aptos/move_resources) Move Table Items  (/data-catalog/aptos/move_table_items) Signatures  (/data-catalog/aptos/signatures) Transactions  (/data-catalog/aptos/transactions) User Transactions  (/data-catalog/aptos/user_transactions) Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Aptos Aptos data Aptos is a next-generation blockchain designed for scalability, security, and reliability. Aptos utilizes the Move programming language, focusing on flexibility, safety, and efficiency in smart contract execution. It employs a ledger model that is built to support highly scalable and reliable decentralized applications and financial infrastructure. Aptos is distinguished by its state-of-the-art consensus protocol, aiming to achieve high transaction throughput without compromising security or decentralization. \n You can learn more about Aptos by visiting the  official documentation  (https://aptos.dev/) . \n ", "url": "https://docs.dune.com/data-catalog/aptos/overview"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Bring your Data Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Bring your Data Dune offers several ways to bring your data to the platform. ", "url": "https://docs.dune.com/data-catalog/bring-your-own-data"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Polkadot Polkadot & Substrate Overview Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Overview  (/data-catalog/substrate/overview) Balances  (/data-catalog/substrate/balances) Blocks  (/data-catalog/substrate/blocks) Calls  (/data-catalog/substrate/calls) Events  (/data-catalog/substrate/events) Extrinsics  (/data-catalog/substrate/extrinsics) Materialized Views  (/data-catalog/substrate/materialized_views) Stakings  (/data-catalog/substrate/stakings) Transfers  (/data-catalog/substrate/transfers) Traces  (/data-catalog/substrate/traces) Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Polkadot Polkadot & Substrate Overview Substrate chains (e.g. Polkadot and its parachains) are on Dune. The Polkadot Relay Chain is a proof-of-stake blockchain that provides shared security and secure interoperability to other blockchains, known as parachains. Parachain\u2019s transactions are processed in parallel by Polkadot. Kusama is a sister relay chain, designed as a canary blockchain, largely to test new Polkadot functionality before being deployed on Polkadot. \n Both relay chains and all their parachains are built with Substrate. Substrate is the primary blockchain SDK used by developers to create parachains that make up the Polkadot and Kusama networks. There also is a growing number of chains built with Substrate that are outside of Polkadot\u2019s shared security infrastructure. \n In Dune, Substrate tables model the activity of Substrate chains and are ingested hourly. All Substrate chains share identical schemas. For documentation purposes, we use  polkadot.<tables>  to showcase how to use all other  <substrate_chain>.<tables> . \n Polkadot and all of the substrate chains are ingested by  Colorful Notion  (https://colorfulnotion.com) \nand are supported by  Polkadot OpenGov  (https://polkadot.opengov.io) . \n ", "url": "https://docs.dune.com/data-catalog/substrate/overview"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Data Freshness Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Data Freshness Understand the frequency of updates for various data types on Dune. At Dune, data is continually refreshed through a multi-stage process to ensure accuracy and reliability. The three main stages of data updates are:  Raw Data ,  Decoded Data , and  Curated Data . The update frequency for each type of data varies based on several factors. \n ", "url": "https://docs.dune.com/data-catalog/data-freshness"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Dune Index Net USD Transferred Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Dune Index Net USD Transferred Understanding net USD transferred as a component of the Dune Index ", "url": "https://docs.dune.com/data-catalog/dune-index/net-transfers"}
{"content": "\u200b What is the Dune Index? \n The Dune Index serves as a comprehensive measurement framework for blockchain adoption, designed to capture meaningful usage while filtering out speculative activity. By combining multiple standardized metrics, it provides an objective view of how blockchain technology is being utilized across different networks and use cases. \n ", "url": "https://docs.dune.com/data-catalog/dune-index/introduction#what-is-the-dune-index"}
{"content": "\u200b Why the Dune Index? \n Traditional blockchain metrics often fall short of measuring genuine adoption. Market capitalization and token prices primarily reflect speculative sentiment, while metrics like Total Value Locked (TVL) can be manipulated by large holders. The Dune Index addresses these limitations by focusing on actual network usage and economic activity. \n The index was specifically designed to track meaningful adoption that indicates real-world utility. This approach helps stakeholders distinguish between speculative bubbles and sustainable growth in blockchain usage. \n ", "url": "https://docs.dune.com/data-catalog/dune-index/introduction#why-the-dune-index"}
{"content": "\u200b Components \n The Dune Index aggregates three fundamental metrics, each normalized to a baseline value of 10 to enable meaningful comparison: \n Transaction Fees Measures real demand for blockspace  (/data-catalog/dune-index/gas-fees) Net USD Transferred Tracks genuine value movement  (/data-catalog/dune-index/net-transfers) Transactions Indicates breadth of usage  (/data-catalog/dune-index/transactions) \n ", "url": "https://docs.dune.com/data-catalog/dune-index/introduction#components"}
{"content": "\u200b Component Selection Rationale \n These metrics were carefully chosen to provide a comprehensive view of blockchain usage. Transaction fees demonstrate users\u2019 willingness to pay for block space, serving as a market-driven indicator of demand. Net transfers capture actual economic activity while filtering out artificial volume. Transaction count provides context about the breadth of network usage. \n Together, these metrics create a robust framework that resists artificial inflation and captures different aspects of blockchain utility. \n Dune Index Metrics Code For implementation details, see the Dune Index metrics code in the Spellbook repository.  (https://github.com/duneanalytics/spellbook/tree/main/dbt_subprojects/daily_spellbook/models/_metrics/dune_index) \n ", "url": "https://docs.dune.com/data-catalog/dune-index/introduction#component-selection-rationale"}
{"content": "\u200b Implementation Guide \n The Dune Index can be utilized in several ways: \n \n Track industry trends by monitoring long-term adoption patterns and growth trajectories across the blockchain space. \n Enable detailed blockchain breakdowns to compare adoption metrics between different networks. \n Through component analysis, users can evaluate the relative impact of each metric on overall adoption. \n The index methodology can also be extended for specialized research and custom analysis needs. \n \n ", "url": "https://docs.dune.com/data-catalog/dune-index/introduction#implementation-guide"}
{"content": "\u200b Excluded Metrics \n The index intentionally excludes several common blockchain metrics due to their limitations: \n ", "url": "https://docs.dune.com/data-catalog/dune-index/introduction#excluded-metrics"}
{"content": "\u200b Price and Market Capitalization \n Market-based metrics were excluded as they primarily reflect speculative activity rather than actual usage. Price movements often diverge significantly from underlying adoption patterns and can be heavily influenced by market sentiment rather than utility. \n ", "url": "https://docs.dune.com/data-catalog/dune-index/introduction#price-and-market-capitalization"}
{"content": "\u200b Total Value Locked (TVL) \n While TVL provides insight into DeFi activity, it has significant limitations as an adoption metric. The metric can be manipulated by large holders, doesn\u2019t account for capital efficiency, and automatically increases with asset prices regardless of actual usage. \n ", "url": "https://docs.dune.com/data-catalog/dune-index/introduction#total-value-locked-tvl"}
{"content": "\u200b Active Addresses \n Address-based metrics prove problematic due to the ease of address creation and the common practice of users maintaining multiple addresses. These metrics fail to distinguish between meaningful activity and artificial inflation through address generation. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/dune-index/introduction) Bring your Data  (/data-catalog/bring-your-own-data) Transactions Fees  (/data-catalog/dune-index/gas-fees) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page What is the Dune Index?  (#what-is-the-dune-index) Why the Dune Index?  (#why-the-dune-index) Components  (#components) Component Selection Rationale  (#component-selection-rationale) Implementation Guide  (#implementation-guide) Excluded Metrics  (#excluded-metrics) Price and Market Capitalization  (#price-and-market-capitalization) Total Value Locked (TVL)  (#total-value-locked-tvl) Active Addresses  (#active-addresses)", "url": "https://docs.dune.com/data-catalog/dune-index/introduction#active-addresses"}
{"content": "\u200b Data Available \n Blocks Represents the collection of transactions in a single block within the Aptos\nblockchain.  (/data-catalog/aptos/blocks) Transactions Includes all user and system transactions processed by the Aptos network.  (/data-catalog/aptos/transactions) User Transactions Specifically tracks transactions initiated by users, including smart\ncontract interactions.  (/data-catalog/aptos/user_transactions) Events Captures events emitted by smart contracts, logging significant actions and\nchanges.  (/data-catalog/aptos/events) Move Resources Details Move resources, representing structured data owned by accounts on\nthe Aptos blockchain.  (/data-catalog/aptos/move_resources) Move Modules Contains metadata and code for Move modules, defining the functionality of\nsmart contracts.  (/data-catalog/aptos/move_modules) Move Table Items Tracks items stored in Move\u2019s table data structures, used for efficient data\naccess within smart contracts.  (/data-catalog/aptos/move_table_items) Signatures Signatures are associated with transactions, which are essential for\nsecurity and authentication.  (/data-catalog/aptos/signatures) Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/aptos/overview) NFT Trades  (/data-catalog/evm/ink/curated-data/nft/nft-trades) Blocks  (/data-catalog/aptos/blocks) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Data Available  (#data-available)", "url": "https://docs.dune.com/data-catalog/aptos/overview#data-available"}
{"content": "\u200b Data Upload \n You can upload your data to Dune via the API or the UI. This allows you to combine your data with the data available on Dune. \n Upload data via the User Interface Upload data via dune.com  (/web-app/upload-data) Upload data via the API Programmatically upload data via the API  (/api-reference/tables/endpoint/upload) \n ", "url": "https://docs.dune.com/data-catalog/bring-your-own-data#data-upload"}
{"content": "\u200b LiveFetch Functions \n You can also use the LiveFetch functions to fetch data from external APIs directly within your queries. This allows you to combine your data with external data sources in real-time and without having to upload the data to Dune. \n LiveFetch Functions Fetch data from external APIs directly within your queries  (/query-engine/Functions-and-operators/live-fetch) \n ", "url": "https://docs.dune.com/data-catalog/bring-your-own-data#livefetch-functions"}
{"content": "\u200b Adding new blockchains \n If you are a representative of a blockchain you would like to see supported on Dune, please reach out to us. We are always looking to expand our data catalog. \n Request a new blockchain integration!  (https://dune.com/enterprise) \n ", "url": "https://docs.dune.com/data-catalog/bring-your-own-data#adding-new-blockchains"}
{"content": "\u200b Adding other relevant data \n If you have other relevant web3 data that you would like to see on Dune, please reach out to us. We are always looking to expand our data catalog.\nData in this category could include web3 social, enriched blockchain data, tradfi data, pricing data and more. \n A few examples of data we already have in this category are: \n \n farcaster.xyz  (https://www.farcaster.xyz/)  data is supplied by  Neynar  (https://www.neynar.xyz/) \n the  Lens protocol  (https://lens.xyz)  team uploads their data \n Snapshot  (https://snapshot.org/#/)  team uploads their data \n Reservoir  (https://reservoir.api)  provides enriched and cleaned NFT trading data \n etc\u2026 \n \n  The Criteria for adding data in this category is that it should be relevant to the web3 ecosystem and should be of high quality. \n Request a new data integration!  (https://dune.com/enterprise) Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/bring-your-own-data) Data Freshness  (/data-catalog/data-freshness) Introduction  (/data-catalog/dune-index/introduction) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Data Upload  (#data-upload) LiveFetch Functions  (#livefetch-functions) Adding new blockchains  (#adding-new-blockchains) Adding other relevant data  (#adding-other-relevant-data)", "url": "https://docs.dune.com/data-catalog/bring-your-own-data#adding-other-relevant-data"}
{"content": "\u200b Onboarding Status \n Both Polkadot and Kusama relay chains and several leading parachains have been onboarded as of March 2024. All Polkadot system chains and Polkadot parachains (as of early 2024) are being onboarded in early Q2 2024. Modeling EVM Activity within Substrate is planned in mid to late Q2 2024. \n \n ", "url": "https://docs.dune.com/data-catalog/substrate/overview#onboarding-status"}
{"content": "\u200b Substrate Tables \n All tables are organized by a temporal variable ( block_time  or  ts ). Because Substrate is organized by  pallets , several of the key tables ( calls ,  events  and  extrinsics ) are usually filtered by the pallet section and method ( call_section  and  call_method  for  calls , or  section  and  method  for  events  and  extrinsics ). Decoded data is available in  decoded_data  for these tables in JSON form. \n Blocks Each block in the blockchain, summarized with its hash and key statistics for quick overview.  (/data-catalog/substrate/blocks) Extrinsics Detailed transaction data, encompassing both signed and unsigned operations, directly invoking pallet functions.  (/data-catalog/substrate/extrinsics) Balances Daily snapshots capturing the state of user assets, reflecting the end-of-day balances.  (/data-catalog/substrate/balances) Calls Comprehensive info on function calls, expanding top-level extrinsics with internal calls.  (/data-catalog/substrate/calls) Events All events emitted by the runtime, including system events, and events from all pallets.  (/data-catalog/substrate/events) Transfers Complete ledger of asset transfers across the network, capturing the movement of tokens between accounts.  (/data-catalog/substrate/transfers) Traces In-depth Substrate storage data, offering insights that are not readily available from the events data alone.  (/data-catalog/substrate/traces) Stakings Raw staking data including details on Validators, Nominators, Pools, and Pool Members, specific to Polkadot and Kusama Relay Chains.  (/data-catalog/substrate/stakings) Materialized Views Optimized data views storing pre-processed information from other tables, streamlining access to pipelined chain data.  (/data-catalog/substrate/materialized_views) \n ", "url": "https://docs.dune.com/data-catalog/substrate/overview#substrate-tables"}
{"content": "\u200b Sample Queries \n As Substrate chains use SS58 Addresses, the following Dune function is very useful: \n \n SS58 functions: from_ss58(varchar) + to_ss58(varbinary, int)  (/query-engine/Functions-and-operators/ss58) \n \n ", "url": "https://docs.dune.com/data-catalog/substrate/overview#sample-queries"}
{"content": "\u200b overview of recent blocks \n SELECT   DATE ( block_time )   AS  logDT , \n         count ( distinct  number )  numBlocks , \n         MAX ( block_time )   AS  lastBlockTime , \n         MIN ( number )   AS  b0 , \n         MAX ( number )   AS  b1 , \n         ( MAX ( number )   - MIN ( number )   -   count ( distinct  number ) )   +   1   as  missing \n FROM  polkadot . blocks \n WHERE  block_time  >   DATE ( '2024-01-01' ) \n GROUP   BY   1 \n order   by   1   desc ; \n \n ", "url": "https://docs.dune.com/data-catalog/substrate/overview#overview-of-recent-blocks"}
{"content": "\u200b popular pallets \n Query the most popular pallets and their methods. \n select   count ( distinct  signer_ss58 )  numUsers ,   count ( * )  numCalls ,  call_section ,  call_method  from  polkadot . calls \n where  call_section  not   in   ( 'timestamp' ,   'utility' ,   'proxy' ) \n group   by  call_section ,  call_method  order   by   count ( * )   desc \n \n ", "url": "https://docs.dune.com/data-catalog/substrate/overview#popular-pallets"}
{"content": "\u200b frequent events \n Query the most frequent events, excluding system events. \n select    count ( * )  numEvents ,  concat ( section ,   ':' ,  method )    as  sm  from  polkadot . events \n where  section  not   in   ( 'system' ) \n group   by   2   order   by   count ( * )   desc \n \n ", "url": "https://docs.dune.com/data-catalog/substrate/overview#frequent-events"}
{"content": "\u200b other chains \n To query other chains, replace  polkadot  with the chain name, e.g.  kusama ,  interlay ,  astar  etc. \n SELECT \n   date_format ( block_time ,   '%Y-%m' )   as  monthDT , \n   call_method , \n    COUNT ( DISTINCT  signer_ss58 )   AS  numUniqueActiveUsers , \n    COUNT ( Distinct  extrinsic_id  )   AS  numCalls \n FROM \n   assethub . calls \n WHERE \n   call_section  IN   ( 'nfts' ) \n    AND  call_method  IN   ( 'buyItem' ,   'mint' ) \n    AND  block_time  >=   TIMESTAMP   '2023-01-01' \n GROUP   BY \n    1 ,   2 \n ORDER   BY \n    1 ,   2 ; \n \n ", "url": "https://docs.dune.com/data-catalog/substrate/overview#other-chains"}
{"content": "\u200b JSON extraction \n You will often need to extract data from JSON fields. Here is an example of how to extract data from the  events  table. \n SELECT \n     E . block_time , \n     JSON_VALUE ( E . data ,   'strict $[0]' )   as  account , \n     JSON_VALUE ( E . data_decoded ,   'strict $[0].address' )   as  pub_key , \n     CAST ( JSON_VALUE ( E . data ,   'strict $[1]' )   AS   SMALLINT )   as  asset_id_1 , \n     CAST ( JSON_VALUE ( E . data ,   'strict $[2]' )   AS   SMALLINT )   as  asset_id_2 , \n      ( JSON_VALUE ( E . data ,   'strict $[3]' ) ) as  amount_1 , \n      ( JSON_VALUE ( E . data ,   'strict $[4]' ) ) as  amount_2 , \n      ( JSON_VALUE ( E . data ,   'strict $[5]' ) ) as  hub_in , \n      ( JSON_VALUE ( E . data ,   'strict $[6]' ) ) as  hub_out , \n      ( JSON_VALUE ( E . data ,   'strict $[7]' ) ) as  asset_fee , \n      ( JSON_VALUE ( E . data ,   'strict $[8]' ) ) as  protocol_fee , \n     A1 . decimals  as  decimals_1 , \n     A1 . ticker  as  ticker_1 , \n     A2 . decimals  as  decimals_2 , \n     A2 . ticker  as  ticker_2 , \n     method \n      FROM  hydradx . events E \n      LEFT   JOIN  query_3482301 A1  on  A1 . asset_id = CAST ( JSON_VALUE ( data ,   'strict $[1]' )   as   INT ) \n      LEFT   JOIN  query_3482301 A2  on  A2 . asset_id = CAST ( JSON_VALUE ( data ,   'strict $[2]' )   as   INT ) \n      WHERE  section = 'omnipool'   and  method  in ( 'SellExecuted' ,   'BuyExecuted' ) \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/substrate/overview) Logs  (/data-catalog/near/logs) Balances  (/data-catalog/substrate/balances) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Onboarding Status  (#onboarding-status) Substrate Tables  (#substrate-tables) Sample Queries  (#sample-queries) overview of recent blocks  (#overview-of-recent-blocks) popular pallets  (#popular-pallets) frequent events  (#frequent-events) other chains  (#other-chains) JSON extraction  (#json-extraction)", "url": "https://docs.dune.com/data-catalog/substrate/overview#json-extraction"}
{"content": "\u200b Raw Data \n Raw data consists of tables such as  ethereum.blocks  or  ethereum.transactions  that are directly ingested from the blockchain. The frequency of raw data updates is primarily influenced by the blockchain\u2019s frequency of producing blocks and its likelihood of a reorg. \n ", "url": "https://docs.dune.com/data-catalog/data-freshness#raw-data"}
{"content": "\u200b Blockchain Dependence \n \n Chains like Optimism, Arbitrum, and Avalanche : These blockchains exhibit lower chances of undergoing reorgs. As a result, data ingestion occurs more swiftly since the stability of these chains allows for quicker validation of block data. \n Chains like Polygon and Ethereum : Given their higher propensity for reorgs, there is a deliberate delay in data ingestion. This delay ensures that only stable and reorg-resistant blocks are considered, preventing the ingestion of potentially unstable or reversible transactions. \n \n We do our best to ensure that the data is as fresh as possible while maintaining the integrity of the data. You can find the data freshness of the raw data in the table below. \n \n ", "url": "https://docs.dune.com/data-catalog/data-freshness#blockchain-dependence"}
{"content": "\u200b Decoded Data \n Decoded data refers to tables such as  uniswap_v3_ethereum.Factory_evt_PoolCreated  or  tokens_ethereum.erc20  that are derived from the raw data. This stage of data processing involves transforming raw blockchain data into more accessible and interpretable formats. \n The decoding of data is performed in real-time and is contingent on the volume of data being processed. The typical timeline for decoding is as follows: \n \n Time Frame : Decoding generally occurs within 15 to 60 seconds following the ingestion of raw data. \n Dependency on Data Volume : The specific duration within this range depends on the current data throughput and the complexity of the decoding operations required. \n \n You can find the data freshness of the decoded data in the table below. \n \n ", "url": "https://docs.dune.com/data-catalog/data-freshness#decoded-data"}
{"content": "\u200b Curated Data \n Curated data tables on Dune are tables like  dex.trades  or  nft.trades  that are derived from raw and decoded data. They take away the complexity of working with raw or even decoded data and are ready to be used for analysis.\nThe data pipelines are defined and documented in this  GitHub repo  (https://github.com/duneanalytics/spellbook) . \n Curated tables are usually scheduled to run once every hour. The runtime of the data models can vary depending on the volume of transactions on any given day, therefore curated datasets are sometimes slower than the usual 1-hour target to update. \n \n ", "url": "https://docs.dune.com/data-catalog/data-freshness#curated-data"}
{"content": "\u200b Community Data \n Several notable 3rd party data providers are uploading their data into Dune. These data providers have their own update schedules and are not controlled by Dune. The data freshness of these providers can be found in the table below. \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/data-freshness) Data Catalog  (/data-catalog/overview) Bring your Data  (/data-catalog/bring-your-own-data) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Raw Data  (#raw-data) Blockchain Dependence  (#blockchain-dependence) Decoded Data  (#decoded-data) Curated Data  (#curated-data) Community Data  (#community-data)", "url": "https://docs.dune.com/data-catalog/data-freshness#community-data"}
{"content": "\u200b Overview \n Net USD transferred provides a measure of genuine economic activity across blockchain networks by tracking the actual movement of value between distinct entities. This metric implements sophisticated filtering mechanisms to distinguish meaningful transfers from artificial activity, offering insight into real economic impact. \n ", "url": "https://docs.dune.com/data-catalog/dune-index/net-transfers#overview"}
{"content": "\u200b Technical Significance \n Net transfers serve as a crucial indicator of blockchain utility by measuring actual value movement while filtering out noise. Unlike gross transfer volumes, which can be inflated through wash trading or circular transactions, net transfers focus on the ultimate economic impact of blockchain activity. \n The metric is particularly valuable because it requires significant economic resources to manipulate, making it a more reliable indicator of genuine activity compared to metrics like transaction count or total volume. \n ", "url": "https://docs.dune.com/data-catalog/dune-index/net-transfers#technical-significance"}
{"content": "\u200b Calculation Methodology \n The computation of net transfers follows a rigorous process: \n \n \n Address-Level Aggregation \n \n Track all value movements between addresses \n Calculate daily net position changes per address (inflows minus outflows) \n \n \n \n Filtering Criteria \n \n Minimum threshold of $1 to exclude dust transactions \n Removal of internal transactions from known contracts and protocols \n Exclusion of identified wash trading patterns \n Filtering of exploit-related transfers and known scam addresses \n \n \n \n Standardization \n \n Conversion to USD equivalent values using time-weighted average prices \n Normalization against baseline metrics for cross-chain comparison \n \n \n \n Transfers Metrics Code See the transfers metrics code for the technical implementation details.  (https://github.com/duneanalytics/spellbook/tree/main/dbt_subprojects/daily_spellbook/models/_metrics/transfers) \n ", "url": "https://docs.dune.com/data-catalog/dune-index/net-transfers#calculation-methodology"}
{"content": "\u200b Analytical Framework \n When interpreting net transfer data, consider several key aspects: \n \n \n Volume Patterns \n \n Analyze sustained periods of high net transfer volume \n Identify unusual spikes that may indicate large-scale events or anomalies \n \n \n \n Comparative Analysis \n \n Compare net transfers against gross transfer volume to detect wash trading \n Evaluate relationships with transaction counts and fee levels \n Monitor distribution patterns across different blockchain networks \n \n \n \n Network Effects \n \n Consider how network upgrades or protocol changes impact transfer patterns \n Analyze the impact of new DeFi protocols or applications on transfer volumes \n \n \n \n This metric provides valuable insight into blockchain adoption when analyzed alongside other components of the Dune Index, offering a more complete picture of meaningful network usage. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/dune-index/net-transfers) Transactions Fees  (/data-catalog/dune-index/gas-fees) Transactions  (/data-catalog/dune-index/transactions) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Overview  (#overview) Technical Significance  (#technical-significance) Calculation Methodology  (#calculation-methodology) Analytical Framework  (#analytical-framework)", "url": "https://docs.dune.com/data-catalog/dune-index/net-transfers#analytical-framework"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Executions and Results Get Latest Query Result in CSV Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Overview  (/api-reference/executions/execution-object) POST Execute Query  (/api-reference/executions/endpoint/execute-query) POST Cancel Execution  (/api-reference/executions/endpoint/cancel-execution) GET Get Execution Status  (/api-reference/executions/endpoint/get-execution-status) GET Get Execution Result  (/api-reference/executions/endpoint/get-execution-result) GET Get Execution Result in CSV  (/api-reference/executions/endpoint/get-execution-result-csv) GET Get Latest Query Result  (/api-reference/executions/endpoint/get-query-result) GET Get Latest Query Result in CSV  (/api-reference/executions/endpoint/get-query-result-csv) Queries Materialized Views Webhooks Data Management Endpoints Tables Preset Endpoints DEX EigenLayer EVM Contracts Farcaster Markets Projects Executions and Results Get Latest Query Result in CSV Given a query ID, returns the latest executed result of a query on Dune as CSV GET / v1 / query / {query_id} / results / csv Try it You must pass parameter query_id. \n Returns the latest execution id and results (in CSV) of that latest run, regardless of the job id/run or if it is run in the app or the api. \n The query specified must either be public or a query you have ownership of (you or a team you belong to have ownership). \n \n This endpoint does NOT trigger an execution but does  consume credits through datapoints  (https://dune.com/pricing) . \n Read more on  Filtering  (../filtering) ,  Sorting  (../sorting) , and  Sampling  (../sampling)  to learn more about flexibly grabbing query results. \n Read more on  Pagination  (../pagination)  to get the most out of the API and handle large results. \n \n \n Dune internally has a maximum query result size limit (which currently is 8GB, but subject to increase in the future). If your query yields more than 8GB of data, the result will be truncated in storage. In such cases, pulling the result data (using pagination) but without specifying  allow_partial_results  set to true will trigger an error message: \u201cerror\u201d: \u201cPartial Result, please request with \u2018allows_partial_results=true\u2019\u201d. If you wish to retrieve partial results, you can pass the parameter  allow_partial_results=true . But please make sure you indeed want to fetch the truncated result. \n \n Execute query and get result in one call  If you are using the  Python SDK  (https://github.com/duneanalytics/dune-client/tree/d2195b2a9577e2dcae5d2600cb3eddce20987f38) , you can directly executes and fetches result in one function call, like below:  Python SDK \n import  dotenv ,  os ,  json \n from  dune_client . types  import  QueryParameter \n from  dune_client . client  import  DuneClient \n from  dune_client . query  import  QueryBase \n \n # change the current working directory where .env file lives \n os . chdir ( \"/Users/abc/local-Workspace/python-notebook-examples\" ) \n # load .env file \n dotenv . load_dotenv ( \".env\" ) \n # setup Dune Python client \n dune  =  DuneClient . from_env ( ) \n \n Use  run_query  to get result in JSON,\n run_query_csv  to get result in CSV format,\nand  run_query_dataframe  to get result in Pandas dataframe \n result = dune.run_query( \n     query=query # pass in query to run  \n     , performance = 'large' # optionally define which tier to run the execution on (default is \"medium\") \n     ) \n \n \n Headers \u200b  (#parameter-x-dune-api-key) X-Dune-Api-Key string required API Key for the service Path Parameters \u200b  (#parameter-query-id) query_id string required Query ID Query Parameters \u200b  (#parameter-api-key) api_key string Alternative to using the X-Dune-Api-Key header \u200b  (#parameter-allow-partial-results) allow_partial_results boolean This enables returning a query result that was too large and only a partial result is\navailable. By default allow_partial_results is set to false and a failed state is returned. \u200b  (#parameter-columns) columns string Specifies a comma-separated list of column names to return. If omitted, all columns are included.\nTip: use this to limit the result to specific columns, reducing datapoints cost of the call. \u200b  (#parameter-filters) filters string Expression to filter out rows from the results to return. This expression is similar to\na SQL WHERE clause. More details about it in the Filtering section of the doc.\nThis parameter is incompatible with sample_count. \u200b  (#parameter-ignore-max-datapoints-per-request) ignore_max_datapoints_per_request boolean There is a default 250,000 datapoints limit to make sure you don't accidentally spend all\nyour credits in one call. To ignore the max limit, you can add\nignore_max_datapoints_per_request=true \u200b  (#parameter-limit) limit integer Limit number of rows to return. This together with 'offset' allows easy pagination through\nresults in an incremental and efficient way. This parameter is incompatible\nwith sampling (sample_count). \u200b  (#parameter-offset) offset integer Offset row number to start (inclusive, first row means offset=0) returning results\nfrom. This together with 'limit' allows easy pagination through results in an\nincremental and efficient way. This parameter is incompatible with sampling (sample_count). \u200b  (#parameter-query-id) queryID integer required \u200b  (#parameter-sample-count) sample_count integer Number of rows to return from the result by sampling the data. This is useful when you\nwant to get a uniform sample instead of the entire result. If the result has less\nthan the sample count, the entire result is returned. Note that this will return a\nrandomized sample, so not every call will return the same result. This parameter is\nincompatible with  offset ,  limit , and  filters  parameters. \u200b  (#parameter-sort-by) sort_by string Expression to define the order in which the results should be returned. This expression\nis similar to a SQL ORDER BY clause. More details about it in the Sorting section of the doc. Response 200 - text/plain The response is of type  string . Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/executions/endpoint/get-query-result-csv) Get Latest Query Result  (/api-reference/executions/endpoint/get-query-result) Overview  (/api-reference/queries/endpoint/query-object) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/api-reference/executions/endpoint/get-query-result-csv"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Result Filtering Sampling Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Pagination  (/api-reference/executions/pagination) Filtering  (/api-reference/executions/filtering) Sorting  (/api-reference/executions/sorting) Sampling  (/api-reference/executions/sampling) Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Queries Materialized Views Webhooks Data Management Endpoints Tables Preset Endpoints DEX EigenLayer EVM Contracts Farcaster Markets Projects Result Filtering Sampling Our API supports sampling on all  /results  endpoints to provide a uniform sample of the dataset for efficient data analysis and visualization. This feature is particularly useful for use cases like charting (if you only have 4 000 pixels on the chart, then 10 000 datapoints are plenty), where analyzing a full dataset isn\u2019t necessary. Sampling returns a subset (with a uniform distribution) of data, optimizing usage of very large results with reduced latency and costs. You can apply sampling to the following endpoints: \n \n Get Execution Results  (./endpoint/get-execution-result) \n Get Execution Results CSV  (./endpoint/get-execution-result-csv) \n Get Query Results  (./endpoint/get-query-result) \n Get Query Results CSV  (./endpoint/get-query-result-csv) \n \n \u200b  (#example-sampling-request) Example Sampling Request \n Python SDK cURL Python Javascript import  dotenv ,  os \n from  dune_client . types  import  QueryParameter \n from  dune_client . client  import  DuneClient \n from  dune_client . query  import  QueryBase \n \n os . chdir ( \"<path_to_your_dotevn_file>\" ) \n \n # load .env file \n dotenv . load_dotenv ( \".env\" ) \n # setup Dune Python client \n dune  =  DuneClient . from_env ( ) \n \n query_result  =  dune . get_latest_result_dataframe ( \n     query = 3582296   # https://dune.com/queries/3582296 -> OHLC Price \n      ,  sample_count  =   5000 \n )   \n \n print ( query_result ) \n \n \n ", "url": "https://docs.dune.com/api-reference/executions/sampling"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Executions and Results Cancel Execution Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Overview  (/api-reference/executions/execution-object) POST Execute Query  (/api-reference/executions/endpoint/execute-query) POST Cancel Execution  (/api-reference/executions/endpoint/cancel-execution) GET Get Execution Status  (/api-reference/executions/endpoint/get-execution-status) GET Get Execution Result  (/api-reference/executions/endpoint/get-execution-result) GET Get Execution Result in CSV  (/api-reference/executions/endpoint/get-execution-result-csv) GET Get Latest Query Result  (/api-reference/executions/endpoint/get-query-result) GET Get Latest Query Result in CSV  (/api-reference/executions/endpoint/get-query-result-csv) Queries Materialized Views Webhooks Data Management Endpoints Tables Preset Endpoints DEX EigenLayer EVM Contracts Farcaster Markets Projects Executions and Results Cancel Execution Cancel a triggered execution request given the execution ID POST / v1 / execution / {execution_id} / cancel Try it You must pass the  execution_id  obtained from making an  execute query  (/api-reference/executions/endpoint/execute-query)  POST request. \n Result returns a boolean for whether the execution is successfully canceled. \n Headers \u200b  (#parameter-x-dune-api-key) X-Dune-Api-Key string required API Key for the service Path Parameters \u200b  (#parameter-execution-id) execution_id string required The unique identifier of the execution Query Parameters \u200b  (#parameter-api-key) api_key string API Key, alternative to using the HTTP header X-Dune-Api-Key Response 200 - application/json \u200b  (#response-success) success boolean Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/executions/endpoint/cancel-execution) Execute Query  (/api-reference/executions/endpoint/execute-query) Get Execution Status  (/api-reference/executions/endpoint/get-execution-status) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/api-reference/executions/endpoint/cancel-execution"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Executions and Results Get Execution Result in CSV Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Overview  (/api-reference/executions/execution-object) POST Execute Query  (/api-reference/executions/endpoint/execute-query) POST Cancel Execution  (/api-reference/executions/endpoint/cancel-execution) GET Get Execution Status  (/api-reference/executions/endpoint/get-execution-status) GET Get Execution Result  (/api-reference/executions/endpoint/get-execution-result) GET Get Execution Result in CSV  (/api-reference/executions/endpoint/get-execution-result-csv) GET Get Latest Query Result  (/api-reference/executions/endpoint/get-query-result) GET Get Latest Query Result in CSV  (/api-reference/executions/endpoint/get-query-result-csv) Queries Materialized Views Webhooks Data Management Endpoints Tables Preset Endpoints DEX EigenLayer EVM Contracts Farcaster Markets Projects Executions and Results Get Execution Result in CSV Given a query ID, returns the latest executed result of a query on Dune in CSV format GET / v1 / execution / {execution_id} / results / csv Try it You must pass the  execution_id  obtained from making an  execute query  (/api-reference/executions/endpoint/execute-query)  POST request. \n Result returns the status, metadata, and query results (in CSV) from a query execution. \n \n Read more on  Filtering  (../filtering) ,  Sorting  (../sorting) , and  Sampling  (../sampling)  to learn more about flexibly grabbing query results. \n Read more on  Pagination  (../pagination)  to get the most out of the API and handle large results. \n \n \n Results data from an execution are stored with an expiration date of 90 days. This is visible on the API response on the \u201cexpires_at\u201d field in the execution status and results json body (not on the CSV endpoint). \n Dune internally has a maximum query result size limit (which currently is 8GB, but subject to increase in the future). If your query yields more than 8GB of data, the result will be truncated in storage. In such cases, pulling the result data (using pagination) but without specifying  allow_partial_results  set to true will trigger an error message: \u201cerror\u201d: \u201cPartial Result, please request with \u2018allows_partial_results=true\u2019\u201d. If you wish to retrieve partial results, you can pass the parameter  allow_partial_results=true . But please make sure you indeed want to fetch the truncated result. \n \n Execute query and get result in one call  If you are using the  Python SDK  (https://github.com/duneanalytics/dune-client/tree/d2195b2a9577e2dcae5d2600cb3eddce20987f38) , you can directly executes and fetches result in one function call, like below:  Python SDK \n import  dotenv ,  os ,  json \n from  dune_client . types  import  QueryParameter \n from  dune_client . client  import  DuneClient \n from  dune_client . query  import  QueryBase \n \n # change the current working directory where .env file lives \n os . chdir ( \"/Users/abc/local-Workspace/python-notebook-examples\" ) \n # load .env file \n dotenv . load_dotenv ( \".env\" ) \n # setup Dune Python client \n dune  =  DuneClient . from_env ( ) \n \n Use  run_query  to get result in JSON,\n run_query_csv  to get result in CSV format,\nand  run_query_dataframe  to get result in Pandas dataframe \n result = dune.run_query( \n     query=query # pass in query to run  \n     , performance = 'large' # optionally define which tier to run the execution on (default is \"medium\") \n     ) \n \n \n Headers \u200b  (#parameter-x-dune-api-key) X-Dune-Api-Key string required API Key for the service Path Parameters \u200b  (#parameter-execution-id) execution_id string required Execution ID Query Parameters \u200b  (#parameter-api-key) api_key string Alternative to using the X-Dune-Api-Key header \u200b  (#parameter-allow-partial-results) allow_partial_results boolean This enables returning a query result that was too large and only a partial result is\navailable. By default allow_partial_results is set to false and a failed state is returned. \u200b  (#parameter-columns) columns string Specifies a comma-separated list of column names to return. If omitted, all columns are included.\nTip: use this to limit the result to specific columns, reducing datapoints cost of the call. \u200b  (#parameter-execution-id) execution_id string required \u200b  (#parameter-filters) filters string Expression to filter out rows from the results to return. This expression is similar to\na SQL WHERE clause. More details about it in the Filtering section of the doc.\nThis parameter is incompatible with sample_count. \u200b  (#parameter-ignore-max-datapoints-per-request) ignore_max_datapoints_per_request boolean There is a default 250,000 datapoints limit to make sure you don't accidentally spend all\nyour credits in one call. To ignore the max limit, you can add\nignore_max_datapoints_per_request=true \u200b  (#parameter-limit) limit integer Limit number of rows to return. This together with 'offset' allows easy pagination through\nresults in an incremental and efficient way. This parameter is incompatible\nwith sampling (sample_count). \u200b  (#parameter-offset) offset integer Offset row number to start (inclusive, first row means offset=0) returning results\nfrom. This together with 'limit' allows easy pagination through results in an\nincremental and efficient way. This parameter is incompatible with sampling (sample_count). \u200b  (#parameter-sample-count) sample_count integer Number of rows to return from the result by sampling the data. This is useful when you\nwant to get a uniform sample instead of the entire result. If the result has less\nthan the sample count, the entire result is returned. Note that this will return a\nrandomized sample, so not every call will return the same result. This parameter is\nincompatible with  offset ,  limit , and  filters  parameters. \u200b  (#parameter-sort-by) sort_by string Expression to define the order in which the results should be returned. This expression\nis similar to a SQL ORDER BY clause. More details about it in the Sorting section of the doc. Response 200 - text/plain The response is of type  string . Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/executions/endpoint/get-execution-result-csv) Get Execution Result  (/api-reference/executions/endpoint/get-execution-result) Get Latest Query Result  (/api-reference/executions/endpoint/get-query-result) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/api-reference/executions/endpoint/get-execution-result-csv"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Result Filtering Sorting Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Pagination  (/api-reference/executions/pagination) Filtering  (/api-reference/executions/filtering) Sorting  (/api-reference/executions/sorting) Sampling  (/api-reference/executions/sampling) Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Queries Materialized Views Webhooks Data Management Endpoints Tables Preset Endpoints DEX EigenLayer EVM Contracts Farcaster Markets Projects Result Filtering Sorting Our API allows for sorting on all  /results  endpoints to organize query results in a specified order. This sorting functionality enables users to retrieve data in a manner that best suits their needs, whether ascending or descending. The feature is designed to work in a similar fashion to a SQL  ORDER BY  clause and is available for the following endpoints: \n \n Get Execution Results  (./endpoint/get-execution-result) \n Get Execution Results CSV  (./endpoint/get-execution-result-csv) \n Get Query Results  (./endpoint/get-query-result) \n Get Query Results CSV  (./endpoint/get-query-result-csv) \n \n Sorting can be effectively combined with  pagination  (./pagination) ,  filtering  (./filtering)  and  sampling  (./sampling)  to optimize data retrieval. \n \u200b  (#example-sorting-request) Example Sorting Request \n Python SDK cURL Python Javascript Go PHP Java import  dotenv ,  os \n from  dune_client . types  import  QueryParameter \n from  dune_client . client  import  DuneClient \n from  dune_client . query  import  QueryBase \n \n os . chdir ( \"<path_to_your_dotevn_file>\" ) \n \n # load .env file \n dotenv . load_dotenv ( \".env\" ) \n # setup Dune Python client \n dune  =  DuneClient . from_env ( ) \n \n query_result  =  dune . get_latest_result_dataframe ( \n     query = 3567562   # https://dune.com/queries/3567562 \n      ,  filters = \"overtip_amount > 0\" \n      ,  columns = [ \"donor_fname\" , \"overtip_amount\" , \"days_overtipped\" , \"overall_tip_given_amount\" , \"overall_avg_tip_amount\" ] \n      ,  sort_by = [ \"overall_tip_given_amount desc\" ] \n )   \n \n print ( query_result ) \n \n \n ", "url": "https://docs.dune.com/api-reference/executions/sorting"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Executions and Results Get Execution Result Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Overview  (/api-reference/executions/execution-object) POST Execute Query  (/api-reference/executions/endpoint/execute-query) POST Cancel Execution  (/api-reference/executions/endpoint/cancel-execution) GET Get Execution Status  (/api-reference/executions/endpoint/get-execution-status) GET Get Execution Result  (/api-reference/executions/endpoint/get-execution-result) GET Get Execution Result in CSV  (/api-reference/executions/endpoint/get-execution-result-csv) GET Get Latest Query Result  (/api-reference/executions/endpoint/get-query-result) GET Get Latest Query Result in CSV  (/api-reference/executions/endpoint/get-query-result-csv) Queries Materialized Views Webhooks Data Management Endpoints Tables Preset Endpoints DEX EigenLayer EVM Contracts Farcaster Markets Projects Executions and Results Get Execution Result Given an execution ID, returns result of a an execution request GET / v1 / execution / {execution_id} / results Try it You must pass the  execution_id  obtained from making an  execute query  (/api-reference/executions/endpoint/execute-query)  POST request. \n Result returns the status, metadata, and query results (in JSON) from a query execution. \n \n Read more on  Filtering  (../filtering) ,  Sorting  (../sorting) , and  Sampling  (../sampling)  to learn more about flexibly grabbing query results. \n Read more on  Pagination  (../pagination)  to get the most out of the API and handle large results. \n \n \n Results data from an execution are stored for 90 days. This is visible on the API response on the \u201cexpires_at\u201d field in the execution status and results body. \n Dune internally has a maximum query result size limit (which currently is 8GB, but subject to increase in the future). If your query yields more than 8GB of data, the result will be truncated in storage. In such cases, pulling the result data (using pagination) but without specifying  allow_partial_results  set to true will trigger an error message: \u201cerror\u201d: \u201cPartial Result, please request with \u2018allows_partial_results=true\u2019\u201d. If you wish to retrieve partial results, you can pass the parameter  allow_partial_results=true . But please make sure you indeed want to fetch the truncated result. \n \n Execute query and get result in one call  If you are using the  Python SDK  (https://github.com/duneanalytics/dune-client/tree/d2195b2a9577e2dcae5d2600cb3eddce20987f38)  or community  Typescript SDK  (https://github.com/bh2smith/ts-dune-client) , you can directly execute and fetch a result in one function call, like below:  Python SDK Typescript SDK \n import  dotenv ,  os ,  json \n from  dune_client . types  import  QueryParameter \n from  dune_client . client  import  DuneClient \n from  dune_client . query  import  QueryBase \n \n # change the current working directory where .env file lives \n os . chdir ( \"/Users/abc/local-Workspace/python-notebook-examples\" ) \n # load .env file \n dotenv . load_dotenv ( \".env\" ) \n # setup Dune Python client \n dune  =  DuneClient . from_env ( ) \n \n Use  run_query  to get result in JSON,\n run_query_csv  to get result in CSV format,\nand  run_query_dataframe  to get result in Pandas dataframe \n result = dune.run_query( \n     query=query # pass in query to run  \n     , performance = 'large' # optionally define which tier to run the execution on (default is \"medium\") \n     ) \n \n \n Headers \u200b  (#parameter-x-dune-api-key) X-Dune-Api-Key string required API Key for the service Path Parameters \u200b  (#parameter-execution-id) execution_id string required Execution ID Query Parameters \u200b  (#parameter-api-key) api_key string Alternative to using the X-Dune-Api-Key header \u200b  (#parameter-allow-partial-results) allow_partial_results boolean This enables returning a query result that was too large and only a partial result is\navailable. By default allow_partial_results is set to false and a failed state is returned. \u200b  (#parameter-columns) columns string Specifies a comma-separated list of column names to return. If omitted, all columns are included.\nTip: use this to limit the result to specific columns, reducing datapoints cost of the call. \u200b  (#parameter-execution-id) execution_id string required \u200b  (#parameter-filters) filters string Expression to filter out rows from the results to return. This expression is similar to\na SQL WHERE clause. More details about it in the Filtering section of the doc.\nThis parameter is incompatible with sample_count. \u200b  (#parameter-ignore-max-datapoints-per-request) ignore_max_datapoints_per_request boolean There is a default 250,000 datapoints limit to make sure you don't accidentally spend all\nyour credits in one call. To ignore the max limit, you can add\nignore_max_datapoints_per_request=true \u200b  (#parameter-limit) limit integer Limit number of rows to return. This together with 'offset' allows easy pagination through\nresults in an incremental and efficient way. This parameter is incompatible\nwith sampling (sample_count). \u200b  (#parameter-offset) offset integer Offset row number to start (inclusive, first row means offset=0) returning results\nfrom. This together with 'limit' allows easy pagination through results in an\nincremental and efficient way. This parameter is incompatible with sampling (sample_count). \u200b  (#parameter-sample-count) sample_count integer Number of rows to return from the result by sampling the data. This is useful when you\nwant to get a uniform sample instead of the entire result. If the result has less\nthan the sample count, the entire result is returned. Note that this will return a\nrandomized sample, so not every call will return the same result. This parameter is\nincompatible with  offset ,  limit , and  filters  parameters. \u200b  (#parameter-sort-by) sort_by string Expression to define the order in which the results should be returned. This expression\nis similar to a SQL ORDER BY clause. More details about it in the Sorting section of the doc. Response 200 - application/json \u200b  (#response-cancelled-at) cancelled_at string Timestamp of when the query execution was cancelled, if applicable. \u200b  (#response-execution-ended-at) execution_ended_at string Timestamp of when the query execution ended. \u200b  (#response-execution-id) execution_id string Unique identifier for the execution of the query. \u200b  (#response-execution-started-at) execution_started_at string Timestamp of when the query execution started. \u200b  (#response-expires-at) expires_at string Timestamp of when the query result expires. \u200b  (#response-is-execution-finished) is_execution_finished boolean Whether the state of the query execution is terminal. This can be used for polling purposes. \u200b  (#response-next-offset) next_offset integer Offset that can be used to retrieve the next page of results. \u200b  (#response-next-uri) next_uri string URI that can be used to fetch the next page of results. \u200b  (#response-query-id) query_id integer Unique identifier of the query. \u200b  (#response-result) result object The object containing the results and metadata of the query execution Show   child attributes \u200b  (#response-result-metadata) result. metadata object Metadata about the execution of the query, including details like column names,\nrow counts, and execution times. Show   child attributes \u200b  (#response-result-metadata-column-names) result.metadata. column_names string[] Names of the columns in the result set. \u200b  (#response-result-metadata-column-types) result.metadata. column_types string[] Types of the columns in the result set. \u200b  (#response-result-metadata-datapoint-count) result.metadata. datapoint_count integer Results cell count is used for billing/pricing plans\nhere we expose the these values to the user, so that they can track their costs \u200b  (#response-result-metadata-execution-time-millis) result.metadata. execution_time_millis integer Time in milliseconds that the query took to execute. \u200b  (#response-result-metadata-pending-time-millis) result.metadata. pending_time_millis integer Time in milliseconds that the query was pending before execution. \u200b  (#response-result-metadata-result-set-bytes) result.metadata. result_set_bytes integer ResultSetBytes represents the raw data bytes returned by the SQL execution engine, it includes: \n \n total nr of bytes used on 1 line with all the column names (the header of the result set) \n total nr of bytes for all the row values (the result set of rows) \n \n it doesn't include overheads such as the presence of column names for every row in the JSON result type.\nit also doesn't include opmitizations such as compression \u200b  (#response-result-metadata-row-count) result.metadata. row_count integer Number of rows in the result set for the current page of results. \u200b  (#response-result-metadata-total-result-set-bytes) result.metadata. total_result_set_bytes integer Total number of bytes in the result set. This doesn't include the json representation overhead. \u200b  (#response-result-metadata-total-row-count) result.metadata. total_row_count integer Number of rows in the result set for the entire result set. \u200b  (#response-result-rows) result. rows object[] A list of rows. A row is dictionary of key-value pairs returned by the query,\neach pair corresponding to a column Show   child attributes \u200b  (#response-result-rows-key) result.rows. {key} object \u200b  (#response-state) state string The state of the query execution. \u200b  (#response-submitted-at) submitted_at string Timestamp of when the query was submitted. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/executions/endpoint/get-execution-result) Get Execution Status  (/api-reference/executions/endpoint/get-execution-status) Get Execution Result in CSV  (/api-reference/executions/endpoint/get-execution-result-csv) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/api-reference/executions/endpoint/get-execution-result"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Executions and Results Execute Query Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Overview  (/api-reference/executions/execution-object) POST Execute Query  (/api-reference/executions/endpoint/execute-query) POST Cancel Execution  (/api-reference/executions/endpoint/cancel-execution) GET Get Execution Status  (/api-reference/executions/endpoint/get-execution-status) GET Get Execution Result  (/api-reference/executions/endpoint/get-execution-result) GET Get Execution Result in CSV  (/api-reference/executions/endpoint/get-execution-result-csv) GET Get Latest Query Result  (/api-reference/executions/endpoint/get-query-result) GET Get Latest Query Result in CSV  (/api-reference/executions/endpoint/get-query-result-csv) Queries Materialized Views Webhooks Data Management Endpoints Tables Preset Endpoints DEX EigenLayer EVM Contracts Farcaster Markets Projects Executions and Results Execute Query Execute, or run a query for the specified query ID POST / v1 / query / {query_id} / execute Try it Execute query and get result in one call  If you are using the  Python SDK  (https://github.com/duneanalytics/dune-client/tree/d2195b2a9577e2dcae5d2600cb3eddce20987f38) , you can directly executes and fetches result in one function call, like below:  Use  run_query  to get result in JSON,\n run_query_csv  to get result in CSV format,\nand  run_query_dataframe  to get result in Pandas dataframe Python SDK \n import  dotenv ,  os ,  json \n from  dune_client . types  import  QueryParameter \n from  dune_client . client  import  DuneClient \n from  dune_client . query  import  QueryBase \n \n # change the current working directory where .env file lives \n os . chdir ( \"/Users/abc/local-Workspace/python-notebook-examples\" ) \n # load .env file \n dotenv . load_dotenv ( \".env\" ) \n # setup Dune Python client \n dune  =  DuneClient . from_env ( ) \n \n query  =  QueryBase ( \n     name = \"Sample Query\" , \n     query_id = 1215383 , \n ) \n \n result  =  dune . run_query ( \n     query  =  query , \n     performance  =   'large'   # optionally define which tier to run the execution on (default is \"medium\") \n ) \n \n # go over the results returned \n for  row  in  result . result . rows :   \n      print   ( row )   # as an example we print the rows \n \n If the query has parameters and you don\u2019t add them in your API call, it will just run with the default params. You may add query parameters as part of the POST params data. \n You can choose to include a  performance  parameter, by default it will use the \u201cmedium\u201d performance tier which consumes 10 credits. \u201clarge\u201d will use 20 credits and are faster. \n Returns an execution_id associated with the triggered query execution and the state of the execution. \n Headers \u200b  (#parameter-x-dune-api-key) X-Dune-Api-Key string required API Key for the service Path Parameters \u200b  (#parameter-query-id) query_id integer required Unique identifier of the query Query Parameters \u200b  (#parameter-api-key) api_key string Alternative to using the X-Dune-Api-Key header \u200b  (#parameter-performance) performance enum<string> The performance engine tier the execution will be run on. Can be either  medium  or  large . Medium consumes 10 credits, and large consumes 20 credits, per run. Default is  medium . Available options:   medium ,   large   \u200b  (#parameter-query-parameters) query_parameters string SQL Query parameters in json key-value pairs. Each parameter is to be provided in key-value pairs. This enables you to execute a parameterized query with the provided values for your parameter keys. Partial submission of parameters is allowed. For example, if the query expects three parameters and you only pass in two, the third one will automatically use its default value as defined in the Query Parameter Editor page. Response 200 - application/json \u200b  (#response-execution-id) execution_id string \u200b  (#response-state) state string Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/executions/endpoint/execute-query) Overview  (/api-reference/executions/execution-object) Cancel Execution  (/api-reference/executions/endpoint/cancel-execution) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/api-reference/executions/endpoint/execute-query"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Executions and Results Get Execution Status Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Overview  (/api-reference/executions/execution-object) POST Execute Query  (/api-reference/executions/endpoint/execute-query) POST Cancel Execution  (/api-reference/executions/endpoint/cancel-execution) GET Get Execution Status  (/api-reference/executions/endpoint/get-execution-status) GET Get Execution Result  (/api-reference/executions/endpoint/get-execution-result) GET Get Execution Result in CSV  (/api-reference/executions/endpoint/get-execution-result-csv) GET Get Latest Query Result  (/api-reference/executions/endpoint/get-query-result) GET Get Latest Query Result in CSV  (/api-reference/executions/endpoint/get-query-result-csv) Queries Materialized Views Webhooks Data Management Endpoints Tables Preset Endpoints DEX EigenLayer EVM Contracts Farcaster Markets Projects Executions and Results Get Execution Status Check the status of an execution request GET / v1 / execution / {execution_id} / status Try it You must pass the  execution_id  obtained from making an  execute query  (/api-reference/executions/endpoint/execute-query)  POST request. \n Returns the status of a query execution along with relevant metadata of the results if the execution is completed. \n ", "url": "https://docs.dune.com/api-reference/executions/endpoint/get-execution-status"}
{"content": "\u200b Sampling Parameters \n \u200b  (#sample-count) sample_count \n \n Type:   integer \n Description:  Determines the number of rows to return as a sample from the result set. If the available dataset contains fewer rows than the specified  sample_count , the entire dataset is returned. \n \n \n Sampling is designed to provide a randomized subset of data, with each request potentially producing different outcomes. \n When specifying  sample_count  (e.g.,  sample_count = 10000 ), the number is approximate. The actual number of rows returned may vary slightly (e.g., 10013, 10017), reflecting the probabilistic nature of the sampling process. \n sample_count  is incompatible with  offset ,  limit , and  filters  parameters. \n sample_count  can be used with  columns  to specify which data fields to include in the sample. \n Specifying a low  sample_count  relative to total rows, being probabilistic, may return 0 rows due to the probability based sampling calculation (e.g., 10 in 100,000, means each row has ~0.01% chance to be included) \n \n ", "url": "https://docs.dune.com/api-reference/executions/sampling#sampling-parameters"}
{"content": "\u200b Sampling Response \n Example sampling response Showing trimmed response for  sample_count=200  instead of specified  sample_count=10000  in example request to not overwhelm the doc.      { \n          \"execution_id\" :   \"01HR8D39V7N8WM653SVDW2G9WB\" , \n          \"query_id\" :   3494402 , \n          \"is_execution_finished\" :   true , \n          \"state\" :   \"QUERY_STATE_COMPLETED\" , \n          \"submitted_at\" :   \"2024-03-05T22:52:39.144099Z\" , \n          \"expires_at\" :   \"2024-06-03T22:54:03.004092Z\" , \n          \"execution_started_at\" :   \"2024-03-05T22:52:39.348798256Z\" , \n          \"execution_ended_at\" :   \"2024-03-05T22:54:03.00409093Z\" , \n          \"result\" :   { \n              \"rows\" :   [ \n                  { \n                      \"amount_usd\" :   28.517144710689454 , \n                      \"block_time\" :   \"2024-03-02 12:51:19.000 UTC\" , \n                      \"blockchain\" :   \"bnb\" \n                  } , \n                  { \n                      \"amount_usd\" :   4892.433 , \n                      \"block_time\" :   \"2024-03-05 13:42:59.000 UTC\" , \n                      \"blockchain\" :   \"ethereum\" \n                  } , \n                  { \n                      \"amount_usd\" :   31.579160400723985 , \n                      \"block_time\" :   \"2024-03-04 20:17:56.000 UTC\" , \n                      \"blockchain\" :   \"bnb\" \n                  } , \n                  { \n                      \"amount_usd\" :   84.162 , \n                      \"block_time\" :   \"2024-03-05 07:26:54.000 UTC\" , \n                      \"blockchain\" :   \"bnb\" \n                  } , \n                  { \n                      \"amount_usd\" :   1.5276341414539407 , \n                      \"block_time\" :   \"2024-03-03 12:32:44.000 UTC\" , \n                      \"blockchain\" :   \"bnb\" \n                  } , \n                  { \n                      \"amount_usd\" :   876.1714568508686 , \n                      \"block_time\" :   \"2024-03-05 02:14:47.000 UTC\" , \n                      \"blockchain\" :   \"fantom\" \n                  } , \n                  { \n                      \"amount_usd\" :   4529.057 , \n                      \"block_time\" :   \"2024-03-04 00:18:11.000 UTC\" , \n                      \"blockchain\" :   \"ethereum\" \n                  } , \n                  { \n                      \"amount_usd\" :   201.94357555355361 , \n                      \"block_time\" :   \"2024-02-25 22:33:23.000 UTC\" , \n                      \"blockchain\" :   \"ethereum\" \n                  } , \n                  { \n                      \"amount_usd\" :   145.27394384575086 , \n                      \"block_time\" :   \"2024-03-04 10:54:32.000 UTC\" , \n                      \"blockchain\" :   \"bnb\" \n                  } , \n                  { \n                      \"amount_usd\" :   1070.7173780527592 , \n                      \"block_time\" :   \"2024-03-04 13:57:21.000 UTC\" , \n                      \"blockchain\" :   \"bnb\" \n                  } , \n                  { \n                      \"amount_usd\" :   223.82524240905198 , \n                      \"block_time\" :   \"2024-03-02 08:31:15.000 UTC\" , \n                      \"blockchain\" :   \"polygon\" \n                  } , \n                  { \n                      \"amount_usd\" :   1950.3639893741088 , \n                      \"block_time\" :   \"2024-03-03 05:09:47.000 UTC\" , \n                      \"blockchain\" :   \"ethereum\" \n                  } , \n                  { \n                      \"amount_usd\" :   719.5529722030446 , \n                      \"block_time\" :   \"2024-03-05 09:27:23.000 UTC\" , \n                      \"blockchain\" :   \"bnb\" \n                  } , \n                  { \n                      \"amount_usd\" :   6.89141479932381 , \n                      \"block_time\" :   \"2024-03-01 03:35:39.000 UTC\" , \n                      \"blockchain\" :   \"bnb\" \n                  } , \n                  { \n                      \"amount_usd\" :   368.6550396139464 , \n                      \"block_time\" :   \"2024-03-04 11:05:35.000 UTC\" , \n                      \"blockchain\" :   \"bnb\" \n                  } , \n                  { \n                      \"amount_usd\" :   105.21798800684901 , \n                      \"block_time\" :   \"2024-03-05 16:04:47.000 UTC\" , \n                      \"blockchain\" :   \"bnb\" \n                  } , \n                  { \n                      \"amount_usd\" :   31.17956089030626 , \n                      \"block_time\" :   \"2024-03-05 18:17:05.000 UTC\" , \n                      \"blockchain\" :   \"polygon\" \n                  } , \n                  { \n                      \"amount_usd\" :   43.21002361278373 , \n                      \"block_time\" :   \"2024-03-03 14:40:21.000 UTC\" , \n                      \"blockchain\" :   \"bnb\" \n                  } , \n                  { \n                      \"amount_usd\" :   1448.8800596106462 , \n                      \"block_time\" :   \"2024-03-02 12:47:21.000 UTC\" , \n                      \"blockchain\" :   \"base\" \n                  } , \n                  { \n                      \"amount_usd\" :   0.01001462 , \n                      \"block_time\" :   \"2024-03-03 02:18:02.000 UTC\" , \n                      \"blockchain\" :   \"bnb\" \n                  } , \n                  { \n                      \"amount_usd\" :   43.94295029931569 , \n                      \"block_time\" :   \"2024-03-02 13:25:28.000 UTC\" , \n                      \"blockchain\" :   \"bnb\" \n                  } , \n                  { \n                      \"amount_usd\" :   608.562 , \n                      \"block_time\" :   \"2024-02-25 13:13:11.000 UTC\" , \n                      \"blockchain\" :   \"ethereum\" \n                  } , \n                  { \n                      \"amount_usd\" :   85.02994808708173 , \n                      \"block_time\" :   \"2024-02-25 15:36:48.000 UTC\" , \n                      \"blockchain\" :   \"bnb\" \n                  } , \n                  { \n                      \"amount_usd\" :   2849.089609803931 , \n                      \"block_time\" :   \"2024-02-25 21:21:23.000 UTC\" , \n                      \"blockchain\" :   \"ethereum\" \n                  } , \n                  { \n                      \"amount_usd\" :   742.1382966435165 , \n                      \"block_time\" :   \"2024-02-26 09:23:10.000 UTC\" , \n                      \"blockchain\" :   \"bnb\" \n                  } , \n                  { \n                      \"amount_usd\" :   1523.857600998093 , \n                      \"block_time\" :   \"2024-02-26 21:29:40.000 UTC\" , \n                      \"blockchain\" :   \"bnb\" \n                  } , \n                  { \n                      \"amount_usd\" :   1.000853 , \n                      \"block_time\" :   \"2024-02-25 22:25:16.000 UTC\" , \n                      \"blockchain\" :   \"bnb\" \n                  } , \n                  { \n                      \"amount_usd\" :   187.32483603639648 , \n                      \"block_time\" :   \"2024-02-26 05:38:59.000 UTC\" , \n                      \"blockchain\" :   \"ethereum\" \n                  } , \n                  { \n                      \"amount_usd\" :   9.365232080867631 , \n                      \"block_time\" :   \"2024-03-04 21:59:33.000 UTC\" , \n                      \"blockchain\" :   \"polygon\" \n                  } , \n                  { \n                      \"amount_usd\" :   7.85318483149416 , \n                      \"block_time\" :   \"2024-02-28 02:39:53.000 UTC\" , \n                      \"blockchain\" :   \"bnb\" \n                  } , \n                  { \n                      \"amount_usd\" :   62.43033115744735 , \n                      \"block_time\" :   \"2024-02-27 06:40:47.000 UTC\" , \n                      \"blockchain\" :   \"base\" \n                  } , \n                  { \n                      \"amount_usd\" :   245.49353625178662 , \n                      \"block_time\" :   \"2024-02-27 08:02:35.000 UTC\" , \n                      \"blockchain\" :   \"bnb\" \n                  } , \n                  { \n                      \"amount_usd\" :   2.1101359357968 , \n                      \"block_time\" :   \"2024-02-28 17:24:20.000 UTC\" , \n                      \"blockchain\" :   \"polygon\" \n                  } , \n                  { \n                      \"amount_usd\" :   887.988462523146 , \n                      \"block_time\" :   \"2024-02-29 08:56:34.000 UTC\" , \n                      \"blockchain\" :   \"polygon\" \n                  } , \n                  { \n                      \"amount_usd\" :   null , \n                      \"block_time\" :   \"2024-02-27 16:20:57.000 UTC\" , \n                      \"blockchain\" :   \"optimism\" \n                  } , \n                  { \n                      \"amount_usd\" :   0.9971501669140281 , \n                      \"block_time\" :   \"2024-03-05 20:28:38.000 UTC\" , \n                      \"blockchain\" :   \"polygon\" \n                  } , \n                  { \n                      \"amount_usd\" :   16.03705776420069 , \n                      \"block_time\" :   \"2024-03-03 23:27:03.000 UTC\" , \n                      \"blockchain\" :   \"base\" \n                  } , \n                  { \n                      \"amount_usd\" :   5.38636576521727 , \n                      \"block_time\" :   \"2024-03-01 23:00:13.000 UTC\" , \n                      \"blockchain\" :   \"base\" \n                  } , \n                  { \n                      \"amount_usd\" :   30.130297357061917 , \n                      \"block_time\" :   \"2024-02-27 02:20:07.000 UTC\" , \n                      \"blockchain\" :   \"bnb\" \n                  } \n              ] , \n              \"metadata\" :   { \n                  \"column_names\" :   [ \n                      \"blockchain\" , \n                      \"block_time\" , \n                      \"amount_usd\" \n                  ] , \n                  \"row_count\" :   213 , \n                  \"result_set_bytes\" :   12119 , \n                  \"total_row_count\" :   22325371 , \n                  \"total_result_set_bytes\" :   1175314615 , \n                  \"datapoint_count\" :   639 , \n                  \"pending_time_millis\" :   204 , \n                  \"execution_time_millis\" :   83655 \n              } \n          } \n      } \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/executions/sampling) Sorting  (/api-reference/executions/sorting) Rate Limits  (/api-reference/overview/rate-limits) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Example Sampling Request  (#example-sampling-request) Sampling Parameters  (#sampling-parameters) sample_count  (#sample-count) Sampling Response  (#sampling-response)", "url": "https://docs.dune.com/api-reference/executions/sampling#sampling-response"}
{"content": "\u200b Sorting Parameters \n \u200b  (#sort-by) sort_by \n \n Type:   string \n Description:  Specifies the order in which query results are returned. It directly mirrors the functionality of an SQL  ORDER BY  clause. \n \n \n Specify the sorting criteria using the format  <column_name> asc|desc . For example,  block_time desc . \n If a column name contains special characters, enclose it in double quotes, e.g.,  \"special,column\" asc . \n You can sort by multiple columns by separating them with a comma, exactly like in SQL. For instance,  amount_usd desc, block_time . \n By default, sorting is in ascending order if not explicitly specified. Explicitly include  asc  or  desc  to define the sorting order. \n \n ", "url": "https://docs.dune.com/api-reference/executions/sorting#sorting-parameters"}
{"content": "\u200b Sorted Response \n Example sorted response      { \n          \"execution_id\" :   \"01HR8AGD6CWGHGP1BN3Z1SJ4MD\" , \n          \"query_id\" :   3493826 , \n          \"is_execution_finished\" :   true , \n          \"state\" :   \"QUERY_STATE_COMPLETED\" , \n          \"submitted_at\" :   \"2024-03-05T22:07:22.828653Z\" , \n          \"expires_at\" :   \"2024-06-03T22:07:53.36647Z\" , \n          \"execution_started_at\" :   \"2024-03-05T22:07:24.013663281Z\" , \n          \"execution_ended_at\" :   \"2024-03-05T22:07:53.366469062Z\" , \n          \"result\" :   { \n              \"rows\" :   [ \n                  { \n                      \"amount_usd\" :   null , \n                      \"block_time\" :   \"2024-03-05 20:50:59.000 UTC\" , \n                      \"tx_from\" :   \"0x38032f326436fdb9c7a9b359e90010f86b8ab482\" , \n                      \"tx_hash\" :   \"0xce6f59cf2f0b395d8fc33e49d1f5db5686be95555135fd8126bc7c59327cd9be\" , \n                      \"tx_to\" :   \"0x061b87122ed14b9526a813209c8a59a633257bab\" \n                  } , \n                  { \n                      \"amount_usd\" :   null , \n                      \"block_time\" :   \"2024-03-05 20:49:33.000 UTC\" , \n                      \"tx_from\" :   \"0xb46b909be665d75f833be22c6e6285ba5ad74dfa\" , \n                      \"tx_hash\" :   \"0x1f1725ebe374b1ffb50047055b793b2be6a8cb07ab75fd685b95e842953da4ca\" , \n                      \"tx_to\" :   \"0x1111111254eeb25477b68fb85ed929f73a960582\" \n                  } , \n                  { \n                      \"amount_usd\" :   null , \n                      \"block_time\" :   \"2024-03-05 20:48:53.000 UTC\" , \n                      \"tx_from\" :   \"0x40014275b332f38423fa0de39939d26c7294ffc0\" , \n                      \"tx_hash\" :   \"0xb4364656c20007fb1d7bfa93d87fc6fe345a91b10661835d1a54d1ac7761a244\" , \n                      \"tx_to\" :   \"0x1111111254eeb25477b68fb85ed929f73a960582\" \n                  } , \n                  { \n                      \"amount_usd\" :   1397.903560808159 , \n                      \"block_time\" :   \"2024-03-05 20:48:03.000 UTC\" , \n                      \"tx_from\" :   \"0xb46b909be665d75f833be22c6e6285ba5ad74dfa\" , \n                      \"tx_hash\" :   \"0x818f701a6c7dcf78a090cfd8324da5896005c2a6d8e3ec5ac2c29cfa5e67f5d9\" , \n                      \"tx_to\" :   \"0x1111111254eeb25477b68fb85ed929f73a960582\" \n                  } , \n                  { \n                      \"amount_usd\" :   null , \n                      \"block_time\" :   \"2024-03-05 20:47:55.000 UTC\" , \n                      \"tx_from\" :   \"0x50758bdc1735e94401ed73eb7e8bde482766819c\" , \n                      \"tx_hash\" :   \"0x1dc342dc397ffa7b433fa64280fe9f4a7e0b51409e9abc9fde61bc9b85c938be\" , \n                      \"tx_to\" :   \"0x4c4af8dbc524681930a27b2f1af5bcc8062e6fb7\" \n                  } , \n                  { \n                      \"amount_usd\" :   null , \n                      \"block_time\" :   \"2024-03-05 20:47:55.000 UTC\" , \n                      \"tx_from\" :   \"0x50758bdc1735e94401ed73eb7e8bde482766819c\" , \n                      \"tx_hash\" :   \"0x1dc342dc397ffa7b433fa64280fe9f4a7e0b51409e9abc9fde61bc9b85c938be\" , \n                      \"tx_to\" :   \"0x4c4af8dbc524681930a27b2f1af5bcc8062e6fb7\" \n                  } , \n                  { \n                      \"amount_usd\" :   null , \n                      \"block_time\" :   \"2024-03-05 20:47:53.000 UTC\" , \n                      \"tx_from\" :   \"0xfa3dc8db10e7c2f7dfa87e86bba6257066731bc1\" , \n                      \"tx_hash\" :   \"0x0d34634a9438ce241e2870b23e70a008c8db839ba38daadc1074c9b1a52be7c7\" , \n                      \"tx_to\" :   \"0xba12222222228d8ba445958a75a0704d566bf2c8\" \n                  } , \n                  { \n                      \"amount_usd\" :   2.753641952846242 , \n                      \"block_time\" :   \"2024-03-05 20:47:53.000 UTC\" , \n                      \"tx_from\" :   \"0xfa3dc8db10e7c2f7dfa87e86bba6257066731bc1\" , \n                      \"tx_hash\" :   \"0x0d34634a9438ce241e2870b23e70a008c8db839ba38daadc1074c9b1a52be7c7\" , \n                      \"tx_to\" :   \"0xba12222222228d8ba445958a75a0704d566bf2c8\" \n                  } , \n                  { \n                      \"amount_usd\" :   null , \n                      \"block_time\" :   \"2024-03-05 20:47:53.000 UTC\" , \n                      \"tx_from\" :   \"0xfa3dc8db10e7c2f7dfa87e86bba6257066731bc1\" , \n                      \"tx_hash\" :   \"0x0d34634a9438ce241e2870b23e70a008c8db839ba38daadc1074c9b1a52be7c7\" , \n                      \"tx_to\" :   \"0xba12222222228d8ba445958a75a0704d566bf2c8\" \n                  } , \n                  { \n                      \"amount_usd\" :   1798.8186143812122 , \n                      \"block_time\" :   \"2024-03-05 20:47:49.000 UTC\" , \n                      \"tx_from\" :   \"0xb46b909be665d75f833be22c6e6285ba5ad74dfa\" , \n                      \"tx_hash\" :   \"0xcf8d9873f017a8ba9e624c3bb61bede8e11c194965690026cd394f20c55f896a\" , \n                      \"tx_to\" :   \"0x1111111254eeb25477b68fb85ed929f73a960582\" \n                  } \n              ] , \n              \"metadata\" :   { \n                  \"column_names\" :   [ \n                      \"block_time\" , \n                      \"tx_from\" , \n                      \"tx_to\" , \n                      \"tx_hash\" , \n                      \"amount_usd\" \n                  ] , \n                  \"row_count\" :   10 , \n                  \"result_set_bytes\" :   2042 , \n                  \"total_row_count\" :   100 , \n                  \"total_result_set_bytes\" :   56496 , \n                  \"datapoint_count\" :   50 , \n                  \"pending_time_millis\" :   1185 , \n                  \"execution_time_millis\" :   29352 \n              } \n          } , \n          \"next_uri\" :   \"https://api.dune.com/api/v1/execution/01HR8AGD6CWGHGP1BN3Z1SJ4MD/results?columns=block_time%2Ctx_from%2Ctx_to%2Ctx_hash%2Camount_usd&filters=block_time+%3E+%272024-03-01%27&limit=10&offset=10\" , \n          \"next_offset\" :   10 \n      } \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/executions/sorting) Filtering  (/api-reference/executions/filtering) Sampling  (/api-reference/executions/sampling) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Example Sorting Request  (#example-sorting-request) Sorting Parameters  (#sorting-parameters) sort_by  (#sort-by) Sorted Response  (#sorted-response)", "url": "https://docs.dune.com/api-reference/executions/sorting#sorted-response"}
{"content": "\u200b Execution States \n Once an execution is triggered, it can be in one of the following states: \n \n QUERY_STATE_PENDING : The query execution is waiting for an execution slot. \n QUERY_STATE_EXECUTING : The query is currently executing. \n QUERY_STATE_FAILED : The query execution failed. This is a terminal state. \n QUERY_STATE_COMPLETED : The query execution completed successfully. You can retrieve the query result for this execution_id. \n QUERY_STATE_CANCELED : The query execution was canceled by the user. \n QUERY_STATE_EXPIRED : The query execution expired, and the result is no longer available. \n QUERY_STATE_COMPLETED_PARTIAL : The query execution was successful, but the result was truncated because it was too large. To receive the truncated result, set the  allow_partial_results  flag to  true  in the API request to fetch result. \n \n Headers \u200b  (#parameter-x-dune-api-key) X-Dune-Api-Key string required API Key for the service Path Parameters \u200b  (#parameter-execution-id) execution_id string required Execution ID Query Parameters \u200b  (#parameter-api-key) api_key string Alternative to using the X-Dune-Api-Key header Response 200 - application/json \u200b  (#response-cancelled-at) cancelled_at string Timestamp of when the query execution was cancelled, if applicable. \u200b  (#response-execution-ended-at) execution_ended_at string Timestamp of when the query execution ended. \u200b  (#response-execution-id) execution_id string Unique identifier for the execution of the query and corresponding result. \u200b  (#response-execution-started-at) execution_started_at string Timestamp of when the query execution started. \u200b  (#response-expires-at) expires_at string Timestamp of when the query result expires. \u200b  (#response-is-execution-finished) is_execution_finished boolean Whether the state of the query execution is terminal. This can be used for polling purposes. \u200b  (#response-max-inflight-interactive-executions) max_inflight_interactive_executions integer Number of interactive executions this customer can have running in parallel \u200b  (#response-max-inflight-interactive-reached) max_inflight_interactive_reached integer Total number of interactive executions this user has submitted which are still in progress\nonly set to > 0 if the user has reached the limit of concurrent interactive executions \u200b  (#response-query-id) query_id integer Unique identifier of the query. \u200b  (#response-queue-position) queue_position integer \u200b  (#response-result-metadata) result_metadata object Metadata about the execution of the query, including details like column names, row counts, and execution times. Show   child attributes \u200b  (#response-result-metadata-column-names) result_metadata. column_names string[] Names of the columns in the result set. \u200b  (#response-result-metadata-column-types) result_metadata. column_types string[] Types of the columns in the result set. \u200b  (#response-result-metadata-datapoint-count) result_metadata. datapoint_count integer Results cell count is used for billing/pricing plans\nhere we expose the these values to the user, so that they can track their costs \u200b  (#response-result-metadata-execution-time-millis) result_metadata. execution_time_millis integer Time in milliseconds that the query took to execute. \u200b  (#response-result-metadata-pending-time-millis) result_metadata. pending_time_millis integer Time in milliseconds that the query was pending before execution. \u200b  (#response-result-metadata-result-set-bytes) result_metadata. result_set_bytes integer ResultSetBytes represents the raw data bytes returned by the SQL execution engine, it includes: \n \n total nr of bytes used on 1 line with all the column names (the header of the result set) \n total nr of bytes for all the row values (the result set of rows) \n \n it doesn't include overheads such as the presence of column names for every row in the JSON result type.\nit also doesn't include opmitizations such as compression \u200b  (#response-result-metadata-row-count) result_metadata. row_count integer Number of rows in the result set for the current page of results. \u200b  (#response-result-metadata-total-result-set-bytes) result_metadata. total_result_set_bytes integer Total number of bytes in the result set. This doesn't include the json representation overhead. \u200b  (#response-result-metadata-total-row-count) result_metadata. total_row_count integer Number of rows in the result set for the entire result set. \u200b  (#response-state) state string The state of the query execution. \u200b  (#response-submitted-at) submitted_at string Timestamp of when the query was submitted. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/executions/endpoint/get-execution-status) Cancel Execution  (/api-reference/executions/endpoint/cancel-execution) Get Execution Result  (/api-reference/executions/endpoint/get-execution-result) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/api-reference/executions/endpoint/get-execution-status#execution-states"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation NEAR near.nft_transfers Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Overview  (/data-catalog/near/overview) Actions  (/data-catalog/near/actions) Block Chunks  (/data-catalog/near/block_chunks) Circulating Supply  (/data-catalog/near/circulating_supply) FT Transfers  (/data-catalog/near/ft_transfers) Function Call  (/data-catalog/near/function_call) Balances  (/data-catalog/near/balances) NFT Transfers  (/data-catalog/near/nft_transfers) Logs  (/data-catalog/near/logs) Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot NEAR near.nft_transfers Description of the near.nft_transfers table on Dune ", "url": "https://docs.dune.com/data-catalog/near/nft_transfers"}
{"content": "\u200b Table description \n Table tracking all Non-Fungible Token (NFT) transfers in NEAR. \n ", "url": "https://docs.dune.com/data-catalog/near/nft_transfers#table-description"}
{"content": "\u200b Column Descriptions \n Column Description Type block_date The date when the NFT transfer occurred. date block_height The block height at the time of the NFT transfer. bigint block_time Timestamp when the block containing the NFT transfer was produced. timestamp(3) with time zone block_hash The unique hash of the block containing the NFT transfer. varchar chunk_hash The hash of the chunk within the block containing the NFT transfer. varchar shard_id Shard ID where the NFT transfer was executed. bigint standard The NFT standard associated with the transfer (e.g., \u201cnep171\u201d). varchar token_id ID of the Non-Fungible Token being transferred. varchar receipt_id The receipt ID associated with the NFT transfer. varchar contract_account_id The contract account handling the NFT transfer. varchar cause The function name invoked to cause the NFT transfer. varchar status The status of the NFT transfer (e.g., \u201cSUCCESS_VALUE\u201d, \u201cSUCCESS_RECEIPT_ID\u201d). varchar event_memo Memo attached to the NFT transfer event. varchar event_index Event index of the NFT transfer event. uint256 old_owner_account_id Old owner account of the NFT, i.e. the \u201cfrom\u201d account. varchar new_owner_account_id New owner account of the NFT, i.e. the \u201cto\u201d account. varchar authorized_account_id Account authorized to perform the NFT transfer. varchar processed_time Timestamp when the NFT transfer data was processed. timestamp(3) with time zone updated_at Timestamp when the NFT transfer record was last updated. timestamp(3) with time zone ingested_at Timestamp when the NFT transfer data was ingested into Dune. timestamp(3) with time zone \n ", "url": "https://docs.dune.com/data-catalog/near/nft_transfers#column-descriptions"}
{"content": "\u200b Table Sample \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/near/nft_transfers) Balances  (/data-catalog/near/balances) Logs  (/data-catalog/near/logs) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample)", "url": "https://docs.dune.com/data-catalog/near/nft_transfers#table-sample"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation NEAR near.ft_transfers Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Overview  (/data-catalog/near/overview) Actions  (/data-catalog/near/actions) Block Chunks  (/data-catalog/near/block_chunks) Circulating Supply  (/data-catalog/near/circulating_supply) FT Transfers  (/data-catalog/near/ft_transfers) Function Call  (/data-catalog/near/function_call) Balances  (/data-catalog/near/balances) NFT Transfers  (/data-catalog/near/nft_transfers) Logs  (/data-catalog/near/logs) Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot NEAR near.ft_transfers Description of the near.ft_transfers table on Dune ", "url": "https://docs.dune.com/data-catalog/near/ft_transfers"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation NEAR near.logs Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Overview  (/data-catalog/near/overview) Actions  (/data-catalog/near/actions) Block Chunks  (/data-catalog/near/block_chunks) Circulating Supply  (/data-catalog/near/circulating_supply) FT Transfers  (/data-catalog/near/ft_transfers) Function Call  (/data-catalog/near/function_call) Balances  (/data-catalog/near/balances) NFT Transfers  (/data-catalog/near/nft_transfers) Logs  (/data-catalog/near/logs) Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot NEAR near.logs Description of the near.logs table on Dune ", "url": "https://docs.dune.com/data-catalog/near/logs"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation NEAR near.function_call Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Overview  (/data-catalog/near/overview) Actions  (/data-catalog/near/actions) Block Chunks  (/data-catalog/near/block_chunks) Circulating Supply  (/data-catalog/near/circulating_supply) FT Transfers  (/data-catalog/near/ft_transfers) Function Call  (/data-catalog/near/function_call) Balances  (/data-catalog/near/balances) NFT Transfers  (/data-catalog/near/nft_transfers) Logs  (/data-catalog/near/logs) Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot NEAR near.function_call Description of the near.function_call table on Dune ", "url": "https://docs.dune.com/data-catalog/near/function_call"}
{"content": "\u200b Table description \n Table tracking all Fungible Token (FT) transfers in NEAR. \n ", "url": "https://docs.dune.com/data-catalog/near/ft_transfers#table-description"}
{"content": "\u200b Column Descriptions \n Column Description Type block_date The date when the FT transfer occurred. date block_height The block height at the time of the FT transfer. bigint block_time Timestamp when the block containing the FT transfer was produced. timestamp(3) with time zone block_hash The unique hash of the block containing the FT transfer. varchar chunk_hash The hash of the chunk within the block containing the FT transfer. varchar shard_id Shard ID where the FT transfer was executed. bigint standard The FT standard associated with the transfer (e.g., \u201cnep141\u201d). varchar token_id ID of the Fungible Token involved in the transfer (e.g., \u201cnear\u201d). varchar receipt_id The receipt ID associated with the FT transfer. varchar contract_account_id The contract account handling the FT transfer. varchar cause The function name invoked to cause the FT transfer. varchar status The status of the FT transfer (e.g., \u201cSUCCESS_VALUE\u201d). varchar event_memo Memo attached to the FT transfer event. varchar event_index Event index of the FT transfer event. uint256 affected_account_id The account affected by the FT transfer, i.e. the \u201cto\u201d account. varchar involved_account_id The account involved in the FT transfer, i.e. the \u201cfrom\u201d account. varchar delta_amount The amount of FT tokens transferred. decimal(38,0) processed_time Timestamp when the FT transfer data was processed. timestamp(3) with time zone updated_at Timestamp when the FT transfer record was last updated. timestamp(3) with time zone ingested_at Timestamp when the FT transfer data was ingested into Dune. timestamp(3) with time zone \n ", "url": "https://docs.dune.com/data-catalog/near/ft_transfers#column-descriptions"}
{"content": "\u200b Table Sample \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/near/ft_transfers) Circulating Supply  (/data-catalog/near/circulating_supply) Function Call  (/data-catalog/near/function_call) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample)", "url": "https://docs.dune.com/data-catalog/near/ft_transfers#table-sample"}
{"content": "\u200b Table description \n This table captures the output generated during the execution of smart contracts. They record key events and actions, such as token transfers or function calls, and are used for tracking, debugging, and monitoring contract activity. Logs help developers understand what happened during a transaction, making it easier to analyze and troubleshoot smart contract behavior. \n ", "url": "https://docs.dune.com/data-catalog/near/logs#table-description"}
{"content": "\u200b Column Descriptions \n Column Description Type block_date The date of the block where the log entry was generated. date block_height The block height at which the log entry was generated. bigint block_time The time when the block containing the log entry was produced. timestamp(3) with time zone execution_status The status of the execution outcome associated with the log. varchar executor_account_id The account that executed the transaction resulting in the log. varchar receipt_id The receipt ID associated with the log. varchar index_in_execution_outcome_logs Index of the log entry within the execution outcome, indicating ordering. integer log The actual log message from the execution outcome. varchar event Event description generated during execution. varchar processed_time The time when the log data was processed. timestamp(3) with time zone updated_at The time when the log record was last updated. timestamp(3) with time zone ingested_at The time when the log data was ingested. timestamp(3) with time zone \n ", "url": "https://docs.dune.com/data-catalog/near/logs#column-descriptions"}
{"content": "\u200b Table Sample \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/near/logs) NFT Transfers  (/data-catalog/near/nft_transfers) Overview  (/data-catalog/substrate/overview) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample)", "url": "https://docs.dune.com/data-catalog/near/logs#table-sample"}
{"content": "\u200b Table description \n This table contains flattened out details for records in the  actions  table of the  FUNCTION_CALL  type. \n ", "url": "https://docs.dune.com/data-catalog/near/function_call#table-description"}
{"content": "\u200b Column Descriptions \n Column Description Type block_date The date of the block where the function call occurred. date block_time The time when the block containing the function call was produced. timestamp(3) with time zone block_height The block height at the time of the function call. bigint block_hash The unique hash of the block containing the function call. varchar chunk_hash The hash of the chunk where the function call is recorded. varchar shard_id Shard ID where the function call was executed. bigint tx_hash The transaction hash containing the function call. varchar tx_from The account that initiated the function call. varchar tx_to The account receiving the function call. varchar tx_status Status of the function call (success or failure). varchar call_method_name The method being called in the function call. varchar args_parsed Parsed (decoded) arguments for the function call. varchar call_gas Gas attached to the function call. bigint call_deposit Amount of NEAR tokens attached to the function call. varchar call_args_base64 Base64 encoded arguments of the function call. varchar index_in_action_receipt The index of the function call within the receipt. integer receipt_id The receipt ID associated with the function call. varchar gas_price The gas price paid for executing the function call. bigint receipt_predecessor_account_id The ID of the predecessor account for the receipt. varchar receipt_receiver_account_id The ID of the receiver account for the receipt. varchar receipt_conversion_gas_burnt The gas burnt during the conversion of the receipt. bigint receipt_conversion_tokens_burnt The amount of raw NEAR burnt during the conversion of the receipt. uint256 execution_gas_burnt Amount of gas burnt during the execution of the function call. bigint execution_tokens_burnt Amount of raw NEAR token burnt during the execution of the function call. uint256 execution_status The status of the execution outcome of the function call. varchar execution_outcome_receipt_ids Array of receipt IDs created as a result of the function call. array(varchar) updated_at The time when this function call record was last updated. timestamp(3) with time zone ingested_at The time when this function call data was ingested into Dune. timestamp(3) with time zone processed_time The time when the function call was processed. timestamp(3) with time zone \n ", "url": "https://docs.dune.com/data-catalog/near/function_call#column-descriptions"}
{"content": "\u200b Table Sample \n \n ", "url": "https://docs.dune.com/data-catalog/near/function_call#table-sample"}
{"content": "\u200b Data Manipulation Tips \n The  actions  data in NEAR can be complicated and nested, causing it hard to analyze sometimes. So here we give two examples on how to work array and json data to make it easier to analyze. \n ", "url": "https://docs.dune.com/data-catalog/near/function_call#data-manipulation-tips"}
{"content": "\u200b Explode array of rows into separate rows with defined fields \n When the action type is \u201cDELEGATE_ACTION\u201d, the  action_delegate_delegate_action_actions  becomes an array of size n with rows of fields. We can utilize  CROSS JOIN UNNEST  to first explode the array, then use  .  directly to access the fields in the row. \n Reference query  can be found here  (https://dune.com/queries/4078275?sidebar=none) . \n with  exploded  as   ( \n      select  block_date \n          ,  block_height  as  block_height_executed \n          ,  tx_hash \n          ,  receipt_id  -- receipt for this action (there are many actions included in one txn) \n          ,  execution_status \n          \n          ,  cardinality ( action_delegate_delegate_action_actions )   as  delegated_action_size  -- how many function calls are being delegated \n          \n          ,  action_delegate_delegate_action_sender_id  as  action_from  \n          ,  action_delegate_delegate_action_receiver_id  as  action_to  \n          \n      \n          -- Explode the array into rows \n          ,  actions . value   as  action_data \n          ,  actions . index   as  delegated_action_index \n          ,  action_delegate_delegate_action_actions  as  raw_delegated_actions  -- raw nested list of delegated actions \n          \n      /* explode by doing cross join unnest here*/      \n      from  near . actions  CROSS   JOIN  UNNEST ( action_delegate_delegate_action_actions )   WITH  ORDINALITY  as  actions ( value ,   index ) \n      where  action_kind  =   'DELEGATE_ACTION' \n          and  cardinality ( action_delegate_delegate_action_actions )   >=   2 \n          and  receipt_id  =   '6DB2AzkLXzoU9CMj9GKSZi7y8dGxVrqrbtBsfpLVQCQ8' \n          and  block_date  =   date ( '2024-09-17' ) \n          and  block_height  =   128251854 \n ) \n \n select  block_date \n      ,  block_height_executed \n      ,  tx_hash \n      ,  receipt_id  \n      ,  execution_status \n      ,  delegated_action_size  -- how many function calls are being delegated \n      \n      ,  action_from  \n      ,  action_to  \n      \n      -- , typeof(action_data) -- row(args varchar, deposit varchar, gas bigint, method_name varchar) \n      \n      /* below is how you can access the delegated function call info */ \n      ,  action_data . args  as  function_call_args \n      ,  action_data . deposit  as  function_call_deposit \n      ,  action_data . gas  as  function_call_gas \n      ,  action_data . method_name  as  function_call_method_name \n      ,  delegated_action_index \n      \n      ,  raw_delegated_actions  -- raw nested list of delegated actions \n from  exploded  \n \n \n ", "url": "https://docs.dune.com/data-catalog/near/function_call#explode-array-of-rows-into-separate-rows-with-defined-fields"}
{"content": "\u200b Extract fields from JSON string \n When the action type is \u201cFUNCTION_CALL\u201d, the  action_function_call_args_parsed  becomes a JSON string. We can utilize  json_extract  with  $.<field_name>  syntax to extract the fields from the JSON string. \n Reference query  can be found here  (https://dune.com/queries/4078309?sidebar=none) . \n select  block_date \n      ,  block_height  as  block_height_executed \n      ,  tx_hash \n      ,  receipt_id  -- receipt for this action (there are many actions included in one txn) \n      ,  execution_status \n      \n      ,  receipt_predecessor_account_id  as  action_from \n      ,  receipt_receiver_account_id  as  action_to \n      \n      -- , typeof(args_parsed) as data_type  \n      / *  This  is  how you can get  fields   within  each parsed  function   call  args  \n          -   first  examine the  fields   in  the args_parsed  for  the tye  of  method  ` call_method_name ` \n          -   then  parse accordingly \n      * / \n      ,  json_extract ( args_parsed ,   '$.receiver_id' )   AS  receiver_id \n      ,  json_extract ( args_parsed ,   '$.amount' )   AS  amount \n      ,  json_extract ( args_parsed ,   '$.memo' )   AS  memo \n      \n      ,  call_method_name  as  call_method_name \n      ,  args_parsed  as  raw_call_args \n      ,  call_gas  as  call_gas \n      ,  call_deposit  as  call_deposit \n      ,  call_args_base64 \n      \n      ,   * \n from  near . function_call  -- near.actions \n where   1 = 1 \n      and  block_date  =   date ( '2023-09-15' ) \n      and  call_method_name  =   'ft_transfer' \n limit   10 \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/near/function_call) FT Transfers  (/data-catalog/near/ft_transfers) Balances  (/data-catalog/near/balances) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample) Data Manipulation Tips  (#data-manipulation-tips) Explode array of rows into separate rows with defined fields  (#explode-array-of-rows-into-separate-rows-with-defined-fields) Extract fields from JSON string  (#extract-fields-from-json-string)", "url": "https://docs.dune.com/data-catalog/near/function_call#extract-fields-from-json-string"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Polkadot polkadot.calls Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Overview  (/data-catalog/substrate/overview) Balances  (/data-catalog/substrate/balances) Blocks  (/data-catalog/substrate/blocks) Calls  (/data-catalog/substrate/calls) Events  (/data-catalog/substrate/events) Extrinsics  (/data-catalog/substrate/extrinsics) Materialized Views  (/data-catalog/substrate/materialized_views) Stakings  (/data-catalog/substrate/stakings) Transfers  (/data-catalog/substrate/transfers) Traces  (/data-catalog/substrate/traces) Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Polkadot polkadot.calls Description of Substrate calls tables on Dune. ", "url": "https://docs.dune.com/data-catalog/substrate/calls"}
{"content": "\u200b Table description \n Compared to the  extrinsics  table, which only has a top-level call, the  calls  Substrate table represents  internal  calls, including recursive internal calls of  proxy  and  utility  (batch) pallets, and provides detailed call arguments each level of the call tree. \n Common queries on the  calls  table will typically filter on  block_time ,  call_section  and  call_method  and extract JSON encoded information in\n data  or  decoded_data . \n ", "url": "https://docs.dune.com/data-catalog/substrate/calls#table-description"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/substrate/calls#column-descriptions"}
{"content": "\u200b Table Sample \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/substrate/calls) Blocks  (/data-catalog/substrate/blocks) Events  (/data-catalog/substrate/events) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample)", "url": "https://docs.dune.com/data-catalog/substrate/calls#table-sample"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Polkadot Materialized Views Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Overview  (/data-catalog/substrate/overview) Balances  (/data-catalog/substrate/balances) Blocks  (/data-catalog/substrate/blocks) Calls  (/data-catalog/substrate/calls) Events  (/data-catalog/substrate/events) Extrinsics  (/data-catalog/substrate/extrinsics) Materialized Views  (/data-catalog/substrate/materialized_views) Stakings  (/data-catalog/substrate/stakings) Transfers  (/data-catalog/substrate/transfers) Traces  (/data-catalog/substrate/traces) Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Polkadot Materialized Views Useful materialized views for Polkadot, Kusama & their parachains. A list of useful queries that we have  materialized  (https://dune.com/queries?category=third_party_data&catalog=dune&schema=substrate)  for usability. Some complex dashboards can be constructed more efficiently by referencing these materialized views. Forks and additions are welcome! \n ", "url": "https://docs.dune.com/data-catalog/substrate/materialized_views"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Polkadot polkadot.balances Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Overview  (/data-catalog/substrate/overview) Balances  (/data-catalog/substrate/balances) Blocks  (/data-catalog/substrate/blocks) Calls  (/data-catalog/substrate/calls) Events  (/data-catalog/substrate/events) Extrinsics  (/data-catalog/substrate/extrinsics) Materialized Views  (/data-catalog/substrate/materialized_views) Stakings  (/data-catalog/substrate/stakings) Transfers  (/data-catalog/substrate/transfers) Traces  (/data-catalog/substrate/traces) Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Polkadot polkadot.balances Description of Substrate balances tables on Dune. ", "url": "https://docs.dune.com/data-catalog/substrate/balances"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Polkadot polkadot.blocks Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Overview  (/data-catalog/substrate/overview) Balances  (/data-catalog/substrate/balances) Blocks  (/data-catalog/substrate/blocks) Calls  (/data-catalog/substrate/calls) Events  (/data-catalog/substrate/events) Extrinsics  (/data-catalog/substrate/extrinsics) Materialized Views  (/data-catalog/substrate/materialized_views) Stakings  (/data-catalog/substrate/stakings) Transfers  (/data-catalog/substrate/transfers) Traces  (/data-catalog/substrate/traces) Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Polkadot polkadot.blocks Description of Substrate blocks table on Dune. ", "url": "https://docs.dune.com/data-catalog/substrate/blocks"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation NEAR near.circulating_supply Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Overview  (/data-catalog/near/overview) Actions  (/data-catalog/near/actions) Block Chunks  (/data-catalog/near/block_chunks) Circulating Supply  (/data-catalog/near/circulating_supply) FT Transfers  (/data-catalog/near/ft_transfers) Function Call  (/data-catalog/near/function_call) Balances  (/data-catalog/near/balances) NFT Transfers  (/data-catalog/near/nft_transfers) Logs  (/data-catalog/near/logs) Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot NEAR near.circulating_supply Description of the near.circulating_supply table on Dune ", "url": "https://docs.dune.com/data-catalog/near/circulating_supply"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation NEAR near.balances Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Overview  (/data-catalog/near/overview) Actions  (/data-catalog/near/actions) Block Chunks  (/data-catalog/near/block_chunks) Circulating Supply  (/data-catalog/near/circulating_supply) FT Transfers  (/data-catalog/near/ft_transfers) Function Call  (/data-catalog/near/function_call) Balances  (/data-catalog/near/balances) NFT Transfers  (/data-catalog/near/nft_transfers) Logs  (/data-catalog/near/logs) Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot NEAR near.balances Description of the near.balances table on Dune ", "url": "https://docs.dune.com/data-catalog/near/balances"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation NEAR near.block_chunks Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Overview  (/data-catalog/near/overview) Actions  (/data-catalog/near/actions) Block Chunks  (/data-catalog/near/block_chunks) Circulating Supply  (/data-catalog/near/circulating_supply) FT Transfers  (/data-catalog/near/ft_transfers) Function Call  (/data-catalog/near/function_call) Balances  (/data-catalog/near/balances) NFT Transfers  (/data-catalog/near/nft_transfers) Logs  (/data-catalog/near/logs) Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot NEAR near.block_chunks Description of the near.block_chunks table on Dune ", "url": "https://docs.dune.com/data-catalog/near/block_chunks"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation NEAR near.actions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Overview  (/data-catalog/near/overview) Actions  (/data-catalog/near/actions) Block Chunks  (/data-catalog/near/block_chunks) Circulating Supply  (/data-catalog/near/circulating_supply) FT Transfers  (/data-catalog/near/ft_transfers) Function Call  (/data-catalog/near/function_call) Balances  (/data-catalog/near/balances) NFT Transfers  (/data-catalog/near/nft_transfers) Logs  (/data-catalog/near/logs) Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot NEAR near.actions Description of the near.actions table on Dune ", "url": "https://docs.dune.com/data-catalog/near/actions"}
{"content": "\u200b Polkadot \n Materialized View Query ID Description dune.substrate.result_polkadot_validators query_3302709  (https://dune.com/queries/3302709) Analyzes Polkadot validators\u2019 performance and staking rewards, including nominator associations and APR calculations. dune.substrate.result_polkadot_nominationpools query_3327350  (https://dune.com/queries/3327350) Tracks and assesses Nomination Pool rewards, fees, and APR within the Polkadot ecosystem. dune.substrate.result_polkadot_nominators query_3326829  (https://dune.com/queries/3326829) Summarizes active nominator contributions, rewards, and their share in validators\u2019 stakes in Polkadot. dune.substrate.result_polkadot_poolmembers query_3327479  (https://dune.com/queries/3327479) Details individual Nomination Pool member contributions, rewards, and unclaimed amounts in Polkadot. dune.substrate.result_polkadot_identity query_3420617  (https://dune.com/queries/3420617) A mapping between Polkadot and Kusama identities, linking addresses and verifying authenticity. dune.substrate.result_polkadot_referenda_total_voting_power query_3394422  (https://dune.com/queries/3394422) Summarizes Polkadot referenda votes, detailing direct and delegated voting power and convictions. dune.substrate.result_polkadot_staking_nomination_total query_3426963  (https://dune.com/queries/3426963) Displays Polkadot nominators, their staked totals per validator, and validator identities by era. dune.substrate.result_polkadot_open_gov_delegation query_3393179  (https://dune.com/queries/3393179) Details staked totals by Polkadot nominators across validators and eras, including validator names. dune.substrate.result_polkadot_vote_record query_3415321  (https://dune.com/queries/3415321) Polkadot referenda vote information, integrating direct, proxy, and delegated votes with dynamic links and voter identities. dune.substrate.result_polkadot_proposals_proposed query_3394156  (https://dune.com/queries/3394156) Tracks Polkadot referenda statuses including proposer details, timelines, and outcome, with direct links to further information. dune.substrate.result_polkadot_referenda_direct_vote query_3391225  (https://dune.com/queries/3391225) All Polkadot referendum direct votes (filter expired votes). dune.substrate.result_polkadot_each_vote_record query_3393684  (https://dune.com/queries/3393684) Aggregates Polkadot referendum voting details, showing voter identities, vote types, convictions, and power, including direct and delegated votes. dune.substrate.result_polkadot_referenda_origin_map query_3399352  (https://dune.com/queries/3399352) Associates Polkadot referenda with their origins. dune.substrate.result_polkadot_failed_calls_in_batch query_3457139  (https://dune.com/queries/3457139) Finds some failed calls hidden in a utility batch on Polkadot. \n ", "url": "https://docs.dune.com/data-catalog/substrate/materialized_views#polkadot"}
{"content": "\u200b Kusama \n Materialized View Query ID Description dune.substrate.result_kusama_validators query_3477509  (https://dune.com/queries/3477509) Analyzes Kusama validators\u2019 performance and staking rewards, including nominator associations and APR calculations. dune.substrate.result_kusama_nominationpools query_3477568  (https://dune.com/queries/3477568) Tracks and assesses Nomination Pool rewards, fees, and APR within the Kusama ecosystem. dune.substrate.result_kusama_nominators query_3477192  (https://dune.com/queries/3477192) Summarizes active nominator contributions, rewards, and their share in validators\u2019 stakes in Kusama. dune.substrate.result_kusama_poolmembers query_3477877  (https://dune.com/queries/3477877) Details individual Nomination Pool member contributions, rewards, and unclaimed amounts in Kusama. dune.substrate.result_kusama_referenda_total_voting_power query_3480624  (https://dune.com/queries/3480624) Summarizes Kusama referenda votes, detailing direct and delegated voting power and convictions. dune.substrate.result_kusama_open_gov_delegation query_3480477  (https://dune.com/queries/3480477) Details staked totals by Kusama nominators across validators and eras, including validator names. dune.substrate.result_kusama_vote_record query_3480405  (https://dune.com/queries/3480405) Kusama referenda vote information, integrating direct, proxy, and delegated votes with dynamic links and voter identities. dune.substrate.result_kusama_proposals_proposed query_3480370  (https://dune.com/queries/3480370) Tracks Kusama referenda statuses including proposer details, timelines, and outcome, with direct links to further information. dune.substrate.result_kusama_referenda_direct_vote query_3480617  (https://dune.com/queries/3480617) All Kusama referendum direct votes (filter expired votes). dune.substrate.result_kusama_each_vote_record query_3480878  (https://dune.com/queries/3480878) Aggregates Kusama referendum voting details, showing voter identities, vote types, convictions, and power, including direct and delegated votes. dune.substrate.result_kusama_referenda_origin_map query_3480454  (https://dune.com/queries/3480454) Associates Kusama referenda with their origins. dune.substrate.result_kusama_failed_calls_in_batch query_3480469  (https://dune.com/queries/3480469) Finds some failed calls hidden in a utility batch on Kusama. \n ", "url": "https://docs.dune.com/data-catalog/substrate/materialized_views#kusama"}
{"content": "\u200b Interlay \n Materialized View Query ID Description dune.substrate.result_interlay_oracle query_3445402  (https://dune.com/queries/3445402) All graphs that use a price on Interlay dune.substrate.result_interlay_vault_creation query_3437565  (https://dune.com/queries/3437565) All graphs that show vaults with their collateral dune.substrate.result_hydradx_oracle query_3459562  (https://dune.com/queries/3459562) All graphs that use trade volume or prices on HydraDX. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/substrate/materialized_views) Extrinsics  (/data-catalog/substrate/extrinsics) Stakings  (/data-catalog/substrate/stakings) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Polkadot  (#polkadot) Kusama  (#kusama) Interlay  (#interlay)", "url": "https://docs.dune.com/data-catalog/substrate/materialized_views#interlay"}
{"content": "\u200b Table description \n The  balances  table (e.g.  polkadot.balances ) stores a snapshot of all account balances at the end of each day:  free ,  reserved ,  misc_frozen , and their USD value, if available. \n ", "url": "https://docs.dune.com/data-catalog/substrate/balances#table-description"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/substrate/balances#column-descriptions"}
{"content": "\u200b Table Sample \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/substrate/balances) Overview  (/data-catalog/substrate/overview) Blocks  (/data-catalog/substrate/blocks) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample)", "url": "https://docs.dune.com/data-catalog/substrate/balances#table-sample"}
{"content": "\u200b Table description \n The blocks table stores basic information about Substrate blocks, with one record per block, including the block hash and statistics on the number of extrinsics, events, and transfers contained in each block. \n ", "url": "https://docs.dune.com/data-catalog/substrate/blocks#table-description"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/substrate/blocks#column-descriptions"}
{"content": "\u200b Table Sample \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/substrate/blocks) Balances  (/data-catalog/substrate/balances) Calls  (/data-catalog/substrate/calls) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample)", "url": "https://docs.dune.com/data-catalog/substrate/blocks#table-sample"}
{"content": "\u200b Table description \n Table holding daily circulating and total supply of tokens in NEAR. \n ", "url": "https://docs.dune.com/data-catalog/near/circulating_supply#table-description"}
{"content": "\u200b Column Descriptions \n Column Description Type block_date The date of the block when the supply was recorded. date computed_at_block_timestamp Timestamp of the block when the supply was computed. timestamp(3) with time zone computed_at_block_hash Hash of the block at the time of supply computation. varchar computed_at_block_height Block height at which the supply was computed. bigint circulating_tokens_supply The circulating supply of tokens at the time of computation. double total_tokens_supply The total supply of tokens at the time of computation. double processed_time The timestamp when the supply data was processed. timestamp(3) with time zone updated_at Timestamp of the last update to this record. timestamp(3) with time zone ingested_at Timestamp when this data was ingested into Dune. timestamp(3) with time zone \n ", "url": "https://docs.dune.com/data-catalog/near/circulating_supply#column-descriptions"}
{"content": "\u200b Table Sample \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/near/circulating_supply) Block Chunks  (/data-catalog/near/block_chunks) FT Transfers  (/data-catalog/near/ft_transfers) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample)", "url": "https://docs.dune.com/data-catalog/near/circulating_supply#table-sample"}
{"content": "\u200b Table description \n This table tracks account balance details on NEAR, including the liquid balance, staked amounts, and rewards for both main and lockup accounts. \n ", "url": "https://docs.dune.com/data-catalog/near/balances#table-description"}
{"content": "\u200b Column Descriptions \n Column Description Type epoch_date The date of the epoch when the balance was recorded. date epoch_block_height The block height of the epoch when the balance was recorded. bigint account_id The account whose balance is being tracked. varchar liquid Amount of liquid NEAR tokens in the account. double storage_usage The amount of storage usage associated with the account. bigint unstaked_not_liquid The amount of unstaked but not liquid NEAR tokens in the account. double staked The amount of staked NEAR tokens in the account. double reward Reward tokens accumulated by the account from staking. double lockup_account_id The ID of the lockup account associated with the account. varchar lockup_liquid Amount of liquid NEAR tokens in the lockup account. double lockup_unstaked_not_liquid The amount of unstaked but not liquid tokens in the lockup account. double lockup_staked The amount of staked NEAR tokens in the lockup account. double lockup_reward Reward tokens accumulated in the lockup account from staking. double processed_time The time when the balance was processed. date updated_at The time when this balance record was last updated. timestamp(3) with time zone ingested_at The time when this balance record was ingested into Dune. timestamp(3) with time zone \n ", "url": "https://docs.dune.com/data-catalog/near/balances#column-descriptions"}
{"content": "\u200b Table Sample \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/near/balances) Function Call  (/data-catalog/near/function_call) NFT Transfers  (/data-catalog/near/nft_transfers) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample)", "url": "https://docs.dune.com/data-catalog/near/balances#table-sample"}
{"content": "\u200b Table description \n This table contains block chunk data on NEAR. Chunk of a block is a part of a block from a shard. The collection of chunks of the block forms the NEAR Protocol block. \n ", "url": "https://docs.dune.com/data-catalog/near/block_chunks#table-description"}
{"content": "\u200b Column Descriptions \n Column Description Type date The date of the block where the chunk is included. date height The block height at which the chunk was produced. bigint time The timestamp of when the chunk was produced. timestamp(3) with time zone hash The hash of the chunk. varchar prev_hash The hash of the previous chunk in the chain. varchar total_supply uint256 gas_price Gas price paid for executing the chunk. bigint author_account_id The account that produced the chunk. varchar epoch_id The ID of the epoch in which the chunk was produced. varchar shard_id The shard ID that contains the chunk. bigint chunk_hash Hash of the chunk. varchar chunk_signature The cryptographic signature validating the chunk. varchar chunk_gas_limit Maximum gas limit for this chunk. bigint chunk_gas_used Gas actually used in the chunk. bigint chunk_author_account_id The account that produced this chunk. varchar processed_time Timestamp when the chunk was processed into Dune. timestamp(3) with time zone updated_at Timestamp when this chunk was last updated. timestamp(3) with time zone ingested_at Timestamp when this chunk data was ingested into Dune. timestamp(3) with time zone \n ", "url": "https://docs.dune.com/data-catalog/near/block_chunks#column-descriptions"}
{"content": "\u200b Table Sample \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/near/block_chunks) Actions  (/data-catalog/near/actions) Circulating Supply  (/data-catalog/near/circulating_supply) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample)", "url": "https://docs.dune.com/data-catalog/near/block_chunks#table-sample"}
{"content": "\u200b Table Description \n The  near.actions  table contains comprehensive data related to transactions on the NEAR blockchain, including transaction metadata like  block_date  and  tx_hash , execution statuses, receipts, and detailed action information when applicable. \n In NEAR, a transaction can consist of one or more actions, signed by the sender\u2019s account and executed by the network. These actions may involve token transfers, smart contract invocations, staking, and more. \n NEAR employs a unique transaction lifecycle where transactions are validated on the sender\u2019s shard, converted into receipts, and processed on the receiver\u2019s shard. This approach ensures efficient handling of cross-shard communication and data flow. \n To gain a clearer understanding of how NEAR data flows, watch this quick video. For a detailed text version, visit the  NEAR Data Flow documentation  (https://docs.near.org/concepts/data-flow/near-data-flow) . \n \n ", "url": "https://docs.dune.com/data-catalog/near/actions#table-description"}
{"content": "\u200b Column Descriptions \n Column Description Type block_date The date of the block when the action occurred. date block_height The height of the block in which the action was executed. bigint block_time The timestamp of when the block containing the action was produced. timestamp(3) with time zone block_hash The unique hash of the block containing the action. varchar chunk_hash The hash of the chunk within the block where the action is recorded. varchar shard_id The shard ID in which the action was executed, relating to NEAR\u2019s sharded architecture. bigint index_in_action_receipt The index of the action within its corresponding receipt, indicating ordering of the action. integer receipt_id The unique identifier of the receipt associated with this action. varchar gas_price The gas price paid for executing the action, in yoctoNEAR (1 NEAR = 10^24 yoctoNEAR). bigint receipt_predecessor_account_id The account that sent the receipt containing the action. varchar receipt_receiver_account_id The account that receives the action. varchar receipt_conversion_gas_burnt The amount of gas burnt during the conversion of the receipt. bigint receipt_conversion_tokens_burnt The amount of gas burnt during the conversion of the receipt, divided by 10^8. uint256 tx_hash The unique hash identifying the transaction containing the action. varchar tx_from The account that initiated the transaction. varchar tx_to The account that is the recipient of the transaction. varchar tx_signer_public_key The public key of the account that signed the transaction. varchar tx_nonce The nonce used by the account to ensure the transaction is unique. bigint tx_signature The cryptographic signature that verifies the authenticity of the transaction. varchar tx_status The status of the transaction, indicating success or failure. varchar is_delegate_action Boolean flag indicating whether the action is a delegated action. boolean execution_gas_burnt The amount of gas burnt during the execution of the action. bigint execution_tokens_burnt The amount of raw NEAR token burnt during the execution of the action. uint256 execution_status The status of the execution of the action. varchar execution_outcome_receipt_ids Array of receipt IDs created as a result of the execution. array(varchar) action_kind The type of action, such as FUNCTION_CALL, DELEGATE_ACTION, TRANSFER, STAKE, etc. varchar processed_time The timestamp of when the action was processed by Dune. timestamp(3) with time zone action_function_call_args_parsed Parsed (decoded) arguments of the function call action. varchar action_function_call_call_gas The amount of gas attached to the function call action. bigint action_function_call_call_deposit The amount of NEAR tokens attached to the function call action. varchar action_function_call_call_args_base64 Base64 encoded arguments of the function call action. varchar action_function_call_call_method_name The name of the method being called in the function call action. varchar action_delegate_signature Signature of the delegation action. varchar action_delegate_delegate_action_actions List of actions being delegated to another account. array(row(\u201cfunctioncall\u201d)) action_delegate_delegate_action_max_block_height The maximum block height at which the delegated action can be executed. varchar action_delegate_delegate_action_nonce Nonce of the delegated action for uniqueness. varchar action_delegate_delegate_action_public_key Public key of the delegate executing the action. varchar action_delegate_delegate_action_receiver_id Account receiving the delegated action. varchar action_delegate_delegate_action_sender_id Account sending the delegated action. varchar action_delete_account_beneficiary_id Account of the beneficiary receiving remaining balance upon account deletion. varchar action_delete_key_public_key Public key being deleted from the account. varchar action_add_key_public_key Public key being added to the account. varchar action_add_key_access_key_nonce Nonce of the access key being added. varchar action_add_key_access_key_permission Permissions granted to the newly added access key. varchar action_stake_public_key Public key used for staking by the account. varchar action_stake_stake Amount of NEAR tokens staked by the account. varchar action_transfer_deposit Amount of NEAR tokens being transferred between accounts. varchar action_deploy_contract_code_sha256 SHA256 hash of the code being deployed in the contract. varchar updated_at Timestamp of when the record was last updated. timestamp(3) with time zone ingested_at Timestamp of when the record was ingested into Dune. timestamp(3) with time zone \n ", "url": "https://docs.dune.com/data-catalog/near/actions#column-descriptions"}
{"content": "\u200b Table Sample \n \n ", "url": "https://docs.dune.com/data-catalog/near/actions#table-sample"}
{"content": "\u200b Data Manipulation Tips \n The  actions  data in NEAR can be complicated and nested, causing it hard to analyze sometimes. So here we give two examples on how to work array and json data to make it easier to analyze. \n ", "url": "https://docs.dune.com/data-catalog/near/actions#data-manipulation-tips"}
{"content": "\u200b Explode array of rows into separate rows with defined fields \n When the action type is \u201cDELEGATE_ACTION\u201d, the  action_delegate_delegate_action_actions  becomes an array of size n with rows of fields. We can utilize  CROSS JOIN UNNEST  to first explode the array, then use  .  directly to access the fields in the row. \n Reference query  can be found here  (https://dune.com/queries/4078275?sidebar=none) . \n with  exploded  as   ( \n      select  block_date \n          ,  block_height  as  block_height_executed \n          ,  tx_hash \n          ,  receipt_id  -- receipt for this action (there are many actions included in one txn) \n          ,  execution_status \n          \n          ,  cardinality ( action_delegate_delegate_action_actions )   as  delegated_action_size  -- how many function calls are being delegated \n          \n          ,  action_delegate_delegate_action_sender_id  as  action_from  \n          ,  action_delegate_delegate_action_receiver_id  as  action_to  \n          \n      \n          -- Explode the array into rows \n          ,  actions . value   as  action_data \n          ,  actions . index   as  delegated_action_index \n          ,  action_delegate_delegate_action_actions  as  raw_delegated_actions  -- raw nested list of delegated actions \n          \n      /* explode by doing cross join unnest here*/      \n      from  near . actions  CROSS   JOIN  UNNEST ( action_delegate_delegate_action_actions )   WITH  ORDINALITY  as  actions ( value ,   index ) \n      where  action_kind  =   'DELEGATE_ACTION' \n          and  cardinality ( action_delegate_delegate_action_actions )   >=   2 \n          and  receipt_id  =   '6DB2AzkLXzoU9CMj9GKSZi7y8dGxVrqrbtBsfpLVQCQ8' \n          and  block_date  =   date ( '2024-09-17' ) \n          and  block_height  =   128251854 \n ) \n \n select  block_date \n      ,  block_height_executed \n      ,  tx_hash \n      ,  receipt_id  \n      ,  execution_status \n      ,  delegated_action_size  -- how many function calls are being delegated \n      \n      ,  action_from  \n      ,  action_to  \n      \n      -- , typeof(action_data) -- row(args varchar, deposit varchar, gas bigint, method_name varchar) \n      \n      /* below is how you can access the delegated function call info */ \n      ,  action_data . args  as  function_call_args \n      ,  action_data . deposit  as  function_call_deposit \n      ,  action_data . gas  as  function_call_gas \n      ,  action_data . method_name  as  function_call_method_name \n      ,  delegated_action_index \n      \n      ,  raw_delegated_actions  -- raw nested list of delegated actions \n from  exploded  \n \n \n ", "url": "https://docs.dune.com/data-catalog/near/actions#explode-array-of-rows-into-separate-rows-with-defined-fields"}
{"content": "\u200b Extract fields from JSON string \n When the action type is \u201cFUNCTION_CALL\u201d, the  action_function_call_args_parsed  becomes a JSON string. We can utilize  json_extract  with  $.<field_name>  syntax to extract the fields from the JSON string. \n Reference query  can be found here  (https://dune.com/queries/4078309?sidebar=none) . \n select  block_date \n      ,  block_height  as  block_height_executed \n      ,  tx_hash \n      ,  receipt_id  -- receipt for this action (there are many actions included in one txn) \n      ,  execution_status \n      \n      ,  receipt_predecessor_account_id  as  action_from \n      ,  receipt_receiver_account_id  as  action_to \n      \n      -- , typeof(args_parsed) as data_type  \n      / *  This  is  how you can get  fields   within  each parsed  function   call  args  \n          -   first  examine the  fields   in  the args_parsed  for  the tye  of  method  ` call_method_name ` \n          -   then  parse accordingly \n      * / \n      ,  json_extract ( args_parsed ,   '$.receiver_id' )   AS  receiver_id \n      ,  json_extract ( args_parsed ,   '$.amount' )   AS  amount \n      ,  json_extract ( args_parsed ,   '$.memo' )   AS  memo \n      \n      ,  call_method_name  as  call_method_name \n      ,  args_parsed  as  raw_call_args \n      ,  call_gas  as  call_gas \n      ,  call_deposit  as  call_deposit \n      ,  call_args_base64 \n      \n      ,   * \n from  near . function_call  -- near.actions \n where   1 = 1 \n      and  block_date  =   date ( '2023-09-15' ) \n      and  call_method_name  =   'ft_transfer' \n limit   10 \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/near/actions) Overview  (/data-catalog/near/overview) Block Chunks  (/data-catalog/near/block_chunks) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table Description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample) Data Manipulation Tips  (#data-manipulation-tips) Explode array of rows into separate rows with defined fields  (#explode-array-of-rows-into-separate-rows-with-defined-fields) Extract fields from JSON string  (#extract-fields-from-json-string)", "url": "https://docs.dune.com/data-catalog/near/actions#extract-fields-from-json-string"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Aptos aptos.move_modules Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Overview  (/data-catalog/aptos/overview) Blocks  (/data-catalog/aptos/blocks) Events  (/data-catalog/aptos/events) Move Modules  (/data-catalog/aptos/move_modules) Move Resources  (/data-catalog/aptos/move_resources) Move Table Items  (/data-catalog/aptos/move_table_items) Signatures  (/data-catalog/aptos/signatures) Transactions  (/data-catalog/aptos/transactions) User Transactions  (/data-catalog/aptos/user_transactions) Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Aptos aptos.move_modules Description of the aptos.move_modules table on Dune ", "url": "https://docs.dune.com/data-catalog/aptos/move_modules"}
{"content": "\u200b Table description \n This table contains data on Move modules deployed on the Aptos blockchain. Move modules contain the bytecode for smart contracts and define the functionality and types used by Move resources. This table provides insight into the smart contract code running on the network, including the module\u2019s author, name, and bytecode. \n ", "url": "https://docs.dune.com/data-catalog/aptos/move_modules#table-description"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/aptos/move_modules#column-descriptions"}
{"content": "\u200b Table Sample \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/aptos/move_modules) Events  (/data-catalog/aptos/events) Move Resources  (/data-catalog/aptos/move_resources) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample)", "url": "https://docs.dune.com/data-catalog/aptos/move_modules#table-sample"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Polkadot polkadot.stakings Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Overview  (/data-catalog/substrate/overview) Balances  (/data-catalog/substrate/balances) Blocks  (/data-catalog/substrate/blocks) Calls  (/data-catalog/substrate/calls) Events  (/data-catalog/substrate/events) Extrinsics  (/data-catalog/substrate/extrinsics) Materialized Views  (/data-catalog/substrate/materialized_views) Stakings  (/data-catalog/substrate/stakings) Transfers  (/data-catalog/substrate/transfers) Traces  (/data-catalog/substrate/traces) Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Polkadot polkadot.stakings Description of the polkadot.stakings table on Dune. ", "url": "https://docs.dune.com/data-catalog/substrate/stakings"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Aptos aptos.transactions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Overview  (/data-catalog/aptos/overview) Blocks  (/data-catalog/aptos/blocks) Events  (/data-catalog/aptos/events) Move Modules  (/data-catalog/aptos/move_modules) Move Resources  (/data-catalog/aptos/move_resources) Move Table Items  (/data-catalog/aptos/move_table_items) Signatures  (/data-catalog/aptos/signatures) Transactions  (/data-catalog/aptos/transactions) User Transactions  (/data-catalog/aptos/user_transactions) Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Aptos aptos.transactions Description of the aptos.transactions table on Dune ", "url": "https://docs.dune.com/data-catalog/aptos/transactions"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Polkadot polkadot.transfers Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Overview  (/data-catalog/substrate/overview) Balances  (/data-catalog/substrate/balances) Blocks  (/data-catalog/substrate/blocks) Calls  (/data-catalog/substrate/calls) Events  (/data-catalog/substrate/events) Extrinsics  (/data-catalog/substrate/extrinsics) Materialized Views  (/data-catalog/substrate/materialized_views) Stakings  (/data-catalog/substrate/stakings) Transfers  (/data-catalog/substrate/transfers) Traces  (/data-catalog/substrate/traces) Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Polkadot polkadot.transfers Description of the polkadot.transfers table on Dune. ", "url": "https://docs.dune.com/data-catalog/substrate/transfers"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Tables Upload CSV Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Queries Materialized Views Webhooks Data Management Endpoints Tables Overview  (/api-reference/tables/endpoint/overview) POST Create Table  (/api-reference/tables/endpoint/create) POST Insert Data  (/api-reference/tables/endpoint/insert) POST Upload CSV  (/api-reference/tables/endpoint/upload) POST Clear Data  (/api-reference/tables/endpoint/clear) DEL Delete Table  (/api-reference/tables/endpoint/delete) Preset Endpoints DEX EigenLayer EVM Contracts Farcaster Markets Projects Tables Upload CSV This API allows for anyone to upload a CSV as a table in Dune. The size limit\nper upload is currently 200MB. Your storage is limited by plan, 1MB on free,\n15GB on plus, and 50GB on premium. POST / v1 / table / upload / csv Try it Consider using the  /create  (./create)  and  /insert  (./insert)  endpoints if you want more flexibility, performance, and the ability to append. \n You can also upload CSV through the  Dune UI  (https://dune.com/)  by pressing the \u201ccreate\u201d dropdown. \n For working with uploads, keep in mind that: \n File has to be < 200 MB \n Column names in the table can\u2019t start with a special character or digits. \n Private uploads require a Premium subscription. \n If you upload to an existing table name, it will delete the old data and overwite it with your new data. There is no append feature at the moment. \n To delete an upload table, you must go to  user settings (dune.com) -> data -> delete . \n If you have larger datasets you want to upload, please  contact us here  (https://docs.google.com/forms/d/e/1FAIpQLSekx61WzIh-MII18zRj1G98aJeLM7U0VEBqaa6pVk_DQ7lq6Q/viewform) \n Headers \u200b  (#parameter-x-dune-api-key) X-Dune-Api-Key string required API Key for the service Query Parameters \u200b  (#parameter-api-key) api_key string Alternative to using the X-Dune-Api-Key header Body */* \u200b  (#body-data) data string The data to be uploaded in CSV format. \u200b  (#body-description) description string Description of the upload. \u200b  (#body-is-private) is_private boolean Indicates if the upload is private. \u200b  (#body-table-name) table_name string The name of the table to store the data. Response 200 - application/json \u200b  (#response-success) success boolean Indicator if the request was successful \u200b  (#response-table-name) table_name string The name of the table that was created Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/tables/endpoint/upload) Insert Data  (/api-reference/tables/endpoint/insert) Clear Data  (/api-reference/tables/endpoint/clear) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/api-reference/tables/endpoint/upload"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Polkadot polkadot.extrinsics Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Overview  (/data-catalog/substrate/overview) Balances  (/data-catalog/substrate/balances) Blocks  (/data-catalog/substrate/blocks) Calls  (/data-catalog/substrate/calls) Events  (/data-catalog/substrate/events) Extrinsics  (/data-catalog/substrate/extrinsics) Materialized Views  (/data-catalog/substrate/materialized_views) Stakings  (/data-catalog/substrate/stakings) Transfers  (/data-catalog/substrate/transfers) Traces  (/data-catalog/substrate/traces) Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Polkadot polkadot.extrinsics Description of Substrate extrinsics table on Dune. ", "url": "https://docs.dune.com/data-catalog/substrate/extrinsics"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Aptos aptos.events Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Overview  (/data-catalog/aptos/overview) Blocks  (/data-catalog/aptos/blocks) Events  (/data-catalog/aptos/events) Move Modules  (/data-catalog/aptos/move_modules) Move Resources  (/data-catalog/aptos/move_resources) Move Table Items  (/data-catalog/aptos/move_table_items) Signatures  (/data-catalog/aptos/signatures) Transactions  (/data-catalog/aptos/transactions) User Transactions  (/data-catalog/aptos/user_transactions) Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Aptos aptos.events Description of the aptos.events table on Dune ", "url": "https://docs.dune.com/data-catalog/aptos/events"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Polkadot polkadot.events Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Overview  (/data-catalog/substrate/overview) Balances  (/data-catalog/substrate/balances) Blocks  (/data-catalog/substrate/blocks) Calls  (/data-catalog/substrate/calls) Events  (/data-catalog/substrate/events) Extrinsics  (/data-catalog/substrate/extrinsics) Materialized Views  (/data-catalog/substrate/materialized_views) Stakings  (/data-catalog/substrate/stakings) Transfers  (/data-catalog/substrate/transfers) Traces  (/data-catalog/substrate/traces) Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Polkadot polkadot.events Description of the Substrate events tables on Dune. ", "url": "https://docs.dune.com/data-catalog/substrate/events"}
{"content": "\u200b Table description \n The stakings table includes all the data necessary to compute staking-related metrics for Validators, Nominators, Pools, and Pool Members.  This is currently supported for Polkadot and Kusama Relay Chain only. \n ", "url": "https://docs.dune.com/data-catalog/substrate/stakings#table-description"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/substrate/stakings#column-descriptions"}
{"content": "\u200b Table Sample \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/substrate/stakings) Materialized Views  (/data-catalog/substrate/materialized_views) Transfers  (/data-catalog/substrate/transfers) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample)", "url": "https://docs.dune.com/data-catalog/substrate/stakings#table-sample"}
{"content": "\u200b Table description \n This table contains information about all transactions on the Aptos blockchain, including both user-initiated and system transactions. Transactions are the actions that modify the state of the blockchain, such as transfers of tokens or the execution of smart contracts. Each transaction is uniquely identified and linked to the block in which it was included. \n ", "url": "https://docs.dune.com/data-catalog/aptos/transactions#table-description"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/aptos/transactions#column-descriptions"}
{"content": "\u200b Table Sample \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/aptos/transactions) Signatures  (/data-catalog/aptos/signatures) User Transactions  (/data-catalog/aptos/user_transactions) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample)", "url": "https://docs.dune.com/data-catalog/aptos/transactions#table-sample"}
{"content": "\u200b Table description \n The Substrate transfers table stores the types of stored assets, the sender and recipient, and the estimated value of the tokens converted into USD, if available. \n ", "url": "https://docs.dune.com/data-catalog/substrate/transfers#table-description"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/substrate/transfers#column-descriptions"}
{"content": "\u200b Table Sample \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/substrate/transfers) Stakings  (/data-catalog/substrate/stakings) Traces  (/data-catalog/substrate/traces) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample)", "url": "https://docs.dune.com/data-catalog/substrate/transfers#table-sample"}
{"content": "\u200b Table description \n Extrinsics (aka \u201ctransactions\u201d) normally contain a signature, some data to describe if the extrinsic has passed some validity checks and a reference to the pallet and call that it is intended for.  Extrinsics may be signed or unsigned.  Some extrinsics have a complex structure, e.g. when using proxy or utility pallets, resulting in the top-level call initiating other calls involving other pallets. \n Common queries on the  extrinsics  table (e.g.  polkadot.extrinsics ) will typically filter on  block_time ,  section  and  method  and extract JSON encoded information in  data  or  decoded_data .  In many cases, an initial query on the  extrinsics  table is best developed on the calls table instead to properly capture how users often use proxy and utility constructs to interact with the Substrate chain. \n ", "url": "https://docs.dune.com/data-catalog/substrate/extrinsics#table-description"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/substrate/extrinsics#column-descriptions"}
{"content": "\u200b Table Sample \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/substrate/extrinsics) Events  (/data-catalog/substrate/events) Materialized Views  (/data-catalog/substrate/materialized_views) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample)", "url": "https://docs.dune.com/data-catalog/substrate/extrinsics#table-sample"}
{"content": "\u200b Table description \n This table captures the events that are emitted by smart contracts on the Aptos blockchain. Events are used to log significant actions and changes in smart contracts, such as token transfers or updates to contract states. Each event is linked to the transaction that triggered it, providing a detailed audit trail of contract interactions. \n ", "url": "https://docs.dune.com/data-catalog/aptos/events#table-description"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/aptos/events#column-descriptions"}
{"content": "\u200b Table Sample \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/aptos/events) Blocks  (/data-catalog/aptos/blocks) Move Modules  (/data-catalog/aptos/move_modules) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample)", "url": "https://docs.dune.com/data-catalog/aptos/events#table-sample"}
{"content": "\u200b Table description \n The  events  table (e.g.  polkadot.events ) holds all events that occur on the chain, including their pallet  section  and  method , as well as the decoded data involved in the event. \n Common queries on the  events  table will typically filter on  block_time ,  section  and  method  and extract JSON encoded information in\n data  or  decoded_data . \n ", "url": "https://docs.dune.com/data-catalog/substrate/events#table-description"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/substrate/events#column-descriptions"}
{"content": "\u200b Table Sample \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/substrate/events) Calls  (/data-catalog/substrate/calls) Extrinsics  (/data-catalog/substrate/extrinsics) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample)", "url": "https://docs.dune.com/data-catalog/substrate/events#table-sample"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Create Queries Finding Tables Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Web App Overview  (/web-app/overview) Create Queries Writing Queries  (/web-app/query-editor/query-window) Finding Tables  (/web-app/query-editor/data-explorer) Using Parameters  (/web-app/query-editor/parameters) Scheduling Queries  (/web-app/query-editor/query-scheduler) Query Lineage  (/web-app/query-editor/query-lineage) Version History  (/web-app/query-editor/version-history) Create Visualizations Decoding Contracts Create Dashboards  (/web-app/dashboards) Mint Dashboards  (/web-app/dashboard-minting) Teams on Dune  (/web-app/teams) Dune AI  (/web-app/dune-ai) Upload Data  (/web-app/upload-data) Share your work  (/web-app/embeds) Search content  (/web-app/search) Alerts  (/web-app/alerts) Bug Bounty  (/web-app/bug-bounty) Create Queries Finding Tables The Data Explorer allows you to search for blockchain and other data to use in your Queries. Here\u2019s how it works. \n The left sidebar of the query editor is the Data Explorer. It allows you to search for blockchain and other data to use in your queries. \n You can learn about Dune\u2019s data tables  in the data tables section  (/data-catalog) . \n ", "url": "https://docs.dune.com/web-app/query-editor/data-explorer"}
{"content": "\u200b Browsing data \n Here is a simple example of how to use the Data Explorer to find the data you need: \n \n Click on one of the categories in the left sidebar to see the tables available in that category. \n Filter the tables through the dropdowns in the top right corner. \n Check out the table preview to see what data is available in that table. \n Click on the arrow next to the table name to include it in your query. \n \n \n ", "url": "https://docs.dune.com/web-app/query-editor/data-explorer#browsing-data"}
{"content": "\u200b Finding specific tables \n You can also search for specific tables in the Data Explorer. \n \n Choose the \u201cdecoded projects\u201d category. \n Type the projects name in the search bar. \n Choose the project you want to explore. \n Type the smart contract name in the search bar. \n Choose the smart contract you want to explore. \n \n You can also use the search bar to search by contract address, table name, or any other keyword. \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /web-app/query-editor/data-explorer) Writing Queries  (/web-app/query-editor/query-window) Using Parameters  (/web-app/query-editor/parameters) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Browsing data  (#browsing-data) Finding specific tables  (#finding-specific-tables)", "url": "https://docs.dune.com/web-app/query-editor/data-explorer#finding-specific-tables"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Aptos aptos.move_resources Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Overview  (/data-catalog/aptos/overview) Blocks  (/data-catalog/aptos/blocks) Events  (/data-catalog/aptos/events) Move Modules  (/data-catalog/aptos/move_modules) Move Resources  (/data-catalog/aptos/move_resources) Move Table Items  (/data-catalog/aptos/move_table_items) Signatures  (/data-catalog/aptos/signatures) Transactions  (/data-catalog/aptos/transactions) User Transactions  (/data-catalog/aptos/user_transactions) Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Aptos aptos.move_resources Description of the aptos.move_resources table on Dune ", "url": "https://docs.dune.com/data-catalog/aptos/move_resources"}
{"content": "\u200b Table description \n This table stores information about the Move resources on the Aptos blockchain. Move resources are persistent data structures that are owned by user accounts and can represent various on-chain assets or states. This table includes details on the resource type, the account that owns it, and the resource\u2019s data. \n ", "url": "https://docs.dune.com/data-catalog/aptos/move_resources#table-description"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/aptos/move_resources#column-descriptions"}
{"content": "\u200b Table Sample \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/aptos/move_resources) Move Modules  (/data-catalog/aptos/move_modules) Move Table Items  (/data-catalog/aptos/move_table_items) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample)", "url": "https://docs.dune.com/data-catalog/aptos/move_resources#table-sample"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation NFT NFT.trades on ink Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink Overview  (/data-catalog/evm/ink/overview) Raw Decoded Curated DEX NFT NFT Trades  (/data-catalog/evm/ink/curated-data/nft/nft-trades) KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Overview  (/data-catalog/evm/ink/overview) Raw Decoded Curated DEX NFT NFT Trades  (/data-catalog/evm/ink/curated-data/nft/nft-trades) Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot NFT NFT.trades on ink The  nft.trades  table captures detailed data on NFT marketplaces, recording all trade events across various protocols on ink.  This is a cross-chain table but can be filtered for  ink  transactions. Table Description The `nft.trades` table on Dune Analytics is central to capturing and analyzing Non-Fungible Token (NFT) transactions across various marketplaces. It is a pivotal resource for dissecting the intricacies of NFT trade execution, market behavior, and collector activity within the NFT space. Usage The `nft.trades` table serves as an essential tool for delving into the NFT market's complexities. It offers a detailed snapshot of each NFT transaction, encompassing data points such as sale price, transaction timestamp, buyer and seller addresses, and the specific NFT assets involved. This table allows analysts to explore trends in NFT valuation, trading volumes, and marketplace dynamics, providing insights into the evolving landscape of digital collectibles and art. Table Coverage  The following table shows which projects and versions of those projects are covered in the  dex.trades  table on  ink .  Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/ink/curated-data/nft/nft-trades) Aggregator Trades  (/data-catalog/evm/ink/curated-data/dex/dex-aggregator-trades) Overview  (/data-catalog/evm/kaia/overview) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/ink/curated-data/nft/nft-trades"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Aptos aptos.signatures Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Overview  (/data-catalog/aptos/overview) Blocks  (/data-catalog/aptos/blocks) Events  (/data-catalog/aptos/events) Move Modules  (/data-catalog/aptos/move_modules) Move Resources  (/data-catalog/aptos/move_resources) Move Table Items  (/data-catalog/aptos/move_table_items) Signatures  (/data-catalog/aptos/signatures) Transactions  (/data-catalog/aptos/transactions) User Transactions  (/data-catalog/aptos/user_transactions) Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Aptos aptos.signatures Description of the aptos.signatures table on Dune ", "url": "https://docs.dune.com/data-catalog/aptos/signatures"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Aptos aptos.move_table_items Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Overview  (/data-catalog/aptos/overview) Blocks  (/data-catalog/aptos/blocks) Events  (/data-catalog/aptos/events) Move Modules  (/data-catalog/aptos/move_modules) Move Resources  (/data-catalog/aptos/move_resources) Move Table Items  (/data-catalog/aptos/move_table_items) Signatures  (/data-catalog/aptos/signatures) Transactions  (/data-catalog/aptos/transactions) User Transactions  (/data-catalog/aptos/user_transactions) Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Aptos aptos.move_table_items Description of the aptos.move_table_items table on Dune ", "url": "https://docs.dune.com/data-catalog/aptos/move_table_items"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Aptos aptos.blocks Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Overview  (/data-catalog/aptos/overview) Blocks  (/data-catalog/aptos/blocks) Events  (/data-catalog/aptos/events) Move Modules  (/data-catalog/aptos/move_modules) Move Resources  (/data-catalog/aptos/move_resources) Move Table Items  (/data-catalog/aptos/move_table_items) Signatures  (/data-catalog/aptos/signatures) Transactions  (/data-catalog/aptos/transactions) User Transactions  (/data-catalog/aptos/user_transactions) Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Aptos aptos.blocks Description of the aptos.blocks table on Dune ", "url": "https://docs.dune.com/data-catalog/aptos/blocks"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded Event Logs Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Overview  (/data-catalog/evm/ethereum/overview) Raw Decoded Overview  (/data-catalog/evm/ethereum/decoded/overview) Call Tables  (/data-catalog/evm/ethereum/decoded/call-tables) Event Logs  (/data-catalog/evm/ethereum/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/ethereum/decoded/contracts) logs_decoded  (/data-catalog/evm/ethereum/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/ethereum/decoded/traces-decoded) Curated Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded Event Logs Smart Contracts emit event logs when certain predefined actions are completed. ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/decoded/event-logs"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded ethereum.logs_decoded Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Overview  (/data-catalog/evm/ethereum/overview) Raw Decoded Overview  (/data-catalog/evm/ethereum/decoded/overview) Call Tables  (/data-catalog/evm/ethereum/decoded/call-tables) Event Logs  (/data-catalog/evm/ethereum/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/ethereum/decoded/contracts) logs_decoded  (/data-catalog/evm/ethereum/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/ethereum/decoded/traces-decoded) Curated Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded ethereum.logs_decoded Description of the ethereum.logs_decoded table on Dune ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/decoded/logs-decoded"}
{"content": "\u200b Table description \n This table documents the signatures associated with transactions on the Aptos blockchain. Signatures are critical for securing transactions, proving the identity of the sender, and ensuring data integrity. This table includes the signature type, data, and the transaction it authenticates, offering insights into the security mechanisms at play. \n ", "url": "https://docs.dune.com/data-catalog/aptos/signatures#table-description"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/aptos/signatures#column-descriptions"}
{"content": "\u200b Table Sample \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/aptos/signatures) Move Table Items  (/data-catalog/aptos/move_table_items) Transactions  (/data-catalog/aptos/transactions) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample)", "url": "https://docs.dune.com/data-catalog/aptos/signatures#table-sample"}
{"content": "\u200b Table description \n This table tracks the items stored in Move\u2019s table data structures on the Aptos blockchain. The Move table is a high-performance, typed data structure used for storing and querying on-chain data. This table details the key-value pairs stored, facilitating efficient data access and manipulation within smart contracts. \n ", "url": "https://docs.dune.com/data-catalog/aptos/move_table_items#table-description"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/aptos/move_table_items#column-descriptions"}
{"content": "\u200b Table Sample \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/aptos/move_table_items) Move Resources  (/data-catalog/aptos/move_resources) Signatures  (/data-catalog/aptos/signatures) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample)", "url": "https://docs.dune.com/data-catalog/aptos/move_table_items#table-sample"}
{"content": "\u200b Table description \n This table represents the blocks in the Aptos blockchain. A block is a collection of transactions, and is identified by a unique block identifier. Each block contains a timestamp and a reference to the previous block hash, forming a chain of blocks. The block structure is crucial for the blockchain\u2019s integrity and security, ensuring a verifiable and tamper-evident ledger. \n ", "url": "https://docs.dune.com/data-catalog/aptos/blocks#table-description"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/aptos/blocks#column-descriptions"}
{"content": "\u200b Table Sample \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/aptos/blocks) Overview  (/data-catalog/aptos/overview) Events  (/data-catalog/aptos/events) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample)", "url": "https://docs.dune.com/data-catalog/aptos/blocks#table-sample"}
{"content": "\u200b Overview \n Smart contracts emit event logs when certain predefined actions are completed. The emitted event logs are stored on the blockchain and are publicly accessible. Event logs are an important tool for smart contract developers to communicate with the outside world, as well as for data analysts to keep track of what happens inside of a smart contract. \n For example, the ERC20 standard defines the  Transfer  event, which is emitted every time a token transfer occurs. The event log contains the sender, the recipient and the amount of tokens transferred. \n event   Transfer ( address   indexed   from ,   address   indexed  to ,   uint256  value ) ; \n \n Decoded event logs always originate from the fields  topic0 ,  topic1 ,  topic2 ,  topic3  and  data  in the  logs  table. \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/decoded/event-logs#overview"}
{"content": "\u200b Event Logs in Dune \n In Dune, we store all event logs of decoded smart contracts in separate tables. \n The structure published in these logs is predefined by the developer of the smart contract, the content is dynamically created during the transaction. \n Logs are useful for monitoring, alerting and in general keeping track of what happens inside of a smart contract. Logs are your best friend as a data analyst since they reliably present you with data that is intended to be analyzed post factum. If you ever want to see which logs  can  be emitted by a smart contract, you can simply search for the keyword  emit  in the source code of the smart contract. \n We will decode all event logs for smart contracts into tables named accordingly to this schema: \n [projectname_blockchain].[contractName]_evt_[eventName] \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/decoded/event-logs#event-logs-in-dune"}
{"content": "\u200b Example \n Let\u2019s take the  uniswap v3 factory  (https://etherscan.io/address/0x1f98431c8ad98523631ae4a59f267346ea31f984#code)  as an example and look at the event that gets emitted upon the creation of a new pool. The event is called  PoolCreated  and gets emitted every time somebody successfully deploys a new Uniswap V3 pool by calling the function  createPool . The event will readily give us information like the tokens in the pool, the fee tier of this pool and the tick spacing. In Etherscan, you can easily look at the event logs of transaction by opening the  logs tab  (https://etherscan.io/tx/0xdeb368592f3de0f2840754bce61d2c3f29cdb3407c63c699052e68a854c71eaa#eventlog) . In Dune, this particular event will be stored in the table: \n uniswap_v3_ethereum.Factory_evt_PoolCreated \n \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/decoded/event-logs#example"}
{"content": "\u200b Multiple Instances \n If there is multiple instances of a contract we will collect all event logs across all instances of this smart contract in one table. For example, all uniswap v3 pool  swap  events (on ethereum) are stored in the table:  uniswap_v3_ethereum.Pair_evt_Swap \n The column  contract_address  indicates as to which smart contract emitted this event. \n \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/decoded/event-logs#multiple-instances"}
{"content": "\u200b Further Reading \n \n Understanding event logs on the Ethereum blockchain  (https://medium.com/mycrypto/understanding-event-logs-on-the-ethereum-blockchain-f4ae7ba50378) \n Everything You Ever Wanted to Know About Events and Logs on Ethereum  (https://medium.com/linum-labs/everything-you-ever-wanted-to-know-about-events-and-logs-on-ethereum-fec84ea7d0a5) \n \n Submit any contract for decoding  (https://dune.com/decode) Explore already decoded contracts  (/data-catalog/evm/ethereum/decoded/contracts) Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/ethereum/decoded/event-logs) Call Tables  (/data-catalog/evm/ethereum/decoded/call-tables) Decoded Contracts  (/data-catalog/evm/ethereum/decoded/contracts) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Overview  (#overview) Event Logs in Dune  (#event-logs-in-dune) Example  (#example) Multiple Instances  (#multiple-instances) Further Reading  (#further-reading)", "url": "https://docs.dune.com/data-catalog/evm/ethereum/decoded/event-logs#further-reading"}
{"content": "\u200b Table Description \n The  logs_decoded  table contains decoded logs from Ethereum transactions. The table matches  topic0  to the event signature and the corresponding event name. The table does not contain the full event data and is not suitable for analysis of smart contract level data. For that, use the specific event tables as described in  Event Logs  (/data-catalog/evm/ethereum/decoded/event-logs) . \n This table is great for gaining a high level understanding of the types of events that are being emitted by a smart contract or smart contracts of a certain protocol. \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/decoded/logs-decoded#table-description"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/decoded/logs-decoded#column-descriptions"}
{"content": "\u200b Table Sample \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/ethereum/decoded/logs-decoded) Decoded Contracts  (/data-catalog/evm/ethereum/decoded/contracts) Decoded Traces  (/data-catalog/evm/ethereum/decoded/traces-decoded) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table Description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample)", "url": "https://docs.dune.com/data-catalog/evm/ethereum/decoded/logs-decoded#table-sample"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded ethereum.contracts Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Overview  (/data-catalog/evm/ethereum/overview) Raw Decoded Overview  (/data-catalog/evm/ethereum/decoded/overview) Call Tables  (/data-catalog/evm/ethereum/decoded/call-tables) Event Logs  (/data-catalog/evm/ethereum/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/ethereum/decoded/contracts) logs_decoded  (/data-catalog/evm/ethereum/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/ethereum/decoded/traces-decoded) Curated Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded ethereum.contracts Description of the ethereum.contracts table on Dune ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/decoded/contracts"}
{"content": "\u200b Table Description \n This table contains information about the contracts Dune has decoded on the Ethereum blockchain. \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/decoded/contracts#table-description"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/decoded/contracts#column-descriptions"}
{"content": "\u200b Table Sample \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/ethereum/decoded/contracts) Event Logs  (/data-catalog/evm/ethereum/decoded/event-logs) logs_decoded  (/data-catalog/evm/ethereum/decoded/logs-decoded) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table Description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample)", "url": "https://docs.dune.com/data-catalog/evm/ethereum/decoded/contracts#table-sample"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Tables Delete Table Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Queries Materialized Views Webhooks Data Management Endpoints Tables Overview  (/api-reference/tables/endpoint/overview) POST Create Table  (/api-reference/tables/endpoint/create) POST Insert Data  (/api-reference/tables/endpoint/insert) POST Upload CSV  (/api-reference/tables/endpoint/upload) POST Clear Data  (/api-reference/tables/endpoint/clear) DEL Delete Table  (/api-reference/tables/endpoint/delete) Preset Endpoints DEX EigenLayer EVM Contracts Farcaster Markets Projects Tables Delete Table Delete a Dune table with the specified name and namespace. DELETE / v1 / table / {namespace} / {table_name} Try it \n You must be an admin to delete the table. \n You can also delete a table through  user settings (dune.com) -> data -> delete . \n Deleting a table does not incur credits. \n \n Authorizations \u200b  (#authorization-x-dune-api-key) x-dune-api-key string header required The API key of your team or user. Path Parameters \u200b  (#parameter-namespace) namespace string required The namespace of the table to delete (e.g.  my_user ). \u200b  (#parameter-table-name) table_name string required The name of the table to delete (e.g.  interest_rates ). Response 200 - application/json \u200b  (#response-message) message string The confirmation message of the deleted table Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/tables/endpoint/delete) Clear Data  (/api-reference/tables/endpoint/clear) DEX Pair Stats  (/api-reference/dex/endpoint/dex_pair) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/api-reference/tables/endpoint/delete"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoding Contracts Decoding Contracts Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Web App Overview  (/web-app/overview) Create Queries Create Visualizations Decoding Contracts Decoding Contracts  (/web-app/decoding/decoding-contracts) Multichain Decoding  (/web-app/decoding/multichain-decoding) Survivor's Kit for Contract Submission  (/web-app/decoding/short-guide-contract-submission) Create Dashboards  (/web-app/dashboards) Mint Dashboards  (/web-app/dashboard-minting) Teams on Dune  (/web-app/teams) Dune AI  (/web-app/dune-ai) Upload Data  (/web-app/upload-data) Share your work  (/web-app/embeds) Search content  (/web-app/search) Alerts  (/web-app/alerts) Bug Bounty  (/web-app/bug-bounty) Decoding Contracts Decoding Contracts Instead of working with the logs and traces in their raw states, on Dune we decode smart contract activity into nice human-readable tables. Dune\u2019s extensive catalog of decoded smart contracts are driven by our Wizards. Our decoding process empowers our community to submit the data and build the tables that they\u2019d like to query on Dune! \n But what does decoding mean? Blockchain transaction data starts as bytecode, a low level programming language that can be read by machines. Using the ABI (Application Binary Interface) that is specific to each contract, we translate that bytecode into query-able data tables. \n Explore decoded data  (/data-catalog/evm/ethereum/decoded/overview) \n \n ", "url": "https://docs.dune.com/web-app/decoding/decoding-contracts"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Tables Clear Data Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Queries Materialized Views Webhooks Data Management Endpoints Tables Overview  (/api-reference/tables/endpoint/overview) POST Create Table  (/api-reference/tables/endpoint/create) POST Insert Data  (/api-reference/tables/endpoint/insert) POST Upload CSV  (/api-reference/tables/endpoint/upload) POST Clear Data  (/api-reference/tables/endpoint/clear) DEL Delete Table  (/api-reference/tables/endpoint/delete) Preset Endpoints DEX EigenLayer EVM Contracts Farcaster Markets Projects Tables Clear Data Clear data in a table. POST / v1 / table / {namespace} / {table_name} / clear Try it The  Clear  endpoint removes all the data in the specified table, but does not delete the table. \n Authorizations \u200b  (#authorization-x-dune-api-key) x-dune-api-key string header required The API key of your team or user. Path Parameters \u200b  (#parameter-namespace) namespace string required The the table to clear (e.g.  my_user ). \u200b  (#parameter-table-name) table_name string required The name of the table to clear (e.g.  interest_rates ). Response 200 - application/json \u200b  (#response-message) message string The confirmation message of the cleared table Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/tables/endpoint/clear) Upload CSV  (/api-reference/tables/endpoint/upload) Delete Table  (/api-reference/tables/endpoint/delete) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/api-reference/tables/endpoint/clear"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Tables Insert Data Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Queries Materialized Views Webhooks Data Management Endpoints Tables Overview  (/api-reference/tables/endpoint/overview) POST Create Table  (/api-reference/tables/endpoint/create) POST Insert Data  (/api-reference/tables/endpoint/insert) POST Upload CSV  (/api-reference/tables/endpoint/upload) POST Clear Data  (/api-reference/tables/endpoint/clear) DEL Delete Table  (/api-reference/tables/endpoint/delete) Preset Endpoints DEX EigenLayer EVM Contracts Farcaster Markets Projects Tables Insert Data Insert the data in a file into a table. POST / v1 / table / {namespace} / {table_name} / insert Try it To be able to insert into a table, it must have been created with the  /create endpoint  (./create) . \n \n The data in the files must conform to the schema, and must use the same column names as the schema. \n One successful  /insert  request consumes 1 credits. \n The maximum request size is 1.2GB \n \n ", "url": "https://docs.dune.com/api-reference/tables/endpoint/insert"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Create Queries Using Parameters Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Web App Overview  (/web-app/overview) Create Queries Writing Queries  (/web-app/query-editor/query-window) Finding Tables  (/web-app/query-editor/data-explorer) Using Parameters  (/web-app/query-editor/parameters) Scheduling Queries  (/web-app/query-editor/query-scheduler) Query Lineage  (/web-app/query-editor/query-lineage) Version History  (/web-app/query-editor/version-history) Create Visualizations Decoding Contracts Create Dashboards  (/web-app/dashboards) Mint Dashboards  (/web-app/dashboard-minting) Teams on Dune  (/web-app/teams) Dune AI  (/web-app/dune-ai) Upload Data  (/web-app/upload-data) Share your work  (/web-app/embeds) Search content  (/web-app/search) Alerts  (/web-app/alerts) Bug Bounty  (/web-app/bug-bounty) Create Queries Using Parameters Parameters allow you to implement variables in certain parts of your Query. This is useful if you want to create a Query that you can reuse with different parameters. Parameters allow you to implement variables in certain parts of your Query. This is useful if you want to create a Query that you can reuse with different parameters. \n Parameters in Dune are versatile and can be used in many different ways. You can use them to: \n \n filter on a specific token \n filter on a specific token pair \n filter on a specific address \n filter on a specific date range \n filter on a specific category \n etc. \n \n Parameters can be a  single value  or a  list of values  and you can choose  one  or  multiple  values from a pre-defined list of values. This list can be manually defined or populated from a different query. \n To use parameters: \n \n choose the spot in your Query where you want to implement a parameter \n click on the add parameter button or type  {{example_parameter_name}} \n open the parameter options \n configure your parameter\u2019s name, type, and default value \n \n Parameters can be text, numbers,a date, a manual list of values or a list of values from a different query. \n \n ", "url": "https://docs.dune.com/web-app/query-editor/parameters"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Create Queries Query Lineage Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Web App Overview  (/web-app/overview) Create Queries Writing Queries  (/web-app/query-editor/query-window) Finding Tables  (/web-app/query-editor/data-explorer) Using Parameters  (/web-app/query-editor/parameters) Scheduling Queries  (/web-app/query-editor/query-scheduler) Query Lineage  (/web-app/query-editor/query-lineage) Version History  (/web-app/query-editor/version-history) Create Visualizations Decoding Contracts Create Dashboards  (/web-app/dashboards) Mint Dashboards  (/web-app/dashboard-minting) Teams on Dune  (/web-app/teams) Dune AI  (/web-app/dune-ai) Upload Data  (/web-app/upload-data) Share your work  (/web-app/embeds) Search content  (/web-app/search) Alerts  (/web-app/alerts) Bug Bounty  (/web-app/bug-bounty) Create Queries Query Lineage Visualize and trace all tables, views, and nested query dependencies within a query to understand data relationships efficiently. ", "url": "https://docs.dune.com/web-app/query-editor/query-lineage"}
{"content": "\u200b A. The Lifecycle of Decoding \n ", "url": "https://docs.dune.com/web-app/decoding/decoding-contracts#a-the-lifecycle-of-decoding"}
{"content": "\u200b Step 1: Submission \n Our decoding process begins with our  contract submission page  (https://dune.com/contracts/new) .\n \n To successfully submit a contract, you will need four pieces of information: \n \n Blockchain : Blockchain the contract is deployed on \n Contract Address : The address of the contract you want to decode \n Project Name : The name of the project that the contract originates from (e.g. Tether, Uniswap, Bancor) \n Contract Name : The name of the smart contract as given by the project (ex. USDT, Pair, LiquidityFactory) \n ABI : Unique to each smart contract. Further details can be found  here  (https://docs.soliditylang.org/en/latest/abi-spec.html) . Note that for contracts that are verified by a chain\u2019s explorer we will attempt to auto-fetch the ABI. Otherwise the ABI will need to be entered manually. \n \n In most cases, the contract name will be pulled directly from a blockchain scanner. We recommend using the name provided. If the name is not automatically provided, please follow our naming conventions to assure the contract is properly assimilated into Dune\u2019s database. \n ", "url": "https://docs.dune.com/web-app/decoding/decoding-contracts#step-1-submission"}
{"content": "\u200b When do you need Advanced Options? \n \u200b  (#are-there-several-instances-of-this-contract-dynamic-contract) Are there several instances of this contract? (dynamic contract) \n Contract \u201cinstances\u201d are contracts on the same chain with the same bytecode (and therefore the same ABI) for  the same project . If you check this box, Dune can decode all instances of this project on the given blockchain with the same bytecode and ABI, consolidating them into the same tables under one  namespace.project  directory without multiple submissions. \n To check for other instances of the contract, go to a blockchain explorer and look for \u201cSimilar Match Source Code\u201d under the Contract tab. Here is  an example  (https://etherscan.io/address/0x58a70c59cb1f0e30c3d7ad84b96170221cbf322f#code) :\n \n Decoded via dynamic contract detection \n Contracts decoded this way are referred to as dynamically decoded by Dune. These are contracts that are decoded automatically because users checked the box \u201cAre there several instances of this contract?\u201d when submitting the contract. Note that Dune only considers a contract a dynamic instance if the bytecode matches 100%. This is done by querying the  <chain>_creation_traces  table and matching the  code  field. If the bytecode does not match 100%, we will not decode that instance. \n For example,  this contract  (https://arbiscan.io/address/0x999946a4f40fd2c82d66a68edfefa8430f206c9c#code)  is nearly identical to  this other contract  (https://arbiscan.io/address/0x692e92da68f9b8445a167b985ee0cb38c3bbe594#code)  in terms of bytecode, but Dune currently does not dynamically decode the first contract because we currently require a 100% bytecode match. \n \u200b  (#is-it-created-by-a-factory-contract-factory-contract) Is it created by a factory contract? (factory contract) \n A  factory contract  (https://betterprogramming.pub/learn-solidity-the-factory-pattern-75d11c3e7d29)  is a smart contract that creates other smart contracts. If there are multiple instances of a contract, it might be due to a factory contract. If you check this box, Dune can decode all contracts created by the same factory that use the same ABI, consolidating them into the same tables under one  namespace.project  directory (e.g.,  Pair contract from Uniswap V2  (https://dune.com/queries?category=decoded_project&blockchain=ethereum&namespace=uniswap_v2&contract=Pair&blockchains=ethereum) ). \n When you submit a contract as a factory contract, Dune verifies it by checking if the deployer ( from  address) is a contract and not an EOA. This is done by querying the  <chain>_creation_traces  table. If the  from  address is a contract, Dune will gather all  address  fields created by it for decoding. \n To check if a contract is created by a factory, use a blockchain explorer to see if the \u201cFrom\u201d address in a Contract Creation transaction is a contract or an EOA. For example, this is  a factory-created contract  (https://etherscan.io/address/0x5d5ce36e0b328a48539b48d4f22c31f0fe3dc040#internaltx)  by  Uniswap V3 factory  (https://etherscan.io/address/0x1f98431c8ad98523631ae4a59f267346ea31f984) . \n \n Decoded via the factory pattern \n Contracts decoded this way are referred to as factory decoded by Dune. These contracts are automatically decoded because users checked \u201cIs it created by a factory contract?\u201d when submitting. Dune detects this by querying the  <chain>_creation_traces  table and fetching all  address  fields created by the same  from . \n \u200b  (#dynamic-vs-factory-decoded) Dynamic vs Factory Decoded \n Dynamic decoding anchors on the bytecode being the same, while factory decoding also requires the contract to be deployed by another contract (not an EOA) with the same deployer address. \n Dynamically Decoded Contracts  share the same bytecode but may have different deployers. \n For example,  this contract  (https://etherscan.io/address/0x58a70c59cb1f0e30c3d7ad84b96170221cbf322f)  can be decoded as dynamic because it has the same bytecode as  this contract  (https://etherscan.io/address/0x6d396aaff9f438e2f86979d8367cd9deb364b16f) . Both will appear under the same decoded tables in the  SmartTokens for Bancor  (https://dune.com/queries?category=decoded_project&blockchain=ethereum&namespace=bancor&contract=SmartToken&blockchains=ethereum)  directory but have different deployers ( from  address). \n Factory Decoded Contracts  are deployed by a factory contract and share the same deployer address. \n For example, contracts created by the  Uniswap V3 Factory  (https://etherscan.io/address/0x1f98431c8ad98523631ae4a59f267346ea31f984) , such as  this one  (https://etherscan.io/address/0xb5925e4c1912e3999891f0e71bd3d9b5492d1486#internaltx)  and  this one  (https://etherscan.io/address/0x5d5ce36e0b328a48539b48d4f22c31f0fe3dc040#internaltx) , are factory decoded because they share the same bytecode and deployer. These contracts will appear under the same decoded tables in the  Pair for Uniswap V3  (https://dune.com/queries?category=decoded_project&blockchain=ethereum&namespace=uniswap_v3&contract=Pair&blockchains=ethereum)  directory. \n ", "url": "https://docs.dune.com/web-app/decoding/decoding-contracts#when-do-you-need-advanced-options"}
{"content": "\u200b Other Special Contracts \n Other special smart contracts can be decoded as well, following these conventions: \n \u200b  (#proxy-contract) Proxy contract  (https://info.etherscan.com/what-is-proxy-contract/) \n Submit using the proxy address but with the ABI of the implementation. \n You can identify a proxy contract by looking for the \u201cRead as Proxy\u201d tab on a blockchain explorer. This tab will also show the implementation contract. Here is  an example  (https://arbiscan.io/address/0x90a664846960aafa2c164605aebb8e9ac338f9a0#readProxyContract) . \n \n To decode: \n \n Use the address of the  proxy contract  (https://arbiscan.io/address/0x90a664846960aafa2c164605aebb8e9ac338f9a0) . \n Fetch the ABI of the  implementation contract  (https://arbiscan.io/address/0x90a664846960aafa2c164605aebb8e9ac338f9a0#readProxyContract) . \n \n \n \u200b  (#diamond-proxy-contracts) Diamond proxy contracts \n Submit all the facets using just the same name for the project and contract and upload all the relevant ABIs. This can be done with one ABI representing all facets or separate ABIs for each facet. \n Where can I find this information? Contract addresses can usually be found in a project\u2019s docs. Once you have the contract address, you can use a blockchain explorer to get the rest of the information. Most blockchain explorers have everything you need! \n ", "url": "https://docs.dune.com/web-app/decoding/decoding-contracts#other-special-contracts"}
{"content": "\u200b Resubmissions \n Sometimes you need to resubmit a contract because the name is originally submitted wrong, or you need to update the ABI. Follow the steps as guided. But if you are resubmitting for other reason not listed in the dropdown, provide as much detail as possible to avoid the resubmission being rejected.\n \n ", "url": "https://docs.dune.com/web-app/decoding/decoding-contracts#resubmissions"}
{"content": "\u200b Step 2: Decoding \n Once the contract has been approved for decoding, you will receive a notification in your email. While the table itself may be visible after approval, it may be empty. No reason to worry! Note that it takes around 24 hours from the time the contract has been approved to be fully decoded and incorporated into the Dune database. \n At any point you can check the status of your submitted contract under \u201cContracts\u201d in your settings. \n ", "url": "https://docs.dune.com/web-app/decoding/decoding-contracts#step-2-decoding"}
{"content": "\u200b Step 3: Finding Your Decoded Contract \n One quick tip to find and begin querying your decoded table is to use Dune\u2019s Explorer. When beginning a new query, the Explorer is located to the left side of the Query Editor. From there, follow simple steps: \n \n Drop the contract address of your decoded contract in the search bar \n Pull up the specific function or event you are looking for \n use the  >>  button to immediately populate that table in your Query Editor. \n \n \n Then it\u2019s all ready for you to query. Let the data flow! \n ", "url": "https://docs.dune.com/web-app/decoding/decoding-contracts#step-3-finding-your-decoded-contract"}
{"content": "\u200b B. Frequently Asked Questions \n How do I figure out if my contract has been decoded? There are two main ways to find out if your contract has been decoded. First: Account Settings Information on submitted contracts can be found in your account settings under \u201cContracts\u201d. The status of the contract will reflect one of the following: \n Pending \n Approved/Rejected* \n Note that once a contract has been approved, it takes around 24 hours for the data to be fully decoded and populated into our database. *If the contract is rejected, hover your mouse over the status to see the reason for the rejection. Second: Our  Contract Decoding Dashboard  (https://dune.com/dune/is-my-contract-decoded-yet-v2) \n Built by our decoding team, this dashboard gives you information on the status of any submitted contract. Input the contract address in the box at the top of the dashboard and if the contract has been decoded, the contract information will populate the box along with where it is located in the Dune database. \n I see data on Dune but it doesn't match or is missing what I expected to see Unfortunately, Dune only has access to contract data in circumstances that the contract performed an event that left a trace. Our recommendation is to check out the {blockchain}.traces table to see what information is available for a particular contract. Alternatively, some contracts are upgradeable (ie., the smart contract code can be modified). In this case we may not have all of the ABIs. ABIs can be checked in the ABI column of the {blockchain}.contracts tables. A contract can always be resubmitted with missing ABIs so we can update our data. \n How do I submit contract information manually? If the contract being manually submitted is a Proxy contract, we recommend you to move on to the next section. Although we try to fetch contract information such as the ABI, sometimes this information might not be available through our sources. In those instances, you will need to manually input the contract\u2019s name and its ABI. If the contract has been verified by the chain\u2019s block explorer, you should be able to find this information there. \n How do I submit a proxy contract? In order to properly decode transactions for contracts that fit the  Proxy pattern  (https://blog.openzeppelin.com/proxy-patterns/) , Dune needs to map the Proxy contract\u2019s address with the implementation contract\u2019s ABI. We avoid monitoring the implementation contract\u2019s address because its logic is accessed in transactions via the  DelegateCall  function  (https://medium.com/coinmonks/delegatecall-calling-another-contract-function-in-solidity-b579f804178c) . If we did monitor the implementation contract\u2019s address directly, we would miss out on any event logs in its logic since these are actually fired by the caller (the Proxy in this case) when calling a function through  DelegateCall .  When submitting Proxy-patterned contracts to Dune, you should input the Proxy contract\u2019s address and, if you have it, the Implementation contract\u2019s ABI. If the Proxy has a new implementation upgraded that you wish to decode, use the same project name + contract name and select  \u2018NO\u2019  for several instances!  When you submit the Proxy contract\u2019s address, we\u2019ll attempt to fetch the proxy\u2019s contract name and the implementation address it\u2019s pointing towards to source the Implementation contract\u2019s ABI. If we can\u2019t find the Implementation contract\u2019s ABI, you\u2019ll need to find it using the relevant chain\u2019s blockchain explorer and input it manually. \n How do I submit Diamond Proxy contracts? Similar to vanilla Proxy contracts,  EIP-2535  (https://eips.ethereum.org/EIPS/eip-2535)  contracts can be supported by passing in the address of the Diamond Proxy as well as  a single ABI representing the totality of all the facets interfaces . \n My submission got rejected, why? The most common reason that your submission got rejected is because it has already been decoded! You can make use of  this dashboard  (https://dune.com/dune/is-my-contract-decoded-yet-v2)  to check whether the contract have been decoded. Enter the contract that you wish to decode and hit enter to run: Viewing results: If you see results after running the query, that means the contract is already decoded! You\u2019ll be able to find the decoded tables under \u2018Decoded Projects\u2019 in the data explorer. In the interest of data quality, we reject duplicative, incorrect or low quality submissions. To avoid rejection, be sure to submit accurate contract information! Submissions can be rejected for a number of reasons, including not following the naming conventions, not providing clear data at submission, etc. The particular reason for a contract submission being rejected can be found in account settings under \u201cContracts\u201d by hovering the mouse over the \u201cRejected\u201d status. \n Why am I missing historical data for my contract? It may take up to six hours from the time of contract approval for the contract to be fully decoded along with its historical data. If you still can\u2019t see the data after this period, please reach out to us through our  #decoding Discord channel  (https://discord.com/channels/757637422384283659/850326962152538122) . \n I'm waiting for my data to fully decode. What can I do in the meantime? Need some data urgently but the contract have yet to be fully decoded? You can refer to these queries that utilizes the logs table to get the events: \n Querying Synthetix\u2019s PerpsTracking Event  (https://dune.com/queries/2743182) \n Querying USDT\u2019s AddedBlackList Event  (https://dune.com/queries/3250843) \n \n ", "url": "https://docs.dune.com/web-app/decoding/decoding-contracts#b-frequently-asked-questions"}
{"content": "\u200b Additional Questions? \n Head over to the  #decoding Discord channel  (https://discord.com/channels/757637422384283659/850326962152538122)  and we\u2019ll be happy to help! Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /web-app/decoding/decoding-contracts) Formatting Tables  (/web-app/visualizations/tables) Multichain Decoding  (/web-app/decoding/multichain-decoding) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page A. The Lifecycle of Decoding  (#a-the-lifecycle-of-decoding) Step 1: Submission  (#step-1-submission) When do you need Advanced Options?  (#when-do-you-need-advanced-options) Are there several instances of this contract? (dynamic contract)  (#are-there-several-instances-of-this-contract-dynamic-contract) Is it created by a factory contract? (factory contract)  (#is-it-created-by-a-factory-contract-factory-contract) Dynamic vs Factory Decoded  (#dynamic-vs-factory-decoded) Other Special Contracts  (#other-special-contracts) Proxy contract  (#proxy-contract) Diamond proxy contracts  (#diamond-proxy-contracts) Resubmissions  (#resubmissions) Step 2: Decoding  (#step-2-decoding) Step 3: Finding Your Decoded Contract  (#step-3-finding-your-decoded-contract) B. Frequently Asked Questions  (#b-frequently-asked-questions) Additional Questions?  (#additional-questions)", "url": "https://docs.dune.com/web-app/decoding/decoding-contracts#additional-questions"}
{"content": "\u200b Consistency \n A request to this endpoint has two possible outcomes: Either all of the data in the request was inserted, or none of it was.\nIt\u2019s not possible for parts of the request data to be inserted, while the rest is not inserted.\nIn other words, please use and trust the status codes that the endpoint returns.\nA status code of 200 means that the data in the request was successfully inserted.\nIf you get any other status code, you can safely retry your request after addressing the issue that the error message indicated. \n ", "url": "https://docs.dune.com/api-reference/tables/endpoint/insert#consistency"}
{"content": "\u200b Concurrent requests \n A limited number of concurrent insertion requests per table is supported. However, there will be a slight performance penalty as we serialize the writes behind the scenes to ensure data integrity. Larger number of concurrent requests per table may result in an increased number of failures. Therefore, we recommend managing your requests within a 5-10 threshold to maintain optimal performance. \n ", "url": "https://docs.dune.com/api-reference/tables/endpoint/insert#concurrent-requests"}
{"content": "\u200b Supported filetypes \n ", "url": "https://docs.dune.com/api-reference/tables/endpoint/insert#supported-filetypes"}
{"content": "\u200b CSV files ( Content-Type: text/csv ) \n CSV files must use a comma as delimiter, and the column names in the header must match the column names of the table. \n ", "url": "https://docs.dune.com/api-reference/tables/endpoint/insert#csv-files-content-type-text-csv"}
{"content": "\u200b JSON files ( Content-Type: application/x-ndjson ) \n These are files where each line is a complete JSON object which creates one table row.\nEach line must have keys that match the column names of the table. \n ", "url": "https://docs.dune.com/api-reference/tables/endpoint/insert#json-files-content-type-application-x-ndjson"}
{"content": "\u200b Data types \n DuneSQL supports a variety of types which are not natively supported in many data exchange formats. Here we provide guidance on how to work with such types. \n ", "url": "https://docs.dune.com/api-reference/tables/endpoint/insert#data-types"}
{"content": "\u200b Varbinary values \n When uploading varbinary data using JSON or CSV formats, you need to convert the binary data into a textual representation. Reason being, JSON or CSV don\u2019t natively support binary values. There are many ways to transform binary data to a textual representation. We support  hexadecimal  and  base64  encodings. \n \u200b  (#base64) base64 \n Base64 is a binary-to-text encoding scheme that transforms binary data into a sequence of characters. All characters are taken from a set of 64 characters. \n Example:  {\"varbinary_column\":\"SGVsbG8gd29ybGQK\"} \n \u200b  (#hexadecimal) hexadecimal \n In the hexadecimal representation input data should contain an even number of characters in the range  [0-9a-fA-F]  always prefixed with  0x . \n Example:  {\"varbinary_column\":\"0x92b7d1031988c7af\"} \n Authorizations \u200b  (#authorization-x-dune-api-key) x-dune-api-key string header required The API key of your team or user. Path Parameters \u200b  (#parameter-namespace) namespace string required The namespace of the table to insert into (e.g.  my_user ). \u200b  (#parameter-table-name) table_name string required The name of the table to insert into (e.g.  interest_rates ). Body text/csv \u00b7 file application/x-ndjson The body is of type  file . Response 200 - application/json \u200b  (#response-bytes-written) bytes_written number The number of bytes that were written to the table. \u200b  (#response-rows-written) rows_written number The number of rows that were written to the table. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/tables/endpoint/insert) Create Table  (/api-reference/tables/endpoint/create) Upload CSV  (/api-reference/tables/endpoint/upload) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/api-reference/tables/endpoint/insert#varbinary-values"}
{"content": "\u200b Freeform parameters \n Freeform parameters are useful if you want your users to be able to input any text, number or date value. An example of this would be a parameter that allows users to input an address, a token, or a date. \n The system will automatically detect the type of the value and insert it into the query as the correct type. You can also manually adjust the type within the query by using the  cast  function. \n \n For example: \n -- freeform varbinary parameter \n Select   *   from  ethereum . transactions \n where   \"from\"   =  {{address_parameter}} \n \n -- freeform number parameter \n Select   *   from  dex . trades \n where  amount_usd  >  {{usd_amount_parameter}} \n \n -- freeform date parameter \n Select   *   from  dex . trades \n where  evt_block_time  between  cast ( '{{start_date_parameter}}'   as   timestamp )   and  cast ( '{{end_date_parameter}}'   as   timestamp ) \n \n ", "url": "https://docs.dune.com/web-app/query-editor/parameters#freeform-parameters"}
{"content": "\u200b List parameters \n List parameters are useful if you want your users to be able to choose  one  or  multiple values  from a pre-defined list of values. This list can be manually defined or populated from a different query.\nExamples of this include parameters that allows users to choose from a list of tokens or a list of token pairs. \n \n --- list parameter allowing single value \n Select   *   from  dex . trades \n where  token_pair  =   ( {{token_pair_parameter}} ) \n \n or \n --- list parameter allowing with multiple values \n Select   *   from  dex . trades \n where  token  in   ( Select  token  from  unnest ( split ( '{{token_list_parameter}}' , ',' ) )   as  c ( token ) ) \n \n If you want to allow multiple values, you need to adjust your query for this. Use the  unnest  and  split  functions to turn the columns into useable values.\nBy default, the values will be inserted into the query as individual columns.\n Example : \n A list of 3 selected values in a parameter called  example_parameter_name  will be inserted into the query like this: \n Select  {{example_parameter_name}}  \n \n / *   returns   \n |  column1    |  column2    |  column3    | \n |   --------- | --------- | --------- | \n |  WETH - USDC  |  WBTC - USDC  |  DAI - USDC   | \n * / \n \n Most of the time, you\u2019ll want to use the values in a  where in  clause. To do this, you need to use the  unnest  and  split  functions to turn the columns into useable values.\nFor example: \n Select   *   from  dex . trades \n where  token_pair  in   ( Select  pair  from  unnest ( split ( '{{example_parameter_name}}' , ',' ) )   as  c ( pair ) ) \n \n \u200b  (#manual-list) Manual list \n When you manually define a list of values, the list can be text values, numbers, dates or even varbinary values. The system attemtps to detect the type of the list values, but sometimes you might have to manually adjust the type within the query by using the  cast  function. \n A very common example of using a manual list is setting the \u201ctime granularity\u201d of a dashboard/query. \n Select   \n     date_trunc ( '{{time_granularity_parameter}}' ,  evt_block_time )   as   time ,   \n      sum ( amount_usd )   as  amount_usd \n from  dex . trades \n group   by   1 \n / *  parameter options: \n      -   default   value :  day \n      -  list  values :  day ,  week ,   month \n * / \n \n \u200b  (#list-from-query-results) List from query results \n You can use the results of a query as the list of values for a parameter. Doing this allows you to build dynamic dashboards that allow users to choose from a list of values that is populated by a different query. You can choose any query by its query_id and any column by its name. The column data type will be transferred to the parameter. \n \n Query results The query that you use to populate the list of values does not update automatically. You need to trigger a refresh of the query results to update the list of values. This can happen by either manually refreshing the query results or by setting up a  query schedule  (web-app/query-editor/query-scheduler) . \n This feature can be used in all kinds of ways, but here are a few examples: \n \n to choose from a list of tokens \n to choose from a list of token pairs \n to choose from a list of addresses or labels \n to single out specific products or categories \n \n All of these examples could be solved with a manual list, but using a query to populate the list of values allows you to build dynamic dashboards that update automatically. It also can simply make it easier to manage a list of values that is shared between multiple queries. \n Example 1: \n You can use a distinct query on dex.trades to populate a list of all projects currently in dex.trades. This list can then be used in multiple queries. \n Select   distinct  project  from  dex . trades \n \n link to dashboard  (https://dune.com/dune/query-result-parameter-showcase) \n Example 2: \n Filter on all available perpeptual futures available on synthetix. The master query for this is query_3256054. We can use this query to populate a list of all available perps: \n --query 3256054 constructs the daily open interest for all synthetix perps \n Select   \n      distinct  perp_name  \n from  query_3256054  \n order   by  perp_name \n \n We can then use this list of perps in query_3256054 to make filtering on a specific perp possible: \n . . . \n and  perp_name  in   ( Select  perp_name  from  unnest ( split ( '{{perp_name}}' , ',' ) )   as  b ( perp_name ) ) \n \n link to query  (https://dune.com/queries/3256054/) \n ", "url": "https://docs.dune.com/web-app/query-editor/parameters#list-parameters"}
{"content": "\u200b Parameters in query descriptions \n You can use parameters in the description of a query. This feature is useful to effortlessly report on the current value of a parameter. For example, you can use this to report on the current value of a parameter that is used in a dashboard. \n \n To use a parameter in a query description: \n \n open your query settings \n add the parameter to the query description by using the  {{example_parameter_name}}  syntax \n save your query settings \n your query description will now show the current value of the parameter \n \n ", "url": "https://docs.dune.com/web-app/query-editor/parameters#parameters-in-query-descriptions"}
{"content": "\u200b Parameters in dashboards \n If you want to use the same parameter between different queries on a dashboard, make sure to use exactly the same settings for the parameter in each query. The parameter will then be shared between the queries and only turn up once in the dashboard\u2019s parameter menu. Exactly the same settings means: \n \n the parameter name is the same \n the parameter type is the same \n the parameter default value is the same \n the parameter list of values is the same \n the query id and column name for a list of values from a query is the same \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /web-app/query-editor/parameters) Finding Tables  (/web-app/query-editor/data-explorer) Scheduling Queries  (/web-app/query-editor/query-scheduler) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Freeform parameters  (#freeform-parameters) List parameters  (#list-parameters) Manual list  (#manual-list) List from query results  (#list-from-query-results) Parameters in query descriptions  (#parameters-in-query-descriptions) Parameters in dashboards  (#parameters-in-dashboards)", "url": "https://docs.dune.com/web-app/query-editor/parameters#parameters-in-dashboards"}
{"content": "\u200b Overview \n The Query Lineage section provides an organized, directed graph view of the tables, views, and  nested queries  (../../query-engine/query-a-query)  involved in your query.\nThis graph, displayed below the query editor, shows all tables, views, and other queries your query directly references.\nWhen  a query references another query  (../../query-engine/query-a-query) , all levels of dependencies within those queries are shown.\nFor views, lineage stops at the first-level reference, offering a streamlined view without tracing further nested dependencies. \n \n This graph allows for an intuitive exploration of data relationships, as you can click on any referenced queries, tables, or views to jump directly to their definitions. \n ", "url": "https://docs.dune.com/web-app/query-editor/query-lineage#overview"}
{"content": "\u200b Key Features \n \n Interactive Graph Navigation:  Click through queries, tables, and views directly from the lineage graph to explore definitions. \n Comprehensive Query Lineage:  Trace all levels of referenced queries to see the full path of data dependencies. \n Simplified View Lineage:  Limit view lineage to the first level, reducing complexity in multi-layered dependencies. \n \n ", "url": "https://docs.dune.com/web-app/query-editor/query-lineage#key-features"}
{"content": "\u200b How Query Lineage Works \n \n Full Query Lineage:  For each query, Query Lineage displays all tables, views, and queries it references. If a referenced query itself references additional queries or tables, those are also shown, providing the complete chain of dependencies. \n Limited View Lineage:  For views, Query Lineage includes only the first-level reference. If a view references another view or table, further dependencies within those views are not displayed, offering a concise overview. \n \n ", "url": "https://docs.dune.com/web-app/query-editor/query-lineage#how-query-lineage-works"}
{"content": "\u200b Accessing Query Lineage \n To view a query\u2019s lineage: \n \n Open a query in Dune\u2019s Web App. \n Navigate to the  Query Lineage  section below the query editor and next to the visualizations. \n A directed graph of the query\u2019s lineage will appear, with clickable links for each referenced query, table, or view. \n \n To view the lineage graph in full-screen mode, click the expand icon in the top-right corner of the graph. \n Different kinds of objects in the graph are displayed with distinct colors to help you quickly identify them: Dune-defined tables and views are shown in orange, Referenced queries appear in blue and Materialized views are displayed in green. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /web-app/query-editor/query-lineage) Scheduling Queries  (/web-app/query-editor/query-scheduler) Version History  (/web-app/query-editor/version-history) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Overview  (#overview) Key Features  (#key-features) How Query Lineage Works  (#how-query-lineage-works) Accessing Query Lineage  (#accessing-query-lineage)", "url": "https://docs.dune.com/web-app/query-editor/query-lineage#accessing-query-lineage"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw ethereum.logs Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Overview  (/data-catalog/evm/ethereum/overview) Raw Transactions  (/data-catalog/evm/ethereum/raw/transactions) Logs  (/data-catalog/evm/ethereum/raw/logs) Traces  (/data-catalog/evm/ethereum/raw/traces) Creation Traces  (/data-catalog/evm/ethereum/raw/creation-traces) Blocks  (/data-catalog/evm/ethereum/raw/blocks) Withdrawals  (/data-catalog/evm/ethereum/raw/withdrawals) Decoded Curated Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw ethereum.logs Description of the ethereum.logs table on Dune ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/logs"}
{"content": "\u200b Table Description \n The  logs  table represents the logs generated by the Ethereum Virtual Machine (EVM) when a contract is executed. Logs are a way to store data on the blockchain. Logs originate from  events that occur during the execution of a smart contract. A log consists of: \n \n topic list: a list of 0 to 4 32-byte data topics.  Topic0  is the hash of the signature of the event (indexed), and the remaining topics are indexed parameters of the event. \n data: contains non-indexed data. \n \n This is the raw version of this table, for decoded event logs, see the  decoded logs  (/data-catalog/evm/ethereum/decoded/event-logs)  section. \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/logs#table-description"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/logs#column-descriptions"}
{"content": "\u200b Table Sample \n \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/logs#table-sample"}
{"content": "\u200b Examples \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/logs#examples"}
{"content": "\u200b Filter the logs for a specific contract \n select   * \n from  ethereum . logs \n where  contract_address  =   0x06012c8cf97bead5deae237070f9587f8e7a266d \n limit   10 \n \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/logs#filter-the-logs-for-a-specific-contract"}
{"content": "\u200b Filter the logs for a specific topic \n select   * \n from  ethereum . logs \n where  topic0  =   0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef \n \n \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/logs#filter-the-logs-for-a-specific-topic"}
{"content": "\u200b Show the logs of a specific block \n SELECT   * \n FROM  ethereum . logs \n WHERE  evt_block_number  =   1000000 \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/ethereum/raw/logs) Transactions  (/data-catalog/evm/ethereum/raw/transactions) Traces  (/data-catalog/evm/ethereum/raw/traces) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table Description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample) Examples  (#examples) Filter the logs for a specific contract  (#filter-the-logs-for-a-specific-contract) Filter the logs for a specific topic  (#filter-the-logs-for-a-specific-topic) Show the logs of a specific block  (#show-the-logs-of-a-specific-block)", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/logs#show-the-logs-of-a-specific-block"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Tables Create Table Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Queries Materialized Views Webhooks Data Management Endpoints Tables Overview  (/api-reference/tables/endpoint/overview) POST Create Table  (/api-reference/tables/endpoint/create) POST Insert Data  (/api-reference/tables/endpoint/insert) POST Upload CSV  (/api-reference/tables/endpoint/upload) POST Clear Data  (/api-reference/tables/endpoint/clear) DEL Delete Table  (/api-reference/tables/endpoint/delete) Preset Endpoints DEX EigenLayer EVM Contracts Farcaster Markets Projects Tables Create Table Create a new Dune table with the specified name and namespace. POST / v1 / table / create Try it The resulting table will be empty, and can be inserted into with the  /insert endpoint  (./insert) . \n \n If a table already exists with the same name, the request will fail. \n Column names in the table can\u2019t start with a special character or a digit. \n Each successful table creation consumes 10 credits. \n To delete a table, you can go to  user settings (dune.com) -> data -> delete  or use the  /delete endpoint  (./delete) . \n \n ", "url": "https://docs.dune.com/api-reference/tables/endpoint/create"}
{"content": "\u200b Schema \n You need to define the schema of your data by providing  schema  array of columns in the request. Each column has three parameters: \n name : the name of the field \n type : the data type of the field\n  Dune supports  ISO 8601  (https://www.iso.org/iso-8601-date-and-time-format.html)  timestamp format  \n nullable : if the column is nullable (true/false, true by default) \n Authorizations \u200b  (#authorization-x-dune-api-key) x-dune-api-key string header required The API key of your team or user. Body application/json \u200b  (#body-schema) schema object[] required An ordered list of columns that define the table schema. Cannot be empty. Show   child attributes \u200b  (#body-schema-name) schema. name string required The column name. Can contain letters, numbers, and underscores, but must begin with a letter or an underscore. \u200b  (#body-schema-type) schema. type enum<string> required The column type. Available options:   varchar ,   integer ,   double ,   boolean ,   int256 ,   uint256 ,   varbinary ,   timestamp   \u200b  (#body-schema-nullable) schema. nullable boolean Flag that denotes if the column is nullable (true/false, true by default). \u200b  (#body-table-name) table_name string required The name of the table to create. Must begin with a lowercase letter and contain only lowercase letters, digits, and underscores. \u200b  (#body-description) description string A description of the table. \u200b  (#body-is-private) is_private boolean default: false If true, the table will be private. If private it is only visible to the team or user that your API key is associated with. \u200b  (#body-namespace) namespace string The namespace of the table to create. Only the name of your associated API key is allowed at the moment, i.e. either  my_user  or  my_team . (Optional. Default is the namespace of your API key.) Response 200 - application/json \u200b  (#response-already-existed) already_existed boolean Whether the request already existed. \u200b  (#response-example-query) example_query string An example query to use on Dune querying your new table. \u200b  (#response-full-name) full_name string The full name of the table, as it should be referred to in a query. \u200b  (#response-message) message string A message explaining whether the table was created in this request or not. The same information is encoded in  already_existed . \u200b  (#response-namespace) namespace string The namespace of the table. \u200b  (#response-table-name) table_name string The name of the table. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/tables/endpoint/create) Overview  (/api-reference/tables/endpoint/overview) Insert Data  (/api-reference/tables/endpoint/insert) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/api-reference/tables/endpoint/create#schema"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded ethereum.traces_decoded Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Overview  (/data-catalog/evm/ethereum/overview) Raw Decoded Overview  (/data-catalog/evm/ethereum/decoded/overview) Call Tables  (/data-catalog/evm/ethereum/decoded/call-tables) Event Logs  (/data-catalog/evm/ethereum/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/ethereum/decoded/contracts) logs_decoded  (/data-catalog/evm/ethereum/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/ethereum/decoded/traces-decoded) Curated Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded ethereum.traces_decoded Description of the ethereum.traces_decoded table on Dune ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/decoded/traces-decoded"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded Call Tables Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Overview  (/data-catalog/evm/ethereum/overview) Raw Decoded Overview  (/data-catalog/evm/ethereum/decoded/overview) Call Tables  (/data-catalog/evm/ethereum/decoded/call-tables) Event Logs  (/data-catalog/evm/ethereum/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/ethereum/decoded/contracts) logs_decoded  (/data-catalog/evm/ethereum/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/ethereum/decoded/traces-decoded) Curated Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded Call Tables On Dune, we parse all message calls and transactions made to smart contracts in their own tables. ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/decoded/call-tables"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Bitcoin bitcoin.blocks Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin Overview  (/data-catalog/bitcoin/overview) Blocks  (/data-catalog/bitcoin/blocks) Inputs  (/data-catalog/bitcoin/inputs) Outputs  (/data-catalog/bitcoin/outputs) Transactions  (/data-catalog/bitcoin/transactions) NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Bitcoin bitcoin.blocks Description of the bitcoin.blocks table on Dune ", "url": "https://docs.dune.com/data-catalog/bitcoin/blocks"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw ethereum.blocks Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Overview  (/data-catalog/evm/ethereum/overview) Raw Transactions  (/data-catalog/evm/ethereum/raw/transactions) Logs  (/data-catalog/evm/ethereum/raw/logs) Traces  (/data-catalog/evm/ethereum/raw/traces) Creation Traces  (/data-catalog/evm/ethereum/raw/creation-traces) Blocks  (/data-catalog/evm/ethereum/raw/blocks) Withdrawals  (/data-catalog/evm/ethereum/raw/withdrawals) Decoded Curated Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw ethereum.blocks Description of the ethereum.blocks table on Dune ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/blocks"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw ethereum.withdrawals Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Overview  (/data-catalog/evm/ethereum/overview) Raw Transactions  (/data-catalog/evm/ethereum/raw/transactions) Logs  (/data-catalog/evm/ethereum/raw/logs) Traces  (/data-catalog/evm/ethereum/raw/traces) Creation Traces  (/data-catalog/evm/ethereum/raw/creation-traces) Blocks  (/data-catalog/evm/ethereum/raw/blocks) Withdrawals  (/data-catalog/evm/ethereum/raw/withdrawals) Decoded Curated Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw ethereum.withdrawals Description of the ethereum.withdrawals table on Dune Dune does not have beacon chain data yet. This table introduces the action of withdrawing from the beacon chain only.   \n The  Ethereum Improvement Proposal (EIP) 4895  (https://eips.ethereum.org/EIPS/eip-4895)  introduces a system-level \u201coperation\u201d to support validator withdrawals that are \u201cpushed\u201d from the beacon chain to the EVM. \n Withdrawals are represented as a new type of object in the execution payload, called an \u201coperation\u201d, that cleanly separates this \u201csystem-level\u201d operation from regular transactions. Withdrawals provide key information from the consensus layer such as a monotonically increasing index, validator index, recipient address, and the amount of ether given in Gwei. \n Using this table you can observe beacon chain withdrawals. \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/withdrawals"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Aptos aptos.user_transactions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Overview  (/data-catalog/aptos/overview) Blocks  (/data-catalog/aptos/blocks) Events  (/data-catalog/aptos/events) Move Modules  (/data-catalog/aptos/move_modules) Move Resources  (/data-catalog/aptos/move_resources) Move Table Items  (/data-catalog/aptos/move_table_items) Signatures  (/data-catalog/aptos/signatures) Transactions  (/data-catalog/aptos/transactions) User Transactions  (/data-catalog/aptos/user_transactions) Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Aptos aptos.user_transactions Description of the aptos.user_transactions table on Dune ", "url": "https://docs.dune.com/data-catalog/aptos/user_transactions"}
{"content": "\u200b Table Description \n The  traces_decoded  table contains decoded traces from Ethereum transactions. The table matches  MethodID , which consists of the first 4 bytes of any eth call to the trace signature and the corresponding Method name. The table does not contain the full trace data and is not suitable for analysis of smart contract level data. For that, use the specific event tables as described in  Call-tables  (/data-catalog/evm/ethereum/decoded/traces-decoded) . \n This table is great for gaining a high level understanding of the types of events that are being emitted by a smart contract or smart contracts of a certain protocol. \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/decoded/traces-decoded#table-description"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/decoded/traces-decoded#column-descriptions"}
{"content": "\u200b Table Sample \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/ethereum/decoded/traces-decoded) logs_decoded  (/data-catalog/evm/ethereum/decoded/logs-decoded) Dex Trades  (/data-catalog/evm/ethereum/curated-data/dex/dex-trades) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table Description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample)", "url": "https://docs.dune.com/data-catalog/evm/ethereum/decoded/traces-decoded#table-sample"}
{"content": "\u200b Overview \n On Dune, we parse all message calls and transactions made to smart contracts in their own tables. This allows us to isolate the logic of a specific smart contract and analyze how it interacts with other smart contracts. \n The data is stored in the format: \n [projectname_blockchain].[contractName]_call_[functionName] \n This allows us to analyze how a specific function is used in a smart contract, and how often it is called, as well as how it interacts with other smart contracts. \n Call tables always originate from the  traces  table, which contains all the transactions and message calls on the Ethereum network. We parse the  data  field of the  traces  table to decode the function call and parameters. \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/decoded/call-tables#overview"}
{"content": "\u200b Decoding \n When a transaction is sent to a smart contract on the Ethereum network, it contains a  data  field. This  data  field is the encoded function call and parameters. Dune decodes this data and stores it in the corresponding table. \n For example, when a transaction is sent to the  Uniswap v3 factory  (https://etherscan.io/address/0x1f98431c8ad98523631ae4a59f267346ea31f984#code)  contract on the Ethereum network, Dune will decode the  data  field and store it in the table: \n uniswap_v3_ethereum.Factory_call_createPool \n \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/decoded/call-tables#decoding"}
{"content": "\u200b Multiple Instances \n For a contract where multiple instances exist, we will decode all calls to all instances of this smart contract into one table. If there are transactions calling the  swap  function of any instance of the  Uniswap v3 pair  (https://etherscan.io/address/0x8f8ef111b67c04eb1641f5ff19ee54cda062f163#writeContract)  contract, we will decode this data into the table  uniswap_v3_ethereum.Pair_call_swap . The  pair  contract is a template contract and there are many instances of it, each with its own address. The column  contract_address  will indicate the address of the instance of the pair contract that was called. \n \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/decoded/call-tables#multiple-instances"}
{"content": "\u200b Common misconceptions \n One thing to keep in mind here is that  web3.js  (https://web3js.readthedocs.io) ,  web3.py  (https://web3py.readthedocs.io/en/stable)  and all other methods of (locally) calling a  pure ,  read , or  constant  function do not broadcast or publish anything on the blockchain and are therefore not recorded in Dune. \n However, if one of these functions is invoked by another smart contract in the context of a transaction, this will be broadcast on the chain and therefore accessible in Dune. \n In short:  State data stored in the memory of a smart contract is not available on Dune! \n A good example of this is the function  decimals  of the  erc20 token contract  (https://etherscan.io/token/0x1f9840a85d5af5bf1d1762f925bdaddc4201f984#readContract)   Uni  which is a  constant  state variable that is able to be accessed through an automatically created \u201c getter function  (https://docs.soliditylang.org/en/v0.7.4/contracts.html#getter-functions) \u201d. Should a smart contract invoke this function in the context of transaction, this message call will be recorded in the Dune table  uniswap_ethereum.UNI_call_decimals\"  (https://dune.com/queries/741354) . \n This is in contrast to anyone calling this function locally using web3.py/web3.js or using the Etherscan frontend to access this state. These local calls are not recorded in Dune. \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/decoded/call-tables#common-misconceptions"}
{"content": "\u200b Further Reading \n What is the difference between a transaction and a call?  (https://ethereum.stackexchange.com/questions/765/what-is-the-difference-between-a-transaction-and-a-call) Soliditylang.org documentation  (https://docs.soliditylang.org/en/v0.8.13/contracts.html#function-visibility) How Calldata is Encoded  (https://degatchi.com/articles/reading-raw-evm-calldata) Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/ethereum/decoded/call-tables) Overview  (/data-catalog/evm/ethereum/decoded/overview) Event Logs  (/data-catalog/evm/ethereum/decoded/event-logs) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Overview  (#overview) Decoding  (#decoding) Multiple Instances  (#multiple-instances) Common misconceptions  (#common-misconceptions) Further Reading  (#further-reading)", "url": "https://docs.dune.com/data-catalog/evm/ethereum/decoded/call-tables#further-reading"}
{"content": "\u200b Table description \n This table represents the blocks in the Bitcoin blockchain. A block is a collection of transactions, and is identified by a block hash. Each block contains a reference to the previous block, forming a chain of blocks. The first block in the chain is called the genesis block. \n ", "url": "https://docs.dune.com/data-catalog/bitcoin/blocks#table-description"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/bitcoin/blocks#column-descriptions"}
{"content": "\u200b Table Sample \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/bitcoin/blocks) Overview  (/data-catalog/bitcoin/overview) Inputs  (/data-catalog/bitcoin/inputs) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample)", "url": "https://docs.dune.com/data-catalog/bitcoin/blocks#table-sample"}
{"content": "\u200b Table Description \n The  ethereum.blocks  table contains information about blocks in the Ethereum blockchain. A block is a collection of transactions that are hashed and added to the blockchain. Each block contains a reference to the previous block, known as the parent hash, and a timestamp. The table contains information about each block, such as the block number, the block hash, the block size, the number of transactions, and the gas used. \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/blocks#table-description"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/blocks#column-descriptions"}
{"content": "\u200b Table Sample \n \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/blocks#table-sample"}
{"content": "\u200b Examples \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/blocks#examples"}
{"content": "\u200b Show the most recent blocks \n SELECT \n   number , \n    hash , \n   size , \n   gas_used \n FROM \n   ethereum . blocks \n ORDER   BY \n   number  DESC \n LIMIT   10 \n \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/blocks#show-the-most-recent-blocks"}
{"content": "\u200b Show the number of blocks mined each day \n SELECT \n   date_trunc ( 'day' ,   time )   AS   day , \n    count ( distinct  number ) \n FROM \n   ethereum . blocks \n GROUP   BY \n    day \n ORDER   BY \n    day   DESC \n \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/blocks#show-the-number-of-blocks-mined-each-day"}
{"content": "\u200b Show the number of transactions in each block \n SELECT \n   number , \n    count ( * ) \n FROM \n   ethereum . blocks \n group   by   1   \n \n LIMIT   10 \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/ethereum/raw/blocks) Creation Traces  (/data-catalog/evm/ethereum/raw/creation-traces) Withdrawals  (/data-catalog/evm/ethereum/raw/withdrawals) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table Description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample) Examples  (#examples) Show the most recent blocks  (#show-the-most-recent-blocks) Show the number of blocks mined each day  (#show-the-number-of-blocks-mined-each-day) Show the number of transactions in each block  (#show-the-number-of-transactions-in-each-block)", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/blocks#show-the-number-of-transactions-in-each-block"}
{"content": "\u200b How to work with this table \n In order to connect deposits and withdrawals, we must identify the  validator_index  of unique depositors. Since Dune doesn\u2019t have beacon chain data yet, we have to rely on a workaround using a query to obtain a list of valid and active deposits from the Ethereum deposit contract. \n This  query  (https://dune.com/queries/2364548)  returns a list of valid and active deposits, which we can use to identify the  validator_index  of unique depositors. We can use this query to match the  validator_index  of depositors with the  validator_index  of withdrawers in the withdrawals table. \n The Query is manually maintained and therefore may not always be up to date, but most historical data is available. \n LINK TO QUERY  (https://dune.com/queries/2364548) \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/withdrawals#how-to-work-with-this-table"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/withdrawals#column-descriptions"}
{"content": "\u200b Table Sample \n \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/withdrawals#table-sample"}
{"content": "\u200b Examples \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/withdrawals#examples"}
{"content": "\u200b Withdrawals per day \n select \n date_trunc ( 'day' ,  block_time )   as  dt , \n sum ( AMOUNT ) / 1 e9  as  withdraw_amount \n from  ethereum . withdrawals \n group   by   1 \n \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/withdrawals#withdrawals-per-day"}
{"content": "\u200b Dashboards \n https://dune.com/hildobby/eth2-staking  (https://dune.com/hildobby/eth2-staking) \n https://dune.com/hashed_official/staking-as-a-service  (https://dune.com/hashed_official/staking-as-a-service) \n \n ETH Staking Dashboard  (https://dune.com/hildobby/eth2-staking)  - This dashboard provides an overview of the Ethereum 2.0 staking ecosystem. It includes data on the number of validators, the total amount of staked ETH, and the number of deposits and withdrawals. \n Staking as a Service  (https://dune.com/hashed_official/staking-as-a-service)  - This dashboard provides a comprehensive overview of the staking-as-a-service ecosystem. It includes data on the number of validators, the total amount of staked ETH, and the number of deposits and withdrawals. \n \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/withdrawals#dashboards"}
{"content": "\u200b References \n \n Ethereum Improvement Proposal EIP 4895  (https://eips.ethereum.org/EIPS/eip-4895) \n Ethereum 2.0 Deposit Contract  (https://etherscan.io/address/0x00000000219ab540356cbb839cbe05303d7705fa) \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/ethereum/raw/withdrawals) Blocks  (/data-catalog/evm/ethereum/raw/blocks) Overview  (/data-catalog/evm/ethereum/decoded/overview) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page How to work with this table  (#how-to-work-with-this-table) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample) Examples  (#examples) Withdrawals per day  (#withdrawals-per-day) Dashboards  (#dashboards) References  (#references)", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/withdrawals#references"}
{"content": "\u200b Table description \n This table specifically tracks transactions initiated by users of the Aptos blockchain. It includes details such as the sender, the type of transaction, and the gas used, providing insights into how users interact with the network and its smart contracts. \n ", "url": "https://docs.dune.com/data-catalog/aptos/user_transactions#table-description"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/aptos/user_transactions#column-descriptions"}
{"content": "\u200b Table Sample \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/aptos/user_transactions) Transactions  (/data-catalog/aptos/transactions) Overview  (/data-catalog/bitcoin/overview) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample)", "url": "https://docs.dune.com/data-catalog/aptos/user_transactions#table-sample"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation KAIA KAIA Chain Overview Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Overview  (/data-catalog/evm/kaia/overview) Raw Decoded Curated Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot KAIA KAIA Chain Overview KAIA blockchain data on Dune ", "url": "https://docs.dune.com/data-catalog/evm/kaia/overview"}
{"content": "\u200b What is KAIA? \n KAIA is a highly optimized, BFT-based public blockchain designed to meet the performance and reliability needs of enterprises. With features like immediate finality, high transaction throughput, and EVM compatibility, KAIA provides a robust infrastructure for blockchain applications across industries. \n KAIA\u2019s network architecture and consensus mechanism prioritize security and scalability, making it a preferred choice for businesses looking to deploy fast, cost-effective, and scalable blockchain solutions. \n ", "url": "https://docs.dune.com/data-catalog/evm/kaia/overview#what-is-kaia"}
{"content": "\u200b Key Features of KAIA \n KAIA\u2019s infrastructure is built around a few core design goals, ensuring its suitability for enterprise and real-world use cases. These goals drive the performance and flexibility of the blockchain. \n ", "url": "https://docs.dune.com/data-catalog/evm/kaia/overview#key-features-of-kaia"}
{"content": "\u200b Immediate Finality and High Throughput \n KAIA enables 1-second block generation, confirming transactions with immediate finality. The network supports up to  4,000 transactions per second (TPS) , providing the speed and reliability needed for real-time applications. \n ", "url": "https://docs.dune.com/data-catalog/evm/kaia/overview#immediate-finality-and-high-throughput"}
{"content": "\u200b Low-Cost Transactions \n KAIA offers transaction costs at approximately 1/10th the price of Ethereum, making it more accessible for businesses and developers looking to scale operations without high gas fees. \n ", "url": "https://docs.dune.com/data-catalog/evm/kaia/overview#low-cost-transactions"}
{"content": "\u200b EVM Compatibility \n KAIA is fully compatible with the Ethereum Virtual Machine (EVM), supporting Solidity contracts. This makes it easy for Ethereum developers to migrate their applications to KAIA with minimal changes, leveraging familiar tools like Remix, Hardhat, and Foundry. \n ", "url": "https://docs.dune.com/data-catalog/evm/kaia/overview#evm-compatibility"}
{"content": "\u200b Network Architecture \n KAIA\u2019s network architecture is divided into three logical subnetworks that work together to ensure high performance, scalability, and efficient resource utilization. \n \n Core Cell Network (CCN):  Responsible for transaction verification, block creation, and execution. \n Endpoint Node Network (ENN):  Handles API requests and processes data for auxiliary service chains. \n Service Chain Network (SCN):  Operates independently while connected to the main chain, enabling scalable dApp development. \n \n ", "url": "https://docs.dune.com/data-catalog/evm/kaia/overview#network-architecture"}
{"content": "\u200b Node Types in KAIA \n KAIA employs a tiered architecture with several types of nodes, each serving specific roles: \n \n Consensus Node (CN):  Generates blocks and participates in the consensus process. \n Proxy Node (PN):  Handles transaction requests and network communication. \n Endpoint Node (EN):  Processes API requests and ensures data flow for service chains. \n \n ", "url": "https://docs.dune.com/data-catalog/evm/kaia/overview#node-types-in-kaia"}
{"content": "\u200b Consensus Mechanism \n KAIA utilizes an optimized version of Istanbul BFT (Practical Byzantine Fault Tolerance) for its consensus. This ensures: \n \n Fast Block Finality:  No forks or transaction reversals, providing certainty for real-time applications. \n Verifiable Random Function (VRF):  Used for selecting block proposers, adding randomness to enhance security and decentralization. \n \n ", "url": "https://docs.dune.com/data-catalog/evm/kaia/overview#consensus-mechanism"}
{"content": "\u200b Security and Interoperability \n KAIA incorporates several security measures to protect the integrity of its network: \n \n Validator Key Separation:  Ensures that keys used for validation are kept separate from reward keys, reducing the risk of key theft. \n Cross-Chain Compatibility:  EVM compatibility allows KAIA to interoperate with other EVM-based chains, supporting cross-chain transactions and smart contract execution. \n \n ", "url": "https://docs.dune.com/data-catalog/evm/kaia/overview#security-and-interoperability"}
{"content": "\u200b Token Economy \n KAIA\u2019s native token,  KAIA , plays a central role in its economy: \n \n Block Rewards:  Distributed to validators and stakers to incentivize network participation. \n Inflation Rate:  Initially set at 5.2% annually, with block rewards allocated between creators, stakers, and ecosystem funds to support development and infrastructure. \n \n ", "url": "https://docs.dune.com/data-catalog/evm/kaia/overview#token-economy"}
{"content": "\u200b Governance and Transparency \n KAIA operates with an on-chain governance system where voting power is based on staked KAIA tokens. Governance ensures: \n \n Fair Representation:  Voting rights are capped to prevent dominance by large stakeholders. \n Delegation Allowed:  Token holders can delegate voting power to trusted representatives. \n Transparency:  All governance proposals and transactions are recorded on-chain, ensuring full auditability. \n \n ", "url": "https://docs.dune.com/data-catalog/evm/kaia/overview#governance-and-transparency"}
{"content": "\u200b Why KAIA? \n KAIA is built to lead Web3 adoption in Asia by offering high-performance, low-cost infrastructure for businesses of all sizes. It provides real-world asset (RWA) linkage, abundant liquidity support, and convenient development tools, making it an attractive platform for decentralized applications across various sectors. \n KAIA documentation Access comprehensive documentation for KAIA, providing detailed insights into its zk-Rollup technology, platform architecture, and how to build on it.  (https://docs.kaia.io/learn/) \n ", "url": "https://docs.dune.com/data-catalog/evm/kaia/overview#why-kaia"}
{"content": "\u200b Data Catalog \n Logs Detailed event logs from smart contracts, offering insights into contract interactions and the dynamics of kaia\u2019s zk-Rollup operations.  (./raw/logs) Blocks Information on blocks processed through KAIA\u2019s zk-Rollups, illustrating the network\u2019s enhanced throughput and scalability.  (./raw/blocks) Transactions Extensive transaction data, highlighting the efficiency and reduced costs of operations on kaia.  (./raw/transactions) decoded Decoded transaction data for easier analysis and deeper understanding of smart contract executions on the kaia network.  (./decoded/overview) Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/kaia/overview) NFT Trades  (/data-catalog/evm/ink/curated-data/nft/nft-trades) Blocks  (/data-catalog/evm/kaia/raw/blocks) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page What is KAIA?  (#what-is-kaia) Key Features of KAIA  (#key-features-of-kaia) Immediate Finality and High Throughput  (#immediate-finality-and-high-throughput) Low-Cost Transactions  (#low-cost-transactions) EVM Compatibility  (#evm-compatibility) Network Architecture  (#network-architecture) Node Types in KAIA  (#node-types-in-kaia) Consensus Mechanism  (#consensus-mechanism) Security and Interoperability  (#security-and-interoperability) Token Economy  (#token-economy) Governance and Transparency  (#governance-and-transparency) Why KAIA?  (#why-kaia) Data Catalog  (#data-catalog)", "url": "https://docs.dune.com/data-catalog/evm/kaia/overview#data-catalog"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Bitcoin bitcoin.inputs Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin Overview  (/data-catalog/bitcoin/overview) Blocks  (/data-catalog/bitcoin/blocks) Inputs  (/data-catalog/bitcoin/inputs) Outputs  (/data-catalog/bitcoin/outputs) Transactions  (/data-catalog/bitcoin/transactions) NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Bitcoin bitcoin.inputs Description of the bitcoin.inputs table on Dune ", "url": "https://docs.dune.com/data-catalog/bitcoin/inputs"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Bitcoin bitcoin.transactions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin Overview  (/data-catalog/bitcoin/overview) Blocks  (/data-catalog/bitcoin/blocks) Inputs  (/data-catalog/bitcoin/inputs) Outputs  (/data-catalog/bitcoin/outputs) Transactions  (/data-catalog/bitcoin/transactions) NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Bitcoin bitcoin.transactions Description of the bitcoin.transactions table on Dune ", "url": "https://docs.dune.com/data-catalog/bitcoin/transactions"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Bitcoin bitcoin.outputs Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin Overview  (/data-catalog/bitcoin/overview) Blocks  (/data-catalog/bitcoin/blocks) Inputs  (/data-catalog/bitcoin/inputs) Outputs  (/data-catalog/bitcoin/outputs) Transactions  (/data-catalog/bitcoin/transactions) NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Bitcoin bitcoin.outputs Description of the bitcoin.outputs table on Dune ", "url": "https://docs.dune.com/data-catalog/bitcoin/outputs"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw degen.traces Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Overview  (/data-catalog/evm/degen/overview) Raw Blocks  (/data-catalog/evm/degen/raw/blocks) Logs  (/data-catalog/evm/degen/raw/logs) Transactions  (/data-catalog/evm/degen/raw/transactions) Traces  (/data-catalog/evm/degen/raw/traces) Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw degen.traces Description of the degen.traces table on Dune ", "url": "https://docs.dune.com/data-catalog/evm/degen/raw/traces"}
{"content": "\u200b Table description \n This table represents the inputs of a transaction. An input is a reference to an output of a previous transaction. It is the source of the funds for the transaction. The input contains the hash of the transaction that contains the output, the index of the output in the transaction, the script that unlocks the output, and the sequence number. \n ", "url": "https://docs.dune.com/data-catalog/bitcoin/inputs#table-description"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/bitcoin/inputs#column-descriptions"}
{"content": "\u200b Table Sample \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/bitcoin/inputs) Blocks  (/data-catalog/bitcoin/blocks) Outputs  (/data-catalog/bitcoin/outputs) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample)", "url": "https://docs.dune.com/data-catalog/bitcoin/inputs#table-sample"}
{"content": "\u200b Table description \n This table represents the transactions on the Bitcoin blockchain. A transaction is a transfer of Bitcoin value that is broadcast to the network and collected into blocks. A transaction typically references previous transaction outputs as new transaction inputs and dedicates all input Bitcoin values to new outputs. Transactions are not encrypted, so it is possible to browse and view every transaction ever collected into a block. \n ", "url": "https://docs.dune.com/data-catalog/bitcoin/transactions#table-description"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/bitcoin/transactions#column-descriptions"}
{"content": "\u200b Table Sample \n \n ", "url": "https://docs.dune.com/data-catalog/bitcoin/transactions#table-sample"}
{"content": "\u200b Struct definitions \n Within several of these columns is a data type of STRUCT which allows for representing nested hierarchical data and has key-value pairs. It\u2019s similar to a dictionary in python and can be used to group fields together to make them more accessible. \n Note that you can work with these columns with the syntax  input[1].witness_data[2]  or  input[3].script_pub_key.address  depending on lengths of arrays within each value. It is an  array(row(map))  type, and while it looks like just an array in the returned table - it is more than that! \n input \n Field Data type Description value double The number of Satoshis attached to this output height bigint The height of the output tx_id string The transaction id of the output that is here used as input output_number bigint The number (index) of the output in transaction  tx_id \u2019s outputs coinbase string The data specified in this transaction, if it was a coinbase transaction sequence bigint Sequence number witness_data array<string> Array of hex encoded witness data script_signature struct The script signature script_pub_key struct The script public key \n \n input.script_signature \n Field Data type Description hex string The transaction\u2019s script operations, in hex asm string The transaction\u2019s script operations, in symbolic representation \n \n input.script_pub_key \n Field Data type Description asm string The transaction\u2019s script operations, in symbolic representation desc string The transaction\u2019s script operations, in symbolic representation address string The transaction\u2019s script operations, in symbolic representation hex string The transaction\u2019s script operations, in hex type string The address type of the output \n \n output \n Field Data type Description index bigint 0-indexed number of an output within a transaction used by a later transaction to refer to that specific output value double The number of Satoshis attached to this output script_pub_key struct The public key \n \n output.script_pub_key \n Field Data type Description asm string The transaction\u2019s script operations, in symbolic representation hex string The transaction\u2019s script operations, in hex address string The address the BTC came from type string The address type of the output Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/bitcoin/transactions) Outputs  (/data-catalog/bitcoin/outputs) Overview  (/data-catalog/near/overview) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample) Struct definitions  (#struct-definitions)", "url": "https://docs.dune.com/data-catalog/bitcoin/transactions#struct-definitions"}
{"content": "\u200b Table description \n The  outputs  table contains information about the outputs of Bitcoin transactions. An output is a record of the amount of Bitcoin being sent to a specific address. \n ", "url": "https://docs.dune.com/data-catalog/bitcoin/outputs#table-description"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/bitcoin/outputs#column-descriptions"}
{"content": "\u200b Table Sample \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/bitcoin/outputs) Inputs  (/data-catalog/bitcoin/inputs) Transactions  (/data-catalog/bitcoin/transactions) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample)", "url": "https://docs.dune.com/data-catalog/bitcoin/outputs#table-sample"}
{"content": "\u200b Under Construction \n The degen team is still working on uploading the data for this table. Please check back later. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/degen/raw/traces) Transactions  (/data-catalog/evm/degen/raw/transactions) Overview  (/data-catalog/evm/ethereum/overview) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Under Construction  (#under-construction)", "url": "https://docs.dune.com/data-catalog/evm/degen/raw/traces#under-construction"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw ethereum.creation_traces Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Overview  (/data-catalog/evm/ethereum/overview) Raw Transactions  (/data-catalog/evm/ethereum/raw/transactions) Logs  (/data-catalog/evm/ethereum/raw/logs) Traces  (/data-catalog/evm/ethereum/raw/traces) Creation Traces  (/data-catalog/evm/ethereum/raw/creation-traces) Blocks  (/data-catalog/evm/ethereum/raw/blocks) Withdrawals  (/data-catalog/evm/ethereum/raw/withdrawals) Decoded Curated Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw ethereum.creation_traces Description of the ethereum.creation_traces table on Dune ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/creation-traces"}
{"content": "\u200b Table Description \n The  creation_traces  table contains information about the creation of smart contracts on the Ethereum blockchain. This includes the address of the contract, the address of the creator, the block number at which the contract was created, the transaction hash, and the contract\u2019s bytecode. This table is useful for understanding the deployment of smart contracts on the Ethereum blockchain. \n This table is a subset of the  traces  table, which contains information about all traces on the Ethereum blockchain. The  creation_traces  table is filtered to only include traces that create new smart contracts. The filter for this is  type  =  create . \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/creation-traces#table-description"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/creation-traces#column-descriptions"}
{"content": "\u200b Table Sample \n \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/creation-traces#table-sample"}
{"content": "\u200b Examples \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/creation-traces#examples"}
{"content": "\u200b Show the creation of a specific smart contract \n select   *   from  ethereum . creation_traces \n where  contract_address  =   0x06012c8cf97bead5deae237070f9587f8e7a266d \n \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/creation-traces#show-the-creation-of-a-specific-smart-contract"}
{"content": "\u200b Show the creation of smart contracts by a specific creator \n select   *   from  ethereum . creation_traces \n where   \"from\"   =   0x0d4a11d5eeaac28ec3f61d100da81f6a1b65c9d6 \n \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/creation-traces#show-the-creation-of-smart-contracts-by-a-specific-creator"}
{"content": "\u200b Show the creation of smart contracts in the last 10 days \n select   \n     date_trunc ( 'day' ,  block_time )   as   day , \n      count ( * ) \n from  ethereum . creation_traces \n group   by   1 \n order   by   1   desc \n limit   10 \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/ethereum/raw/creation-traces) Traces  (/data-catalog/evm/ethereum/raw/traces) Blocks  (/data-catalog/evm/ethereum/raw/blocks) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table Description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample) Examples  (#examples) Show the creation of a specific smart contract  (#show-the-creation-of-a-specific-smart-contract) Show the creation of smart contracts by a specific creator  (#show-the-creation-of-smart-contracts-by-a-specific-creator) Show the creation of smart contracts in the last 10 days  (#show-the-creation-of-smart-contracts-in-the-last-10-days)", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/creation-traces#show-the-creation-of-smart-contracts-in-the-last-10-days"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoding Contracts Multichain Decoding Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Web App Overview  (/web-app/overview) Create Queries Create Visualizations Decoding Contracts Decoding Contracts  (/web-app/decoding/decoding-contracts) Multichain Decoding  (/web-app/decoding/multichain-decoding) Survivor's Kit for Contract Submission  (/web-app/decoding/short-guide-contract-submission) Create Dashboards  (/web-app/dashboards) Mint Dashboards  (/web-app/dashboard-minting) Teams on Dune  (/web-app/teams) Dune AI  (/web-app/dune-ai) Upload Data  (/web-app/upload-data) Share your work  (/web-app/embeds) Search content  (/web-app/search) Alerts  (/web-app/alerts) Bug Bounty  (/web-app/bug-bounty) Decoding Contracts Multichain Decoding How decoding contracts works in a multichain universe. ", "url": "https://docs.dune.com/web-app/decoding/multichain-decoding"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw ethereum.traces Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Overview  (/data-catalog/evm/ethereum/overview) Raw Transactions  (/data-catalog/evm/ethereum/raw/transactions) Logs  (/data-catalog/evm/ethereum/raw/logs) Traces  (/data-catalog/evm/ethereum/raw/traces) Creation Traces  (/data-catalog/evm/ethereum/raw/creation-traces) Blocks  (/data-catalog/evm/ethereum/raw/blocks) Withdrawals  (/data-catalog/evm/ethereum/raw/withdrawals) Decoded Curated Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw ethereum.traces Description of the ethereum.traces table on Dune ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/traces"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation DEX dex_aggregator.trades on ink Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink Overview  (/data-catalog/evm/ink/overview) Raw Decoded Curated DEX Dex Trades  (/data-catalog/evm/ink/curated-data/dex/dex-trades) Aggregator Trades  (/data-catalog/evm/ink/curated-data/dex/dex-aggregator-trades) NFT KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Overview  (/data-catalog/evm/ink/overview) Raw Decoded Curated DEX Dex Trades  (/data-catalog/evm/ink/curated-data/dex/dex-trades) Aggregator Trades  (/data-catalog/evm/ink/curated-data/dex/dex-aggregator-trades) NFT Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot DEX dex_aggregator.trades on ink Description of the Dex Aggregator Trades table for ink  This table is a cross-chain table but can be filtered for  ink  transactions. Table Description The  dex_aggregator.trades  table captures high-level data on trades executed via decentralized exchange (DEX) aggregators. These aggregators aggregate liquidity from multiple DEXs to provide users with the best possible trade execution. Unlike the  dex.trades  table, which records each intermediary step of a trade,  dex_aggregator.trades  condenses the trade data to reflect the user's intended trade, presenting it as a single entry. Functional Overview Users can expect the  dex_aggregator.trades  table to provide a high-level view of DEX trades facilitated by aggregators. This table simplifies trade records by showing a single entry for trades that may involve multiple DEXs and liquidity pools. For instance, a user might initiate a trade to swap USDC for PEPE via a DEX aggregator. The aggregator might route this trade through several liquidity pools such as WETH-USDC and WETH-PEPE, but  dex_aggregator.trades  will record it as a single USDC \u2192 PEPE trade. Complimentary to  dex_aggregator.trades  is the  dex.trades  table, where detailed trade executions are recorded. This table captures the granular steps of each trade, including interactions with different liquidity pools. The volume routed through aggregators is also recorded in the  dex.trades  table. One row in  dex_aggregator.trades  corresponds to one or more rows in  dex.trades , providing a comprehensive view of the detailed execution path that aggregated trades take. Coverage  The following table shows which projects and versions of those projects are covered in the  dex.trades  table on  ink .  Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/ink/curated-data/dex/dex-aggregator-trades) Dex Trades  (/data-catalog/evm/ink/curated-data/dex/dex-trades) NFT Trades  (/data-catalog/evm/ink/curated-data/nft/nft-trades) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/ink/curated-data/dex/dex-aggregator-trades"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Ink Ink Overview Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink Overview  (/data-catalog/evm/ink/overview) Raw Decoded Curated KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Overview  (/data-catalog/evm/ink/overview) Raw Decoded Curated Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Ink Ink Overview Ink data on Dune ", "url": "https://docs.dune.com/data-catalog/evm/ink/overview"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw polygon.blocks Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Overview  (/data-catalog/evm/polygon/overview) Raw Blocks  (/data-catalog/evm/polygon/raw/blocks) Creation Traces  (/data-catalog/evm/polygon/raw/creation-traces) Logs  (/data-catalog/evm/polygon/raw/logs) Transactions  (/data-catalog/evm/polygon/raw/transactions) Traces  (/data-catalog/evm/polygon/raw/traces) Decoded Curated Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw polygon.blocks Description of the polygon.blocks table on Dune Table description The  polygon .blocks  table contains information about blocks in the  polygon  blockchain. A block is a collection of transactions that are hashed and added to the blockchain. Each block contains a reference to the previous block, known as the parent hash, and a timestamp. The table contains information about each block, such as the block number, the block hash, the block size, the number of transactions, and the gas used. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Examples Show the most recent blocks SELECT\n    number,\n    hash, \n    size,\n    gas_used\n  FROM polygon.blocks\n  ORDER BY number DESC\n  LIMIT 10 Show the number of blocks mined each day SELECT\n    date_trunc('day', time) AS day,\n    count(distinct number)\n  FROM polygon.blocks\n  GROUP BY day\n  ORDER BY day DESC Show the number of transactions in each block SELECT\n    number,\n    count(*)\n  FROM polygon.blocks\n  GROUP BY 1 \n  LIMIT 10 Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/polygon/raw/blocks) Overview  (/data-catalog/evm/polygon/overview) Creation Traces  (/data-catalog/evm/polygon/raw/creation-traces) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/polygon/raw/blocks"}
{"content": "\u200b What is Multichain Decoding? \n Multichain Decoding enables seamless analysis of smart contract data across multiple blockchains. With a single contract submission, users can automatically generate protocol tables across all supported EVM chains, simplifying cross-chain data access on Dune. \n This feature unifies contract data views, streamlining the analysis of protocols deployed across various chains and making cross-chain insights more accessible. \n Multichain decoding offers data freshness and latency comparable to regular decoding. For details on data freshness, see our  data freshness page  (../../data-catalog/data-freshness) . \n ", "url": "https://docs.dune.com/web-app/decoding/multichain-decoding#what-is-multichain-decoding"}
{"content": "\u200b Example Usage \n Here are a few examples showing how you can use multichain decoded table views to simplify your analysis. Each example includes \u201cbefore\u201d and \u201cafter\u201d queries to demonstrate how multichain views streamline cross-chain analytics. \n Finding Zora Uniswap Collections Using multichain decoded tables Unioning single chain decoded tables    SELECT   *   \n    FROM   ( \n        SELECT   \n            --this event is emitted on sale set updates too so we take distinct \n            distinct \n           l . blockchain \n            ,  l . collection  as  nft_address \n            ,  l . erc20zAddress  as  erc20_address \n            ,  l . tokenId  as  token_id \n            ,  nft . name  as  nft_collection_name \n            ,  nft . defaultAdmin  as  creator \n            ,  json_value ( salesConfig ,   'strict $.name' )   as  nft_name \n            ,  json_value ( salesConfig ,   'strict $.symbol' )   as  nft_symbol \n            ,   COALESCE ( try ( from_unixtime ( cast ( json_value ( salesConfig ,   'strict $.saleStart' )   as   bigint ) ) ) , timestamp   '1970-01-01' )   as  start_time \n            ,   COALESCE ( try ( from_unixtime ( cast ( json_value ( salesConfig ,   'strict $.saleEnd' )   as   bigint ) ) ) , timestamp   '2050-01-01' )   as  end_time \n            ,  l . poolAddress  as  uni_pool \n            ,  l . evt_block_time \n            ,  row_number ( )   over   ( partition   by  collection ,  erc20zAddress ,  tokenId  order   by  evt_block_time  desc )   as  last_sale_set \n        FROM   (   SELECT  collection ,  erc20zAddress ,  tokenId ,  salesConfig ,  evt_block_time ,  poolAddress ,   chain   AS  blockchain \n              FROM  zora_multichain . ZoraTimedSaleStrategy_evt_SaleSet  )  l  \n        LEFT   JOIN   (   SELECT  name ,  defaultAdmin ,  newContract ,   chain   AS  blockchain \n                    FROM  zora_multichain . ZoraCreator1155FactoryImpl_evt_SetupNewContract  )  nft  \n              ON  l . collection  =  nft . newContract  AND  l . blockchain  =  nft . blockchain \n    )   \n    WHERE  last_sale_set  =   1 \n \n Gnosis Safe `execTransaction` Calls Using multichain decoded tables Unioning single chain decoded tables    select   chain ,  date_trunc ( 'day' ,  call_block_time )   AS  block_date ,   count ( * )   as  cnt \n    from  gnosis_safe_multichain . Safe_v1_4_1_call_execTransaction \n    group   by   1 ,   2 \n \n ", "url": "https://docs.dune.com/web-app/decoding/multichain-decoding#example-usage"}
{"content": "\u200b How It Works \n ", "url": "https://docs.dune.com/web-app/decoding/multichain-decoding#how-it-works"}
{"content": "\u200b Requirements for Multichain View Construction \u26a0\ufe0f \n To create a multichain decoded view, the following criteria must be met: \n \n Contracts must have the  same ABI  across chains. \n Contracts must be organized under the  same project namespace and contract name  (e.g.,  uniswap_v3 ,  UniswapV3Pool ). \n \n This standardized labeling enables Dune to merge data from different chains into a single, unified view. \n ", "url": "https://docs.dune.com/web-app/decoding/multichain-decoding#requirements-for-multichain-view-construction"}
{"content": "\u200b Submitting Multichain Contracts \n \n When contracts with the same ABI are submitted across multiple chains, they are combined into a single cross-chain table, enabling consistent, streamlined data access and queries across chains. \n ", "url": "https://docs.dune.com/web-app/decoding/multichain-decoding#submitting-multichain-contracts"}
{"content": "\u200b Accessing and Navigating Tables \n Multichain decoded contract tables are accessible in the Data Explorer, just like regular decoded contract tables. These multichain entries feature a distinct symbol and display the list of supported chains, clearly indicating they span multiple chains.\n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /web-app/decoding/multichain-decoding) Decoding Contracts  (/web-app/decoding/decoding-contracts) Survivor's Kit for Contract Submission  (/web-app/decoding/short-guide-contract-submission) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page What is Multichain Decoding?  (#what-is-multichain-decoding) Example Usage  (#example-usage) How It Works  (#how-it-works) Requirements for Multichain View Construction \u26a0\ufe0f  (#requirements-for-multichain-view-construction) Submitting Multichain Contracts  (#submitting-multichain-contracts) Accessing and Navigating Tables  (#accessing-and-navigating-tables)", "url": "https://docs.dune.com/web-app/decoding/multichain-decoding#accessing-and-navigating-tables"}
{"content": "\u200b Table Description \n The  traces  table contains the traces of the transactions executed on the Ethereum Virtual Machine (EVM). It includes the traces of the transaction and the traces of the internal transactions. Traces are the result of the execution of the transaction and are used to debug and understand the execution of the transaction. They are also known as  internal transactions  and are can be used to understand the execution of a transaction. \n This is the raw version of this table, for decoded transaction calls, see the  call tables  (/data-catalog/evm/ethereum/decoded/call-tables)  section. \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/traces#table-description"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/traces#column-descriptions"}
{"content": "\u200b Table Sample \n \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/traces#table-sample"}
{"content": "\u200b Example \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/traces#example"}
{"content": "\u200b Querying traces for a specific transaction hash \n SELECT   * \n FROM  ethereum . traces \n WHERE  tx_hash  =   0xb30d6d67cf7d148c2257bf598c5f5cdf5912a3d05c7d3b000398d675d2fa912c \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/ethereum/raw/traces) Logs  (/data-catalog/evm/ethereum/raw/logs) Creation Traces  (/data-catalog/evm/ethereum/raw/creation-traces) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table Description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample) Example  (#example) Querying traces for a specific transaction hash  (#querying-traces-for-a-specific-transaction-hash)", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/traces#querying-traces-for-a-specific-transaction-hash"}
{"content": "\u200b What is Ink? \n Ink is Kraken\u2019s dedicated DeFi chain, built as a Layer 2 solution using the OP Stack technology. As part of the Superchain ecosystem, it provides a scalable, secure environment for decentralized finance applications while maintaining full compatibility with the Ethereum ecosystem. \n ", "url": "https://docs.dune.com/data-catalog/evm/ink/overview#what-is-ink"}
{"content": "\u200b Technical Architecture \n Ink\u2019s architecture leverages the OP Stack to deliver a robust DeFi-focused platform: \n ", "url": "https://docs.dune.com/data-catalog/evm/ink/overview#technical-architecture"}
{"content": "\u200b Optimistic Rollup Technology \n \n Inherits Ethereum\u2019s security through optimistic rollups \n Posts transaction data to Ethereum mainnet \n Uses fraud proofs for security guarantees \n Provides fast transaction finality with L2 execution \n \n ", "url": "https://docs.dune.com/data-catalog/evm/ink/overview#optimistic-rollup-technology"}
{"content": "\u200b Network Specifications \n \n Technology Stack : OP Stack (Superchain) \n Gas Token : ETH \n Challenge Period : ~7 days \n Block Time : ~2 seconds \n Network Type : EVM-compatible Layer 2 \n \n ", "url": "https://docs.dune.com/data-catalog/evm/ink/overview#network-specifications"}
{"content": "\u200b Developer Tools & Infrastructure \n \n Smart Contract Development : Support for Foundry, Hardhat, and Remix \n Block Explorers : Multiple options for transaction monitoring \n Infrastructure : \n \n Account Abstraction support \n Cross-chain bridges \n Oracle integration \n VRF capabilities \n Indexing services \n \n \n \n ", "url": "https://docs.dune.com/data-catalog/evm/ink/overview#developer-tools-and-infrastructure"}
{"content": "\u200b Compatibility & Integration \n \n Full EVM compatibility \n Native bridge functionality \n Support for standard Ethereum development tools \n Seamless integration with existing Ethereum infrastructure \n \n Ink Documentation Official documentation for developers building on Ink - Kraken\u2019s DeFi chain  (https://docs.inkonchain.com) \n ", "url": "https://docs.dune.com/data-catalog/evm/ink/overview#compatibility-and-integration"}
{"content": "\u200b Data Catalog \n Logs Insights into smart contract interactions through event logs  (./raw/logs) Blocks Information on blocks processed on Ink  (./raw/blocks) Transactions Detailed data on transactions  (./raw/transactions) decoded Decoded transaction information for enhanced analysis  (./decoded/overview) Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/ink/overview) NFT Trades  (/data-catalog/evm/gnosis/curated-data/nft/nft-trades) Blocks  (/data-catalog/evm/ink/raw/blocks) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page What is Ink?  (#what-is-ink) Technical Architecture  (#technical-architecture) Optimistic Rollup Technology  (#optimistic-rollup-technology) Network Specifications  (#network-specifications) Developer Tools & Infrastructure  (#developer-tools-and-infrastructure) Compatibility & Integration  (#compatibility-and-integration) Data Catalog  (#data-catalog)", "url": "https://docs.dune.com/data-catalog/evm/ink/overview#data-catalog"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation NFT NFT.trades on b3 Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Overview  (/data-catalog/evm/b3/overview) Raw Decoded Curated DEX NFT NFT Trades  (/data-catalog/evm/b3/curated-data/nft/nft-trades) Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot NFT NFT.trades on b3 The  nft.trades  table captures detailed data on NFT marketplaces, recording all trade events across various protocols on b3.  This is a cross-chain table but can be filtered for  b3  transactions. Table Description The `nft.trades` table on Dune Analytics is central to capturing and analyzing Non-Fungible Token (NFT) transactions across various marketplaces. It is a pivotal resource for dissecting the intricacies of NFT trade execution, market behavior, and collector activity within the NFT space. Usage The `nft.trades` table serves as an essential tool for delving into the NFT market's complexities. It offers a detailed snapshot of each NFT transaction, encompassing data points such as sale price, transaction timestamp, buyer and seller addresses, and the specific NFT assets involved. This table allows analysts to explore trends in NFT valuation, trading volumes, and marketplace dynamics, providing insights into the evolving landscape of digital collectibles and art. Table Coverage  The following table shows which projects and versions of those projects are covered in the  dex.trades  table on  b3 .  Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/b3/curated-data/nft/nft-trades) Aggregator Trades  (/data-catalog/evm/b3/curated-data/dex/dex-aggregator-trades) Overview  (/data-catalog/evm/base/overview) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/b3/curated-data/nft/nft-trades"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation NFT NFT.trades on optimism Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Overview  (/data-catalog/evm/optimism/overview) Raw Decoded Curated DEX NFT NFT Trades  (/data-catalog/evm/optimism/curated-data/nft/nft-trades) Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot NFT NFT.trades on optimism The  nft.trades  table captures detailed data on NFT marketplaces, recording all trade events across various protocols on optimism.  This is a cross-chain table but can be filtered for  optimism  transactions. Table Description The `nft.trades` table on Dune Analytics is central to capturing and analyzing Non-Fungible Token (NFT) transactions across various marketplaces. It is a pivotal resource for dissecting the intricacies of NFT trade execution, market behavior, and collector activity within the NFT space. Usage The `nft.trades` table serves as an essential tool for delving into the NFT market's complexities. It offers a detailed snapshot of each NFT transaction, encompassing data points such as sale price, transaction timestamp, buyer and seller addresses, and the specific NFT assets involved. This table allows analysts to explore trends in NFT valuation, trading volumes, and marketplace dynamics, providing insights into the evolving landscape of digital collectibles and art. Table Coverage  The following table shows which projects and versions of those projects are covered in the  dex.trades  table on  optimism .  Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/optimism/curated-data/nft/nft-trades) Aggregator Trades  (/data-catalog/evm/optimism/curated-data/dex/dex-aggregator-trades) Overview  (/data-catalog/evm/polygon/overview) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/optimism/curated-data/nft/nft-trades"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw base.transactions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Overview  (/data-catalog/evm/base/overview) Raw Blocks  (/data-catalog/evm/base/raw/blocks) Creation Traces  (/data-catalog/evm/base/raw/creation-traces) Logs  (/data-catalog/evm/base/raw/logs) Transactions  (/data-catalog/evm/base/raw/transactions) Traces  (/data-catalog/evm/base/raw/traces) Decoded Curated Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw base.transactions Description of the base.transactions table on Dune Table Description The  base .transactions  table contains information about all transactions on the  base  blockchain. Each row represents a single transaction and includes information such as block number, hash, timestamp, sender, recipient, value, gas, gas price, and more. Transactions are the fundamental unit of interaction with the  base  blockchain. Transactions are created by users and are used to send value, deploy smart contracts, and interact with smart contracts. This is the raw version of this table. If the chain is a Fully Managed chain, decoded transaction calls will be available, see  call tables  (/data-catalog/evm/base/decoded/call-tables)  section. If this is a Hosted chain, decoded call tables will not be available. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Examples Show all transactions sent by a specific address SELECT * \nFROM base.transactions WHERE \"from\" = '0x50A1b5c358F8D34F0d35aA2f10742c46054E247e'\n Count the number of transactions per block SELECT \n    block_number, \n    COUNT(*)\nFROM base.transactions\nGROUP BY 1\nORDER BY 1 DESC\nLIMIT 10\n Show the top 10 transactions with the highest gas price SELECT \n    hash, \n    gas_price\nFROM base.transactions\nORDER BY gas_price DESC\nLIMIT 10\n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/base/raw/transactions) Logs  (/data-catalog/evm/base/raw/logs) Traces  (/data-catalog/evm/base/raw/traces) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/base/raw/transactions"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoding Contracts Survivor's Kit for Contract Submission Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Web App Overview  (/web-app/overview) Create Queries Create Visualizations Decoding Contracts Decoding Contracts  (/web-app/decoding/decoding-contracts) Multichain Decoding  (/web-app/decoding/multichain-decoding) Survivor's Kit for Contract Submission  (/web-app/decoding/short-guide-contract-submission) Create Dashboards  (/web-app/dashboards) Mint Dashboards  (/web-app/dashboard-minting) Teams on Dune  (/web-app/teams) Dune AI  (/web-app/dune-ai) Upload Data  (/web-app/upload-data) Share your work  (/web-app/embeds) Search content  (/web-app/search) Alerts  (/web-app/alerts) Bug Bounty  (/web-app/bug-bounty) Decoding Contracts Survivor's Kit for Contract Submission New kid (chain) on the block (Dune)? Here\u2019s what you need to know to submit your chain\u2019s protocol contracts to Dune. ", "url": "https://docs.dune.com/web-app/decoding/short-guide-contract-submission"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation DEX dex.trades on ethereum Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Overview  (/data-catalog/evm/ethereum/overview) Raw Decoded Curated DEX Dex Trades  (/data-catalog/evm/ethereum/curated-data/dex/dex-trades) Aggregator Trades  (/data-catalog/evm/ethereum/curated-data/dex/dex-aggregator-trades) NFT Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot DEX dex.trades on ethereum The  dex.trades  table captures detailed data on decentralized exchange (DEX) trades, recording all raw trade events across various protocols on ethereum.  This is a cross-chain table but can be filtered for  ethereum  transactions. Table Description The  dex.trades  table captures detailed data on trades executed via decentralized exchanges (DEXs). This table captures all raw trade events that happen across all liqudity pools. It provides a comprehensive view of the entire trade execution process, detailing the specific paths and liquidity sources utilized. Functional Overview The  dex.trades  table provides an in-depth view of trades on decentralized exchanges like Uniswap or Curve. This table includes entries for each segment of a trade that passes through different liquidity pools, as well as single-step trades. For example, a user may initiate a trade to swap USDC for PEPE. If this trade is executed through multiple liquidity pools, such as USDC-WETH and WETH-PEPE, the  dex.trades  table will record each segment of the trade as a separate entry. Conversely, a single-step trade, such as directly swapping USDC for ETH, will be recorded as a single entry. This detailed approach allows for granular analysis of trade execution paths, enabling users to: Analyze Liquidity Sources:  Understand which liquidity pools are used and how they interact in both single-step and multi-step trades. Track Trade Execution Paths:  Follow the exact route a trade takes across different DEXs and liquidity pools Assess Slippage and Execution Quality:  Evaluate the impact of each step on the overall trade execution, including slippage and price changes. Monitor Market Dynamics:  Gain insights into the behavior and dynamics of different liquidity pools and DEXs over time. Table Coverage  The following table shows which projects and versions of those projects are covered in the  dex.trades  table on  ethereum .  Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/ethereum/curated-data/dex/dex-trades) Decoded Traces  (/data-catalog/evm/ethereum/decoded/traces-decoded) Aggregator Trades  (/data-catalog/evm/ethereum/curated-data/dex/dex-aggregator-trades) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/ethereum/curated-data/dex/dex-trades"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw polygon.logs Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Overview  (/data-catalog/evm/polygon/overview) Raw Blocks  (/data-catalog/evm/polygon/raw/blocks) Creation Traces  (/data-catalog/evm/polygon/raw/creation-traces) Logs  (/data-catalog/evm/polygon/raw/logs) Transactions  (/data-catalog/evm/polygon/raw/transactions) Traces  (/data-catalog/evm/polygon/raw/traces) Decoded Curated Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw polygon.logs Description of the polygon.logs table on Dune Table Description The  polygon .logs  table represents the logs generated by the Ethereum Virtual Machine (EVM) when a contract is executed. Logs are a way to store data on the blockchain. Logs originate from events that occur during the execution of a smart contract. A log consists of: topic list: a list of 0 to 3 32-byte data topics.  Topic0  is the hash of the signature of the event (indexed), and the remaining topics are indexed parameters of the event. data: contains non-indexed data. This is the raw version of this table. If the chain is a Fully Managed chain, decoded transaction calls will be available, see  call tables  (/data-catalog/evm/polygon/decoded/call-tables)  section. If this is a Hosted chain, decoded call tables will not be available. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Examples Filter the logs for a specific contract SELECT *\nFROM polygon.logs\nWHERE contract_address = 0x06012c8cf97bead5deae237070f9587f8e7a266d\nLIMIT 10 Filter the logs for a specific topic SELECT *\nFROM polygon.logs\nWHERE topic0 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n Show the logs of a specific block SELECT *\nFROM polygon.logs\nWHERE evt_block_number = 1000000\n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/polygon/raw/logs) Creation Traces  (/data-catalog/evm/polygon/raw/creation-traces) Transactions  (/data-catalog/evm/polygon/raw/transactions) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/polygon/raw/logs"}
{"content": "\u200b Why Submit Contracts for Decoding? \n Decoding enables you to create dedicated, easy-to-use datasets for your protocol on Dune, making it easier to build insightful dashboards. \n ", "url": "https://docs.dune.com/web-app/decoding/short-guide-contract-submission#why-submit-contracts-for-decoding"}
{"content": "\u200b How to Submit Contracts \n ", "url": "https://docs.dune.com/web-app/decoding/short-guide-contract-submission#how-to-submit-contracts"}
{"content": "\u200b Submit via UI (Recommended) \n Use the Dune UI for a guided submission process:  https://dune.com/contracts/new  (https://dune.com/contracts/new) . \n For more details on decoding and submission, watch the  Decoding Tutorial  (https://youtu.be/s3eKEeu9At8?si=zs0b5Q0iz5yx3L2d) . \n ", "url": "https://docs.dune.com/web-app/decoding/short-guide-contract-submission#submit-via-ui-recommended"}
{"content": "\u200b Batch Submission via CSV (Advanced) \n If you are looking to submit dozens of protocol contracts, you may submit via CSV. Work with us through Slack or Telegram, ensuring the CSV is formatted correctly for batch submission. \n Batch submission bypasses UI safeguards, so make sure all flags are accurate, the ABI is formatted correctly, and naming follows Dune standards. Using the UI is preferred, as it includes checks that reduce errors and debugging time. \n Follow  this Google Sheet template  (https://docs.google.com/spreadsheets/d/1yxJqlmSE2yYgXgSIXcPRr5xxP9ck9JZB8_sGOITtYEM/edit?gid=0#gid=0)  for exact format, and refer to  Dune\u2019s documentation  (./decoding-contracts)  for guidance on fields like: \n \n has_multiple_instances  is flag for for  dynamic contracts  (./decoding-contracts#are-there-several-instances-of-this-contract-dynamic-contract) \n is_created_by_factory  is flag for  factory contracts  (./decoding-contracts#is-it-created-by-a-factory-contract-factory-contract) \n \n ", "url": "https://docs.dune.com/web-app/decoding/short-guide-contract-submission#batch-submission-via-csv-advanced"}
{"content": "\u200b Submission Strategy \n \n For Chains:  Encourage top protocols to submit their key contracts. \n For Protocols:  Collaborate with your developers or data analysts to identify which contracts include the main logic and events. \n \n ", "url": "https://docs.dune.com/web-app/decoding/short-guide-contract-submission#submission-strategy"}
{"content": "\u200b Special Instructions by Contract Type \n ", "url": "https://docs.dune.com/web-app/decoding/short-guide-contract-submission#special-instructions-by-contract-type"}
{"content": "\u200b Proxy Contracts \n If using a proxy pattern, submit the  implementation contract\u2019s ABI .\n  Dune\u2019s pipeline cannot handle dynamic proxies or complex patterns automatically yet.  \n ", "url": "https://docs.dune.com/web-app/decoding/short-guide-contract-submission#proxy-contracts"}
{"content": "\u200b ERC20, ERC721, ERC1155 Tokens \n These contracts typically don\u2019t need submission, as Dune already covers standard approvals and transfers. Submit only if custom events are needed. \n ", "url": "https://docs.dune.com/web-app/decoding/short-guide-contract-submission#erc20-erc721-erc1155-tokens"}
{"content": "\u200b DEX Contracts \n Look for below sets of contracts: \n \n Factory Contract : should emit pool creation events. \n Pair/Pool Contract : should emit swap events. \n \n If decoding is required for additional contracts like routers or position managers, please submit those as well. \n ", "url": "https://docs.dune.com/web-app/decoding/short-guide-contract-submission#dex-contracts"}
{"content": "\u200b NFT Marketplace Contracts \n Submit the main marketplace contract with key events, such as: \n \n ERC721BuyOrderFilled \n ERC721SellOrderFilled \n ERC1155BuyOrderFilled \n ERC1155SellOrderFilled \n \n ", "url": "https://docs.dune.com/web-app/decoding/short-guide-contract-submission#nft-marketplace-contracts"}
{"content": "\u200b Unverified Contracts \n If the contract isn\u2019t verified on the block explorer, contact the protocol developers to obtain the ABI. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /web-app/decoding/short-guide-contract-submission) Multichain Decoding  (/web-app/decoding/multichain-decoding) Create Dashboards  (/web-app/dashboards) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Why Submit Contracts for Decoding?  (#why-submit-contracts-for-decoding) How to Submit Contracts  (#how-to-submit-contracts) Submit via UI (Recommended)  (#submit-via-ui-recommended) Batch Submission via CSV (Advanced)  (#batch-submission-via-csv-advanced) Submission Strategy  (#submission-strategy) Special Instructions by Contract Type  (#special-instructions-by-contract-type) Proxy Contracts  (#proxy-contracts) ERC20, ERC721, ERC1155 Tokens  (#erc20-erc721-erc1155-tokens) DEX Contracts  (#dex-contracts) NFT Marketplace Contracts  (#nft-marketplace-contracts) Unverified Contracts  (#unverified-contracts)", "url": "https://docs.dune.com/web-app/decoding/short-guide-contract-submission#unverified-contracts"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw base.blocks Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Overview  (/data-catalog/evm/base/overview) Raw Blocks  (/data-catalog/evm/base/raw/blocks) Creation Traces  (/data-catalog/evm/base/raw/creation-traces) Logs  (/data-catalog/evm/base/raw/logs) Transactions  (/data-catalog/evm/base/raw/transactions) Traces  (/data-catalog/evm/base/raw/traces) Decoded Curated Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw base.blocks Description of the base.blocks table on Dune Table description The  base .blocks  table contains information about blocks in the  base  blockchain. A block is a collection of transactions that are hashed and added to the blockchain. Each block contains a reference to the previous block, known as the parent hash, and a timestamp. The table contains information about each block, such as the block number, the block hash, the block size, the number of transactions, and the gas used. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Examples Show the most recent blocks SELECT\n    number,\n    hash, \n    size,\n    gas_used\n  FROM base.blocks\n  ORDER BY number DESC\n  LIMIT 10 Show the number of blocks mined each day SELECT\n    date_trunc('day', time) AS day,\n    count(distinct number)\n  FROM base.blocks\n  GROUP BY day\n  ORDER BY day DESC Show the number of transactions in each block SELECT\n    number,\n    count(*)\n  FROM base.blocks\n  GROUP BY 1 \n  LIMIT 10 Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/base/raw/blocks) Overview  (/data-catalog/evm/base/overview) Creation Traces  (/data-catalog/evm/base/raw/creation-traces) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/base/raw/blocks"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw degen.transactions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Overview  (/data-catalog/evm/degen/overview) Raw Blocks  (/data-catalog/evm/degen/raw/blocks) Logs  (/data-catalog/evm/degen/raw/logs) Transactions  (/data-catalog/evm/degen/raw/transactions) Traces  (/data-catalog/evm/degen/raw/traces) Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw degen.transactions Description of the degen.transactions table on Dune  The data for the  degen  tables is hosted on Dune by the  degen  team in the context of Hosted blockchain integrations - a legacy integration route which only includes raw EVM data. We are working to migrate it over to the  standard EVM integration  (/catalyst/overview#1-evm-chains) .  \n Table Description The  degen .transactions  table contains information about all transactions on the  degen  blockchain. Each row represents a single transaction and includes information such as block number, hash, timestamp, sender, recipient, value, gas, gas price, and more. Transactions are the fundamental unit of interaction with the  degen  blockchain. Transactions are created by users and are used to send value, deploy smart contracts, and interact with smart contracts. This is the raw version of this table. If the chain is a Fully Managed chain, decoded transaction calls will be available, see  call tables  (/data-catalog/evm/degen/decoded/call-tables)  section. If this is a Hosted chain, decoded call tables will not be available. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Examples Show all transactions sent by a specific address SELECT * \nFROM degen.transactions WHERE \"from\" = '0x50A1b5c358F8D34F0d35aA2f10742c46054E247e'\n Count the number of transactions per block SELECT \n    block_number, \n    COUNT(*)\nFROM degen.transactions\nGROUP BY 1\nORDER BY 1 DESC\nLIMIT 10\n Show the top 10 transactions with the highest gas price SELECT \n    hash, \n    gas_price\nFROM degen.transactions\nORDER BY gas_price DESC\nLIMIT 10\n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/degen/raw/transactions) Logs  (/data-catalog/evm/degen/raw/logs) Traces  (/data-catalog/evm/degen/raw/traces) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/degen/raw/transactions"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw degen.blocks Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Overview  (/data-catalog/evm/degen/overview) Raw Blocks  (/data-catalog/evm/degen/raw/blocks) Logs  (/data-catalog/evm/degen/raw/logs) Transactions  (/data-catalog/evm/degen/raw/transactions) Traces  (/data-catalog/evm/degen/raw/traces) Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw degen.blocks Description of the degen.blocks table on Dune  The data for the  degen  tables is hosted on Dune by the  degen  team in the context of Hosted blockchain integrations - a legacy integration route which only includes raw EVM data. We are working to migrate it over to the  standard EVM integration  (/catalyst/overview#1-evm-chains) .  \n Table description The  degen .blocks  table contains information about blocks in the  degen  blockchain. A block is a collection of transactions that are hashed and added to the blockchain. Each block contains a reference to the previous block, known as the parent hash, and a timestamp. The table contains information about each block, such as the block number, the block hash, the block size, the number of transactions, and the gas used. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Examples Show the most recent blocks SELECT\n    number,\n    hash, \n    size,\n    gas_used\n  FROM degen.blocks\n  ORDER BY number DESC\n  LIMIT 10 Show the number of blocks mined each day SELECT\n    date_trunc('day', time) AS day,\n    count(distinct number)\n  FROM degen.blocks\n  GROUP BY day\n  ORDER BY day DESC Show the number of transactions in each block SELECT\n    number,\n    count(*)\n  FROM degen.blocks\n  GROUP BY 1 \n  LIMIT 10 Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/degen/raw/blocks) Overview  (/data-catalog/evm/degen/overview) Logs  (/data-catalog/evm/degen/raw/logs) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/degen/raw/blocks"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Degen degen Overview Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Overview  (/data-catalog/evm/degen/overview) Raw Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Degen degen Overview degen data on Dune  The data for the  degen  tables is hosted on Dune by the  degen  team in the context of Hosted blockchain integrations - a legacy integration route which only includes raw EVM data. We are working to migrate it over to the  standard EVM integration  (/catalyst/overview#1-evm-chains) .  \n Traces for this network are currently not available. We are working on it. \n Degen, an ERC-20 token launched in January 2024, has reshaped the Farcaster ecosystem by enabling Casters to reward others with DEGEN for posting quality content. Our points system recognizes unique posts and comments, effectively bridging the gap between online contributions and real-world value. \n Degen has launched a layer3 solution that settles transactions on the base network. This solution is designed to provide a more efficient and scalable way to settle transactions related to $degen.\nDegen Chain uses Arbitrum Orbit for rollups, Base for transaction settlements, and Arbitrum AnyTrust for data availability. \n degen website The official website of degen, providing information on the project, team, and community.  (https://www.degen.tips/) \n ", "url": "https://docs.dune.com/data-catalog/evm/degen/overview"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw polygon.transactions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Overview  (/data-catalog/evm/polygon/overview) Raw Blocks  (/data-catalog/evm/polygon/raw/blocks) Creation Traces  (/data-catalog/evm/polygon/raw/creation-traces) Logs  (/data-catalog/evm/polygon/raw/logs) Transactions  (/data-catalog/evm/polygon/raw/transactions) Traces  (/data-catalog/evm/polygon/raw/traces) Decoded Curated Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw polygon.transactions Description of the polygon.transactions table on Dune Table Description The  polygon .transactions  table contains information about all transactions on the  polygon  blockchain. Each row represents a single transaction and includes information such as block number, hash, timestamp, sender, recipient, value, gas, gas price, and more. Transactions are the fundamental unit of interaction with the  polygon  blockchain. Transactions are created by users and are used to send value, deploy smart contracts, and interact with smart contracts. This is the raw version of this table. If the chain is a Fully Managed chain, decoded transaction calls will be available, see  call tables  (/data-catalog/evm/polygon/decoded/call-tables)  section. If this is a Hosted chain, decoded call tables will not be available. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Examples Show all transactions sent by a specific address SELECT * \nFROM polygon.transactions WHERE \"from\" = '0x50A1b5c358F8D34F0d35aA2f10742c46054E247e'\n Count the number of transactions per block SELECT \n    block_number, \n    COUNT(*)\nFROM polygon.transactions\nGROUP BY 1\nORDER BY 1 DESC\nLIMIT 10\n Show the top 10 transactions with the highest gas price SELECT \n    hash, \n    gas_price\nFROM polygon.transactions\nORDER BY gas_price DESC\nLIMIT 10\n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/polygon/raw/transactions) Logs  (/data-catalog/evm/polygon/raw/logs) Traces  (/data-catalog/evm/polygon/raw/traces) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/polygon/raw/transactions"}
{"content": "\u200b Data Catalog \n Logs Detailed event logs from smart contracts, providing insights into interactions within the degen network.  (./raw/logs) Blocks Information on blocks, illustrating the operational capacity and activity levels on degen.  (./raw/blocks) Transactions Extensive transaction data, showcasing the efficiency and execution of operations on degen.  (./raw/transactions) Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/degen/overview) NFT Trades  (/data-catalog/evm/corn/curated-data/nft/nft-trades) Blocks  (/data-catalog/evm/degen/raw/blocks) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Data Catalog  (#data-catalog)", "url": "https://docs.dune.com/data-catalog/evm/degen/overview#data-catalog"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw degen.logs Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Overview  (/data-catalog/evm/degen/overview) Raw Blocks  (/data-catalog/evm/degen/raw/blocks) Logs  (/data-catalog/evm/degen/raw/logs) Transactions  (/data-catalog/evm/degen/raw/transactions) Traces  (/data-catalog/evm/degen/raw/traces) Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw degen.logs Description of the degen.logs table on Dune  The data for the  degen  tables is hosted on Dune by the  degen  team in the context of Hosted blockchain integrations - a legacy integration route which only includes raw EVM data. We are working to migrate it over to the  standard EVM integration  (/catalyst/overview#1-evm-chains) .  \n Table Description The  degen .logs  table represents the logs generated by the Ethereum Virtual Machine (EVM) when a contract is executed. Logs are a way to store data on the blockchain. Logs originate from events that occur during the execution of a smart contract. A log consists of: topic list: a list of 0 to 3 32-byte data topics.  Topic0  is the hash of the signature of the event (indexed), and the remaining topics are indexed parameters of the event. data: contains non-indexed data. This is the raw version of this table. If the chain is a Fully Managed chain, decoded transaction calls will be available, see  call tables  (/data-catalog/evm/degen/decoded/call-tables)  section. If this is a Hosted chain, decoded call tables will not be available. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Examples Filter the logs for a specific contract SELECT *\nFROM degen.logs\nWHERE contract_address = 0x06012c8cf97bead5deae237070f9587f8e7a266d\nLIMIT 10 Filter the logs for a specific topic SELECT *\nFROM degen.logs\nWHERE topic0 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n Show the logs of a specific block SELECT *\nFROM degen.logs\nWHERE evt_block_number = 1000000\n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/degen/raw/logs) Blocks  (/data-catalog/evm/degen/raw/blocks) Transactions  (/data-catalog/evm/degen/raw/transactions) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/degen/raw/logs"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded Overview Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink Overview  (/data-catalog/evm/ink/overview) Raw Decoded Overview  (/data-catalog/evm/ink/decoded/overview) Call Tables  (/data-catalog/evm/ink/decoded/call-tables) Event Logs  (/data-catalog/evm/ink/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/ink/decoded/contracts) Decoded Logs  (/data-catalog/evm/ink/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/ink/decoded/traces-decoded) Curated KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Overview  (/data-catalog/evm/ink/overview) Raw Decoded Overview  (/data-catalog/evm/ink/decoded/overview) Call Tables  (/data-catalog/evm/ink/decoded/call-tables) Event Logs  (/data-catalog/evm/ink/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/ink/decoded/contracts) Decoded Logs  (/data-catalog/evm/ink/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/ink/decoded/traces-decoded) Curated Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded Overview Simplifying smart contract analysis through human-readable tables. Overview of Dune's Decoded Data Approach Dune uses the ABI (Application Binary Interface) of smart contracts to decode blockchain transactions into structured tables. Each event log and function call from the ABI are parsed into their own tables. This decoding process transforms the raw, encoded data on the blockchain into human-readable tables, simplifying the analysis of smart contract data. Dune's decoded data approach offers several benefits: Enhanced Readability:  The decoded data tables provide a clear and intuitive representation of smart contract activities. Efficient Analysis:  The structured tables enable efficient querying and analysis of smart contract data. Handling Multiple Contract Instances:  For smart contracts with multiple instances, Dune aggregates the data from these instances into a single table, simplifying the analysis process. Collaborative Mapping:  Dune's smart contract library is continuously expanded through the active participation of the Dune community, ensuring that the decoding coverage remains comprehensive and current. Explore decoded logs  (/data-catalog/evm/ink/decoded/event-logs) Explore decoded traces  (/data-catalog/evm/ink/decoded/call-tables) Which contracts have decoded data? Contract submission on Dune are driven by the community. Usually, the odds are good that the contract you are looking at is already decoded, but especially for new projects or new contracts, it might be that the contract is not decoded yet. In those cases, you can submit the contract to be decoded. Decoding usually takes about 24 hours, in special cases it might take longer. You can check if contracts are already decoded by querying the  [blockchain].contracts  tables, the  data explorer  (/web-app/query-editor/data-explorer) , or use  this dashboard  (https://dune.com/dune/is-my-contract-decoded-yet-v2) . If you want to submit several contracts at the same time, there is also the possibility of submitting a batch of contracts. To do so, please use  this CSV  (https://gist.github.com/antonio-mendes/c6a43c22862581674c11462cae230e23)  as a template and fill it in with the appropriate information for the contracts you want to decode. Afterwards, send the CSV to decoding@dune.com. Submit any contract for decoding  (/web-app/decoding-contracts) Explore already decoded contracts  (/data-catalog/evm/ink/decoded/contracts) How does decoding work? Smart Contracts on any EVM blockchain are mostly written in high-level languages like  Solidity  (https://docs.soliditylang.org/en/v0.8.2)  or  Vyper  (https://vyper.readthedocs.io/en/stable) . In order for them to be deployed to an EVM execution environment, they need to be compiled to EVM executable bytecode. Once deployed, the bytecode gets associated with an address on the respective chain and is permanently stored in the chain's state storage. To be able to interact with this smart contract, which is now just bytecode, we need a guide to call the functions defined in the high-level languages. This translation of names and arguments into byte representation is done using an  Application Binary Interface (ABI) . The ABI documents names, types, and arguments precisely, which allows us to interact with the smart contract using a somewhat human-readable format. The ABI can be compiled using the high-level language source code. The ABI is used to call a smart contract or interpret the data it emits. Decoding Example We are going to look at an event log of an ERC20 transfer event from the  smart contract  (https://etherscan.io/token/0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5#readContract)  that represents the $PICKLE token. On  Etherscan  (https://etherscan.io/tx/0x2bb7c8283b782355875fa37d05e4bd962519ea294678a3dcf2fdffbbd0761bc5#eventlog) , the undecoded event looks like this: If we query for this transaction in the `ethereum.logs` table in the Dune database, we will receive the same encoded bytecode as our result dataset. SELECT *\nFROM ethereum.logs\nWHERE tx_hash = 0x2bb7c8283b782355875fa37d05e4bd962519ea294678a3dcf2fdffbbd0761bc5\n We could make short work of this encoded bytecode by using  DuneSQL Varbinary functions  (/query-engine/Functions-and-operators/varbinary)  to decode it, but having the contract's ABI at hand makes this process much easier.  This contract is decoded in Dune, so we can use the  pickle_finance_ethereum.PickleToken_evt_Transfer  table to access the decoded event log. SELECT *\nFROM pickle_finance_ethereum.PickleToken_evt_Transfer\nWHERE evt_tx_hash = 0x2bb7c8283b782355875fa37d05e4bd962519ea294678a3dcf2fdffbbd0761bc5 Now this is actually useful for analyzing this transaction!  This data is much more readable and understandable than the encoded bytecode. We can see the sender, receiver, and the amount of tokens transferred in this event log. How do I understand decoded data? Decoded data is the high level programming language representation of two pieces of software talking to each other via the blockchain. It's not always easy for a human to understand what exactly is going on in these interactions, but most of the time, looking at column names and the data that is transmitted within them should help you to understand what is happening within that specific log or call. If you are not able to make sense of the data by just searching the tables, it usually helps to look at single transactions using the transaction hash and  Etherscan  (https://etherscan.io) . Furthermore, going into the code of the smart contract (our favorite way to do this is  DethCode  (https://etherscan.deth.net) ) to read the comments or the actual logic can help to understand the smart contract's emitted data. If that also doesn't lead to satisfactory results, scouring the relevant docs and GitHub of the project can lead you to the desired answers. Furthermore, talking to the developers and core community of a project can also help you to get an understanding of the smart contracts. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/ink/decoded/overview) Traces  (/data-catalog/evm/ink/raw/traces) Call Tables  (/data-catalog/evm/ink/decoded/call-tables) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/ink/decoded/overview"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw ink.transactions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink Overview  (/data-catalog/evm/ink/overview) Raw Blocks  (/data-catalog/evm/ink/raw/blocks) Creation Traces  (/data-catalog/evm/ink/raw/creation-traces) Logs  (/data-catalog/evm/ink/raw/logs) Transactions  (/data-catalog/evm/ink/raw/transactions) Traces  (/data-catalog/evm/ink/raw/traces) Decoded Curated KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Overview  (/data-catalog/evm/ink/overview) Raw Blocks  (/data-catalog/evm/ink/raw/blocks) Creation Traces  (/data-catalog/evm/ink/raw/creation-traces) Logs  (/data-catalog/evm/ink/raw/logs) Transactions  (/data-catalog/evm/ink/raw/transactions) Traces  (/data-catalog/evm/ink/raw/traces) Decoded Curated Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw ink.transactions Description of the ink.transactions table on Dune Table Description The  ink .transactions  table contains information about all transactions on the  ink  blockchain. Each row represents a single transaction and includes information such as block number, hash, timestamp, sender, recipient, value, gas, gas price, and more. Transactions are the fundamental unit of interaction with the  ink  blockchain. Transactions are created by users and are used to send value, deploy smart contracts, and interact with smart contracts. This is the raw version of this table. If the chain is a Fully Managed chain, decoded transaction calls will be available, see  call tables  (/data-catalog/evm/ink/decoded/call-tables)  section. If this is a Hosted chain, decoded call tables will not be available. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Examples Show all transactions sent by a specific address SELECT * \nFROM ink.transactions WHERE \"from\" = '0x50A1b5c358F8D34F0d35aA2f10742c46054E247e'\n Count the number of transactions per block SELECT \n    block_number, \n    COUNT(*)\nFROM ink.transactions\nGROUP BY 1\nORDER BY 1 DESC\nLIMIT 10\n Show the top 10 transactions with the highest gas price SELECT \n    hash, \n    gas_price\nFROM ink.transactions\nORDER BY gas_price DESC\nLIMIT 10\n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/ink/raw/transactions) Logs  (/data-catalog/evm/ink/raw/logs) Traces  (/data-catalog/evm/ink/raw/traces) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/ink/raw/transactions"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw ink.blocks Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink Overview  (/data-catalog/evm/ink/overview) Raw Blocks  (/data-catalog/evm/ink/raw/blocks) Creation Traces  (/data-catalog/evm/ink/raw/creation-traces) Logs  (/data-catalog/evm/ink/raw/logs) Transactions  (/data-catalog/evm/ink/raw/transactions) Traces  (/data-catalog/evm/ink/raw/traces) Decoded Curated KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Overview  (/data-catalog/evm/ink/overview) Raw Blocks  (/data-catalog/evm/ink/raw/blocks) Creation Traces  (/data-catalog/evm/ink/raw/creation-traces) Logs  (/data-catalog/evm/ink/raw/logs) Transactions  (/data-catalog/evm/ink/raw/transactions) Traces  (/data-catalog/evm/ink/raw/traces) Decoded Curated Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw ink.blocks Description of the ink.blocks table on Dune Table description The  ink .blocks  table contains information about blocks in the  ink  blockchain. A block is a collection of transactions that are hashed and added to the blockchain. Each block contains a reference to the previous block, known as the parent hash, and a timestamp. The table contains information about each block, such as the block number, the block hash, the block size, the number of transactions, and the gas used. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Examples Show the most recent blocks SELECT\n    number,\n    hash, \n    size,\n    gas_used\n  FROM ink.blocks\n  ORDER BY number DESC\n  LIMIT 10 Show the number of blocks mined each day SELECT\n    date_trunc('day', time) AS day,\n    count(distinct number)\n  FROM ink.blocks\n  GROUP BY day\n  ORDER BY day DESC Show the number of transactions in each block SELECT\n    number,\n    count(*)\n  FROM ink.blocks\n  GROUP BY 1 \n  LIMIT 10 Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/ink/raw/blocks) Overview  (/data-catalog/evm/ink/overview) Creation Traces  (/data-catalog/evm/ink/raw/creation-traces) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/ink/raw/blocks"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded Call Tables Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Overview  (/data-catalog/evm/polygon/overview) Raw Decoded Overview  (/data-catalog/evm/polygon/decoded/overview) Call Tables  (/data-catalog/evm/polygon/decoded/call-tables) Event Logs  (/data-catalog/evm/polygon/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/polygon/decoded/contracts) Decoded Logs  (/data-catalog/evm/polygon/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/polygon/decoded/traces-decoded) Curated Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded Call Tables On Dune, we parse all message calls and transactions made to smart contracts in their own tables. ", "url": "https://docs.dune.com/data-catalog/evm/polygon/decoded/call-tables"}
{"content": "\u200b Overview \n On Dune, we parse all message calls and transactions made to smart contracts in their own tables. This allows us to isolate the logic of a specific smart contract and analyze how it interacts with other smart contracts. \n The data is stored in the format: \n [projectname_blockchain].[contractName]_call_[functionName] \n This allows us to analyze how a specific function is used in a smart contract, and how often it is called, as well as how it interacts with other smart contracts. \n Call tables always originate from the  traces  table, which contains all the transactions and message calls on the Ethereum network. We parse the  data  field of the  traces  table to decode the function call and parameters. \n ", "url": "https://docs.dune.com/data-catalog/evm/polygon/decoded/call-tables#overview"}
{"content": "\u200b Decoding \n When a transaction is sent to a smart contract on the Ethereum network, it contains a  data  field. This  data  field is the encoded function call and parameters. Dune decodes this data and stores it in the corresponding table. \n For example, when a transaction is sent to the  Uniswap v3 factory  (https://etherscan.io/address/0x1f98431c8ad98523631ae4a59f267346ea31f984#code)  contract on the Ethereum network, Dune will decode the  data  field and store it in the table: \n uniswap_v3_ethereum.Factory_call_createPool \n \n ", "url": "https://docs.dune.com/data-catalog/evm/polygon/decoded/call-tables#decoding"}
{"content": "\u200b Multiple Instances \n For a contract where multiple instances exist, we will decode all calls to all instances of this smart contract into one table. If there are transactions calling the  swap  function of any instance of the  Uniswap v3 pair  (https://etherscan.io/address/0x8f8ef111b67c04eb1641f5ff19ee54cda062f163#writeContract)  contract, we will decode this data into the table  uniswap_v3_ethereum.Pair_call_swap . The  pair  contract is a template contract and there are many instances of it, each with its own address. The column  contract_address  will indicate the address of the instance of the pair contract that was called. \n \n ", "url": "https://docs.dune.com/data-catalog/evm/polygon/decoded/call-tables#multiple-instances"}
{"content": "\u200b Common misconceptions \n One thing to keep in mind here is that  web3.js  (https://web3js.readthedocs.io) ,  web3.py  (https://web3py.readthedocs.io/en/stable)  and all other methods of (locally) calling a  pure ,  read , or  constant  function do not broadcast or publish anything on the blockchain and are therefore not recorded in Dune. \n However, if one of these functions is invoked by another smart contract in the context of a transaction, this will be broadcast on the chain and therefore accessible in Dune. \n In short:  State data stored in the memory of a smart contract is not available on Dune! \n A good example of this is the function  decimals  of the  erc20 token contract  (https://etherscan.io/token/0x1f9840a85d5af5bf1d1762f925bdaddc4201f984#readContract)   Uni  which is a  constant  state variable that is able to be accessed through an automatically created \u201c getter function  (https://docs.soliditylang.org/en/v0.7.4/contracts.html#getter-functions) \u201d. Should a smart contract invoke this function in the context of transaction, this message call will be recorded in the Dune table  uniswap.\"UNI_call_decimals\"  (https://dune.com/queries/741354) . \n This is in contrast to anyone calling this function locally using web3.py/web3.js or using the Etherscan frontend to access this state. These local calls are not recorded in Dune. \n ", "url": "https://docs.dune.com/data-catalog/evm/polygon/decoded/call-tables#common-misconceptions"}
{"content": "\u200b Further Reading \n What is the difference between a transaction and a call?  (https://ethereum.stackexchange.com/questions/765/what-is-the-difference-between-a-transaction-and-a-call) Soliditylang.org documentation  (https://docs.soliditylang.org/en/v0.8.13/contracts.html#function-visibility) How Calldata is Encoded  (https://degatchi.com/articles/reading-raw-evm-calldata) \n // \u2026 existing code \u2026 Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/polygon/decoded/call-tables) Overview  (/data-catalog/evm/polygon/decoded/overview) Event Logs  (/data-catalog/evm/polygon/decoded/event-logs) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Overview  (#overview) Decoding  (#decoding) Multiple Instances  (#multiple-instances) Common misconceptions  (#common-misconceptions) Further Reading  (#further-reading)", "url": "https://docs.dune.com/data-catalog/evm/polygon/decoded/call-tables#further-reading"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation DEX dex_aggregator.trades on ethereum Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Overview  (/data-catalog/evm/ethereum/overview) Raw Decoded Curated DEX Dex Trades  (/data-catalog/evm/ethereum/curated-data/dex/dex-trades) Aggregator Trades  (/data-catalog/evm/ethereum/curated-data/dex/dex-aggregator-trades) NFT Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot DEX dex_aggregator.trades on ethereum Description of the Dex Aggregator Trades table for ethereum  This table is a cross-chain table but can be filtered for  ethereum  transactions. Table Description The  dex_aggregator.trades  table captures high-level data on trades executed via decentralized exchange (DEX) aggregators. These aggregators aggregate liquidity from multiple DEXs to provide users with the best possible trade execution. Unlike the  dex.trades  table, which records each intermediary step of a trade,  dex_aggregator.trades  condenses the trade data to reflect the user's intended trade, presenting it as a single entry. Functional Overview Users can expect the  dex_aggregator.trades  table to provide a high-level view of DEX trades facilitated by aggregators. This table simplifies trade records by showing a single entry for trades that may involve multiple DEXs and liquidity pools. For instance, a user might initiate a trade to swap USDC for PEPE via a DEX aggregator. The aggregator might route this trade through several liquidity pools such as WETH-USDC and WETH-PEPE, but  dex_aggregator.trades  will record it as a single USDC \u2192 PEPE trade. Complimentary to  dex_aggregator.trades  is the  dex.trades  table, where detailed trade executions are recorded. This table captures the granular steps of each trade, including interactions with different liquidity pools. The volume routed through aggregators is also recorded in the  dex.trades  table. One row in  dex_aggregator.trades  corresponds to one or more rows in  dex.trades , providing a comprehensive view of the detailed execution path that aggregated trades take. Coverage  The following table shows which projects and versions of those projects are covered in the  dex.trades  table on  ethereum .  Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/ethereum/curated-data/dex/dex-aggregator-trades) Dex Trades  (/data-catalog/evm/ethereum/curated-data/dex/dex-trades) NFT Trades  (/data-catalog/evm/ethereum/curated-data/nft/nft-trades) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/ethereum/curated-data/dex/dex-aggregator-trades"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw ink.logs Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink Overview  (/data-catalog/evm/ink/overview) Raw Blocks  (/data-catalog/evm/ink/raw/blocks) Creation Traces  (/data-catalog/evm/ink/raw/creation-traces) Logs  (/data-catalog/evm/ink/raw/logs) Transactions  (/data-catalog/evm/ink/raw/transactions) Traces  (/data-catalog/evm/ink/raw/traces) Decoded Curated KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Overview  (/data-catalog/evm/ink/overview) Raw Blocks  (/data-catalog/evm/ink/raw/blocks) Creation Traces  (/data-catalog/evm/ink/raw/creation-traces) Logs  (/data-catalog/evm/ink/raw/logs) Transactions  (/data-catalog/evm/ink/raw/transactions) Traces  (/data-catalog/evm/ink/raw/traces) Decoded Curated Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw ink.logs Description of the ink.logs table on Dune Table Description The  ink .logs  table represents the logs generated by the Ethereum Virtual Machine (EVM) when a contract is executed. Logs are a way to store data on the blockchain. Logs originate from events that occur during the execution of a smart contract. A log consists of: topic list: a list of 0 to 3 32-byte data topics.  Topic0  is the hash of the signature of the event (indexed), and the remaining topics are indexed parameters of the event. data: contains non-indexed data. This is the raw version of this table. If the chain is a Fully Managed chain, decoded transaction calls will be available, see  call tables  (/data-catalog/evm/ink/decoded/call-tables)  section. If this is a Hosted chain, decoded call tables will not be available. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Examples Filter the logs for a specific contract SELECT *\nFROM ink.logs\nWHERE contract_address = 0x06012c8cf97bead5deae237070f9587f8e7a266d\nLIMIT 10 Filter the logs for a specific topic SELECT *\nFROM ink.logs\nWHERE topic0 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n Show the logs of a specific block SELECT *\nFROM ink.logs\nWHERE evt_block_number = 1000000\n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/ink/raw/logs) Creation Traces  (/data-catalog/evm/ink/raw/creation-traces) Transactions  (/data-catalog/evm/ink/raw/transactions) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/ink/raw/logs"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw polygon.creation_traces Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Overview  (/data-catalog/evm/polygon/overview) Raw Blocks  (/data-catalog/evm/polygon/raw/blocks) Creation Traces  (/data-catalog/evm/polygon/raw/creation-traces) Logs  (/data-catalog/evm/polygon/raw/logs) Transactions  (/data-catalog/evm/polygon/raw/transactions) Traces  (/data-catalog/evm/polygon/raw/traces) Decoded Curated Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw polygon.creation_traces Description of the polygon.creation_traces table on Dune Table Description The  polygon .creation_traces  table contains information about the creation of smart contracts on the  polygon  blockchain. This includes the address of the contract, the address of the creator, the block number at which the contract was created, the transaction hash, and the contract's bytecode. This table is useful for understanding the deployment of smart contracts on the  polygon  blockchain. This table is a subset of the  traces  table, which contains information about all traces on the  polygon  blockchain. The  creation_traces  table is filtered to only include traces that create new smart contracts. The filter for this is  type = 'create'  . Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Examples Show the creation of a specific smart contract SELECT * FROM polygon.creation_traces\nWHERE contract_address = 0x06012c8cf97bead5deae237070f9587f8e7a266d Show the creation of smart contracts by a specific creator SELECT * FROM polygon.creation_traces\nWHERE \"from\" = 0x0d4a11d5eeaac28ec3f61d100da81f6a1b65c9d6 Show the creation of smart contracts in the last 10 days SELECT \n    date_trunc('day', block_time) AS day,\n    COUNT(*)\nFROM polygon.creation_traces\nGROUP BY 1\nORDER BY 1 DESC\nLIMIT 10 Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/polygon/raw/creation-traces) Blocks  (/data-catalog/evm/polygon/raw/blocks) Logs  (/data-catalog/evm/polygon/raw/logs) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/polygon/raw/creation-traces"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded Overview Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Overview  (/data-catalog/evm/kaia/overview) Raw Decoded Overview  (/data-catalog/evm/kaia/decoded/overview) Call Tables  (/data-catalog/evm/kaia/decoded/call-tables) Event Logs  (/data-catalog/evm/kaia/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/kaia/decoded/contracts) Decoded Logs  (/data-catalog/evm/kaia/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/kaia/decoded/traces-decoded) Curated Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded Overview Simplifying smart contract analysis through human-readable tables. Overview of Dune's Decoded Data Approach Dune uses the ABI (Application Binary Interface) of smart contracts to decode blockchain transactions into structured tables. Each event log and function call from the ABI are parsed into their own tables. This decoding process transforms the raw, encoded data on the blockchain into human-readable tables, simplifying the analysis of smart contract data. Dune's decoded data approach offers several benefits: Enhanced Readability:  The decoded data tables provide a clear and intuitive representation of smart contract activities. Efficient Analysis:  The structured tables enable efficient querying and analysis of smart contract data. Handling Multiple Contract Instances:  For smart contracts with multiple instances, Dune aggregates the data from these instances into a single table, simplifying the analysis process. Collaborative Mapping:  Dune's smart contract library is continuously expanded through the active participation of the Dune community, ensuring that the decoding coverage remains comprehensive and current. Explore decoded logs  (/data-catalog/evm/kaia/decoded/event-logs) Explore decoded traces  (/data-catalog/evm/kaia/decoded/call-tables) Which contracts have decoded data? Contract submission on Dune are driven by the community. Usually, the odds are good that the contract you are looking at is already decoded, but especially for new projects or new contracts, it might be that the contract is not decoded yet. In those cases, you can submit the contract to be decoded. Decoding usually takes about 24 hours, in special cases it might take longer. You can check if contracts are already decoded by querying the  [blockchain].contracts  tables, the  data explorer  (/web-app/query-editor/data-explorer) , or use  this dashboard  (https://dune.com/dune/is-my-contract-decoded-yet-v2) . If you want to submit several contracts at the same time, there is also the possibility of submitting a batch of contracts. To do so, please use  this CSV  (https://gist.github.com/antonio-mendes/c6a43c22862581674c11462cae230e23)  as a template and fill it in with the appropriate information for the contracts you want to decode. Afterwards, send the CSV to decoding@dune.com. Submit any contract for decoding  (/web-app/decoding-contracts) Explore already decoded contracts  (/data-catalog/evm/kaia/decoded/contracts) How does decoding work? Smart Contracts on any EVM blockchain are mostly written in high-level languages like  Solidity  (https://docs.soliditylang.org/en/v0.8.2)  or  Vyper  (https://vyper.readthedocs.io/en/stable) . In order for them to be deployed to an EVM execution environment, they need to be compiled to EVM executable bytecode. Once deployed, the bytecode gets associated with an address on the respective chain and is permanently stored in the chain's state storage. To be able to interact with this smart contract, which is now just bytecode, we need a guide to call the functions defined in the high-level languages. This translation of names and arguments into byte representation is done using an  Application Binary Interface (ABI) . The ABI documents names, types, and arguments precisely, which allows us to interact with the smart contract using a somewhat human-readable format. The ABI can be compiled using the high-level language source code. The ABI is used to call a smart contract or interpret the data it emits. Decoding Example We are going to look at an event log of an ERC20 transfer event from the  smart contract  (https://etherscan.io/token/0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5#readContract)  that represents the $PICKLE token. On  Etherscan  (https://etherscan.io/tx/0x2bb7c8283b782355875fa37d05e4bd962519ea294678a3dcf2fdffbbd0761bc5#eventlog) , the undecoded event looks like this: If we query for this transaction in the `ethereum.logs` table in the Dune database, we will receive the same encoded bytecode as our result dataset. SELECT *\nFROM ethereum.logs\nWHERE tx_hash = 0x2bb7c8283b782355875fa37d05e4bd962519ea294678a3dcf2fdffbbd0761bc5\n We could make short work of this encoded bytecode by using  DuneSQL Varbinary functions  (/query-engine/Functions-and-operators/varbinary)  to decode it, but having the contract's ABI at hand makes this process much easier.  This contract is decoded in Dune, so we can use the  pickle_finance_ethereum.PickleToken_evt_Transfer  table to access the decoded event log. SELECT *\nFROM pickle_finance_ethereum.PickleToken_evt_Transfer\nWHERE evt_tx_hash = 0x2bb7c8283b782355875fa37d05e4bd962519ea294678a3dcf2fdffbbd0761bc5 Now this is actually useful for analyzing this transaction!  This data is much more readable and understandable than the encoded bytecode. We can see the sender, receiver, and the amount of tokens transferred in this event log. How do I understand decoded data? Decoded data is the high level programming language representation of two pieces of software talking to each other via the blockchain. It's not always easy for a human to understand what exactly is going on in these interactions, but most of the time, looking at column names and the data that is transmitted within them should help you to understand what is happening within that specific log or call. If you are not able to make sense of the data by just searching the tables, it usually helps to look at single transactions using the transaction hash and  Etherscan  (https://etherscan.io) . Furthermore, going into the code of the smart contract (our favorite way to do this is  DethCode  (https://etherscan.deth.net) ) to read the comments or the actual logic can help to understand the smart contract's emitted data. If that also doesn't lead to satisfactory results, scouring the relevant docs and GitHub of the project can lead you to the desired answers. Furthermore, talking to the developers and core community of a project can also help you to get an understanding of the smart contracts. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/kaia/decoded/overview) Traces  (/data-catalog/evm/kaia/raw/traces) Call Tables  (/data-catalog/evm/kaia/decoded/call-tables) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/kaia/decoded/overview"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded Call Tables Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Overview  (/data-catalog/evm/base/overview) Raw Decoded Overview  (/data-catalog/evm/base/decoded/overview) Call Tables  (/data-catalog/evm/base/decoded/call-tables) Event Logs  (/data-catalog/evm/base/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/base/decoded/contracts) Decoded Logs  (/data-catalog/evm/base/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/base/decoded/traces-decoded) Curated Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded Call Tables On Dune, we parse all message calls and transactions made to smart contracts in their own tables. ", "url": "https://docs.dune.com/data-catalog/evm/base/decoded/call-tables"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw polygon.traces Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Overview  (/data-catalog/evm/polygon/overview) Raw Blocks  (/data-catalog/evm/polygon/raw/blocks) Creation Traces  (/data-catalog/evm/polygon/raw/creation-traces) Logs  (/data-catalog/evm/polygon/raw/logs) Transactions  (/data-catalog/evm/polygon/raw/transactions) Traces  (/data-catalog/evm/polygon/raw/traces) Decoded Curated Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw polygon.traces Description of the polygon.traces table on Dune Table Description The  polygon .traces  table contains the traces of the transactions executed on the Ethereum Virtual Machine (EVM). It includes the traces of the transaction and the traces of the internal transactions. Traces are the result of the execution of the transaction and are used to debug and understand the execution of the transaction. They are also known as `internal transactions` and can be used to understand the execution of a transaction. This is the raw version of this table. If the chain is a Fully Managed chain, decoded transaction calls will be available, see  call tables  (/data-catalog/evm/polygon/decoded/call-tables)  section. If this is a Hosted chain, decoded call tables will not be available. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Example Querying traces for a specific transaction hash SELECT *\nFROM polygon.traces\nWHERE tx_hash = 0xb30d6d67cf7d148c2257bf598c5f5cdf5912a3d05c7d3b000398d675d2fa912c\n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/polygon/raw/traces) Transactions  (/data-catalog/evm/polygon/raw/transactions) Overview  (/data-catalog/evm/polygon/decoded/overview) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/polygon/raw/traces"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw base.creation_traces Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Overview  (/data-catalog/evm/base/overview) Raw Blocks  (/data-catalog/evm/base/raw/blocks) Creation Traces  (/data-catalog/evm/base/raw/creation-traces) Logs  (/data-catalog/evm/base/raw/logs) Transactions  (/data-catalog/evm/base/raw/transactions) Traces  (/data-catalog/evm/base/raw/traces) Decoded Curated Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw base.creation_traces Description of the base.creation_traces table on Dune Table Description The  base .creation_traces  table contains information about the creation of smart contracts on the  base  blockchain. This includes the address of the contract, the address of the creator, the block number at which the contract was created, the transaction hash, and the contract's bytecode. This table is useful for understanding the deployment of smart contracts on the  base  blockchain. This table is a subset of the  traces  table, which contains information about all traces on the  base  blockchain. The  creation_traces  table is filtered to only include traces that create new smart contracts. The filter for this is  type = 'create'  . Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Examples Show the creation of a specific smart contract SELECT * FROM base.creation_traces\nWHERE contract_address = 0x06012c8cf97bead5deae237070f9587f8e7a266d Show the creation of smart contracts by a specific creator SELECT * FROM base.creation_traces\nWHERE \"from\" = 0x0d4a11d5eeaac28ec3f61d100da81f6a1b65c9d6 Show the creation of smart contracts in the last 10 days SELECT \n    date_trunc('day', block_time) AS day,\n    COUNT(*)\nFROM base.creation_traces\nGROUP BY 1\nORDER BY 1 DESC\nLIMIT 10 Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/base/raw/creation-traces) Blocks  (/data-catalog/evm/base/raw/blocks) Logs  (/data-catalog/evm/base/raw/logs) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/base/raw/creation-traces"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw base.traces Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Overview  (/data-catalog/evm/base/overview) Raw Blocks  (/data-catalog/evm/base/raw/blocks) Creation Traces  (/data-catalog/evm/base/raw/creation-traces) Logs  (/data-catalog/evm/base/raw/logs) Transactions  (/data-catalog/evm/base/raw/transactions) Traces  (/data-catalog/evm/base/raw/traces) Decoded Curated Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw base.traces Description of the base.traces table on Dune Table Description The  base .traces  table contains the traces of the transactions executed on the Ethereum Virtual Machine (EVM). It includes the traces of the transaction and the traces of the internal transactions. Traces are the result of the execution of the transaction and are used to debug and understand the execution of the transaction. They are also known as `internal transactions` and can be used to understand the execution of a transaction. This is the raw version of this table. If the chain is a Fully Managed chain, decoded transaction calls will be available, see  call tables  (/data-catalog/evm/base/decoded/call-tables)  section. If this is a Hosted chain, decoded call tables will not be available. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Example Querying traces for a specific transaction hash SELECT *\nFROM base.traces\nWHERE tx_hash = 0xb30d6d67cf7d148c2257bf598c5f5cdf5912a3d05c7d3b000398d675d2fa912c\n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/base/raw/traces) Transactions  (/data-catalog/evm/base/raw/transactions) Overview  (/data-catalog/evm/base/decoded/overview) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/base/raw/traces"}
{"content": "\u200b Overview \n On Dune, we parse all message calls and transactions made to smart contracts in their own tables. This allows us to isolate the logic of a specific smart contract and analyze how it interacts with other smart contracts. \n The data is stored in the format: \n [projectname_blockchain].[contractName]_call_[functionName] \n This allows us to analyze how a specific function is used in a smart contract, and how often it is called, as well as how it interacts with other smart contracts. \n Call tables always originate from the  traces  table, which contains all the transactions and message calls on the Ethereum network. We parse the  data  field of the  traces  table to decode the function call and parameters. \n ", "url": "https://docs.dune.com/data-catalog/evm/base/decoded/call-tables#overview"}
{"content": "\u200b Decoding \n When a transaction is sent to a smart contract on the Ethereum network, it contains a  data  field. This  data  field is the encoded function call and parameters. Dune decodes this data and stores it in the corresponding table. \n For example, when a transaction is sent to the  Uniswap v3 factory  (https://etherscan.io/address/0x1f98431c8ad98523631ae4a59f267346ea31f984#code)  contract on the Ethereum network, Dune will decode the  data  field and store it in the table: \n uniswap_v3_ethereum.Factory_call_createPool \n \n ", "url": "https://docs.dune.com/data-catalog/evm/base/decoded/call-tables#decoding"}
{"content": "\u200b Multiple Instances \n For a contract where multiple instances exist, we will decode all calls to all instances of this smart contract into one table. If there are transactions calling the  swap  function of any instance of the  Uniswap v3 pair  (https://etherscan.io/address/0x8f8ef111b67c04eb1641f5ff19ee54cda062f163#writeContract)  contract, we will decode this data into the table  uniswap_v3_ethereum.Pair_call_swap . The  pair  contract is a template contract and there are many instances of it, each with its own address. The column  contract_address  will indicate the address of the instance of the pair contract that was called. \n \n ", "url": "https://docs.dune.com/data-catalog/evm/base/decoded/call-tables#multiple-instances"}
{"content": "\u200b Common misconceptions \n One thing to keep in mind here is that  web3.js  (https://web3js.readthedocs.io) ,  web3.py  (https://web3py.readthedocs.io/en/stable)  and all other methods of (locally) calling a  pure ,  read , or  constant  function do not broadcast or publish anything on the blockchain and are therefore not recorded in Dune. \n However, if one of these functions is invoked by another smart contract in the context of a transaction, this will be broadcast on the chain and therefore accessible in Dune. \n In short:  State data stored in the memory of a smart contract is not available on Dune! \n A good example of this is the function  decimals  of the  erc20 token contract  (https://etherscan.io/token/0x1f9840a85d5af5bf1d1762f925bdaddc4201f984#readContract)   Uni  which is a  constant  state variable that is able to be accessed through an automatically created \u201c getter function  (https://docs.soliditylang.org/en/v0.7.4/contracts.html#getter-functions) \u201d. Should a smart contract invoke this function in the context of transaction, this message call will be recorded in the Dune table  uniswap.\"UNI_call_decimals\"  (https://dune.com/queries/741354) . \n This is in contrast to anyone calling this function locally using web3.py/web3.js or using the Etherscan frontend to access this state. These local calls are not recorded in Dune. \n ", "url": "https://docs.dune.com/data-catalog/evm/base/decoded/call-tables#common-misconceptions"}
{"content": "\u200b Further Reading \n What is the difference between a transaction and a call?  (https://ethereum.stackexchange.com/questions/765/what-is-the-difference-between-a-transaction-and-a-call) Soliditylang.org documentation  (https://docs.soliditylang.org/en/v0.8.13/contracts.html#function-visibility) How Calldata is Encoded  (https://degatchi.com/articles/reading-raw-evm-calldata) \n // \u2026 existing code \u2026 Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/base/decoded/call-tables) Overview  (/data-catalog/evm/base/decoded/overview) Event Logs  (/data-catalog/evm/base/decoded/event-logs) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Overview  (#overview) Decoding  (#decoding) Multiple Instances  (#multiple-instances) Common misconceptions  (#common-misconceptions) Further Reading  (#further-reading)", "url": "https://docs.dune.com/data-catalog/evm/base/decoded/call-tables#further-reading"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded Call Tables Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink Overview  (/data-catalog/evm/ink/overview) Raw Decoded Overview  (/data-catalog/evm/ink/decoded/overview) Call Tables  (/data-catalog/evm/ink/decoded/call-tables) Event Logs  (/data-catalog/evm/ink/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/ink/decoded/contracts) Decoded Logs  (/data-catalog/evm/ink/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/ink/decoded/traces-decoded) Curated KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Overview  (/data-catalog/evm/ink/overview) Raw Decoded Overview  (/data-catalog/evm/ink/decoded/overview) Call Tables  (/data-catalog/evm/ink/decoded/call-tables) Event Logs  (/data-catalog/evm/ink/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/ink/decoded/contracts) Decoded Logs  (/data-catalog/evm/ink/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/ink/decoded/traces-decoded) Curated Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded Call Tables On Dune, we parse all message calls and transactions made to smart contracts in their own tables. ", "url": "https://docs.dune.com/data-catalog/evm/ink/decoded/call-tables"}
{"content": "\u200b Overview \n On Dune, we parse all message calls and transactions made to smart contracts in their own tables. This allows us to isolate the logic of a specific smart contract and analyze how it interacts with other smart contracts. \n The data is stored in the format: \n [projectname_blockchain].[contractName]_call_[functionName] \n This allows us to analyze how a specific function is used in a smart contract, and how often it is called, as well as how it interacts with other smart contracts. \n Call tables always originate from the  traces  table, which contains all the transactions and message calls on the Ethereum network. We parse the  data  field of the  traces  table to decode the function call and parameters. \n ", "url": "https://docs.dune.com/data-catalog/evm/ink/decoded/call-tables#overview"}
{"content": "\u200b Decoding \n When a transaction is sent to a smart contract on the Ethereum network, it contains a  data  field. This  data  field is the encoded function call and parameters. Dune decodes this data and stores it in the corresponding table. \n For example, when a transaction is sent to the  Uniswap v3 factory  (https://etherscan.io/address/0x1f98431c8ad98523631ae4a59f267346ea31f984#code)  contract on the Ethereum network, Dune will decode the  data  field and store it in the table: \n uniswap_v3_ethereum.Factory_call_createPool \n \n ", "url": "https://docs.dune.com/data-catalog/evm/ink/decoded/call-tables#decoding"}
{"content": "\u200b Multiple Instances \n For a contract where multiple instances exist, we will decode all calls to all instances of this smart contract into one table. If there are transactions calling the  swap  function of any instance of the  Uniswap v3 pair  (https://etherscan.io/address/0x8f8ef111b67c04eb1641f5ff19ee54cda062f163#writeContract)  contract, we will decode this data into the table  uniswap_v3_ethereum.Pair_call_swap . The  pair  contract is a template contract and there are many instances of it, each with its own address. The column  contract_address  will indicate the address of the instance of the pair contract that was called. \n \n ", "url": "https://docs.dune.com/data-catalog/evm/ink/decoded/call-tables#multiple-instances"}
{"content": "\u200b Common misconceptions \n One thing to keep in mind here is that  web3.js  (https://web3js.readthedocs.io) ,  web3.py  (https://web3py.readthedocs.io/en/stable)  and all other methods of (locally) calling a  pure ,  read , or  constant  function do not broadcast or publish anything on the blockchain and are therefore not recorded in Dune. \n However, if one of these functions is invoked by another smart contract in the context of a transaction, this will be broadcast on the chain and therefore accessible in Dune. \n In short:  State data stored in the memory of a smart contract is not available on Dune! \n A good example of this is the function  decimals  of the  erc20 token contract  (https://etherscan.io/token/0x1f9840a85d5af5bf1d1762f925bdaddc4201f984#readContract)   Uni  which is a  constant  state variable that is able to be accessed through an automatically created \u201c getter function  (https://docs.soliditylang.org/en/v0.7.4/contracts.html#getter-functions) \u201d. Should a smart contract invoke this function in the context of transaction, this message call will be recorded in the Dune table  uniswap.\"UNI_call_decimals\"  (https://dune.com/queries/741354) . \n This is in contrast to anyone calling this function locally using web3.py/web3.js or using the Etherscan frontend to access this state. These local calls are not recorded in Dune. \n ", "url": "https://docs.dune.com/data-catalog/evm/ink/decoded/call-tables#common-misconceptions"}
{"content": "\u200b Further Reading \n What is the difference between a transaction and a call?  (https://ethereum.stackexchange.com/questions/765/what-is-the-difference-between-a-transaction-and-a-call) Soliditylang.org documentation  (https://docs.soliditylang.org/en/v0.8.13/contracts.html#function-visibility) How Calldata is Encoded  (https://degatchi.com/articles/reading-raw-evm-calldata) \n // \u2026 existing code \u2026 Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/ink/decoded/call-tables) Overview  (/data-catalog/evm/ink/decoded/overview) Event Logs  (/data-catalog/evm/ink/decoded/event-logs) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Overview  (#overview) Decoding  (#decoding) Multiple Instances  (#multiple-instances) Common misconceptions  (#common-misconceptions) Further Reading  (#further-reading)", "url": "https://docs.dune.com/data-catalog/evm/ink/decoded/call-tables#further-reading"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded ink.contracts Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink Overview  (/data-catalog/evm/ink/overview) Raw Decoded Overview  (/data-catalog/evm/ink/decoded/overview) Call Tables  (/data-catalog/evm/ink/decoded/call-tables) Event Logs  (/data-catalog/evm/ink/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/ink/decoded/contracts) Decoded Logs  (/data-catalog/evm/ink/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/ink/decoded/traces-decoded) Curated KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Overview  (/data-catalog/evm/ink/overview) Raw Decoded Overview  (/data-catalog/evm/ink/decoded/overview) Call Tables  (/data-catalog/evm/ink/decoded/call-tables) Event Logs  (/data-catalog/evm/ink/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/ink/decoded/contracts) Decoded Logs  (/data-catalog/evm/ink/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/ink/decoded/traces-decoded) Curated Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded ink.contracts Description of the ink.contracts table on Dune Table Description This table contains information about the contracts Dune has decoded on the  ink  blockchain. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/ink/decoded/contracts) Event Logs  (/data-catalog/evm/ink/decoded/event-logs) Decoded Logs  (/data-catalog/evm/ink/decoded/logs-decoded) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/ink/decoded/contracts"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw kaia.transactions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Overview  (/data-catalog/evm/kaia/overview) Raw Blocks  (/data-catalog/evm/kaia/raw/blocks) Creation Traces  (/data-catalog/evm/kaia/raw/creation-traces) Logs  (/data-catalog/evm/kaia/raw/logs) Transactions  (/data-catalog/evm/kaia/raw/transactions) Traces  (/data-catalog/evm/kaia/raw/traces) Decoded Curated Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw kaia.transactions Description of the kaia.transactions table on Dune Table Description The  kaia .transactions  table contains information about all transactions on the  kaia  blockchain. Each row represents a single transaction and includes information such as block number, hash, timestamp, sender, recipient, value, gas, gas price, and more. Transactions are the fundamental unit of interaction with the  kaia  blockchain. Transactions are created by users and are used to send value, deploy smart contracts, and interact with smart contracts. This is the raw version of this table. If the chain is a Fully Managed chain, decoded transaction calls will be available, see  call tables  (/data-catalog/evm/kaia/decoded/call-tables)  section. If this is a Hosted chain, decoded call tables will not be available. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Examples Show all transactions sent by a specific address SELECT * \nFROM kaia.transactions WHERE \"from\" = '0x50A1b5c358F8D34F0d35aA2f10742c46054E247e'\n Count the number of transactions per block SELECT \n    block_number, \n    COUNT(*)\nFROM kaia.transactions\nGROUP BY 1\nORDER BY 1 DESC\nLIMIT 10\n Show the top 10 transactions with the highest gas price SELECT \n    hash, \n    gas_price\nFROM kaia.transactions\nORDER BY gas_price DESC\nLIMIT 10\n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/kaia/raw/transactions) Logs  (/data-catalog/evm/kaia/raw/logs) Traces  (/data-catalog/evm/kaia/raw/traces) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/kaia/raw/transactions"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation NFT NFT.trades on corn Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Overview  (/data-catalog/evm/corn/overview) Raw Decoded Curated DEX NFT NFT Trades  (/data-catalog/evm/corn/curated-data/nft/nft-trades) Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot NFT NFT.trades on corn The  nft.trades  table captures detailed data on NFT marketplaces, recording all trade events across various protocols on corn.  This is a cross-chain table but can be filtered for  corn  transactions. Table Description The `nft.trades` table on Dune Analytics is central to capturing and analyzing Non-Fungible Token (NFT) transactions across various marketplaces. It is a pivotal resource for dissecting the intricacies of NFT trade execution, market behavior, and collector activity within the NFT space. Usage The `nft.trades` table serves as an essential tool for delving into the NFT market's complexities. It offers a detailed snapshot of each NFT transaction, encompassing data points such as sale price, transaction timestamp, buyer and seller addresses, and the specific NFT assets involved. This table allows analysts to explore trends in NFT valuation, trading volumes, and marketplace dynamics, providing insights into the evolving landscape of digital collectibles and art. Table Coverage  The following table shows which projects and versions of those projects are covered in the  dex.trades  table on  corn .  Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/corn/curated-data/nft/nft-trades) Aggregator Trades  (/data-catalog/evm/corn/curated-data/dex/dex-aggregator-trades) Overview  (/data-catalog/evm/degen/overview) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/corn/curated-data/nft/nft-trades"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation NFT NFT.trades on ethereum Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Overview  (/data-catalog/evm/ethereum/overview) Raw Decoded Curated DEX NFT NFT Trades  (/data-catalog/evm/ethereum/curated-data/nft/nft-trades) Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot NFT NFT.trades on ethereum The  nft.trades  table captures detailed data on NFT marketplaces, recording all trade events across various protocols on ethereum.  This is a cross-chain table but can be filtered for  ethereum  transactions. Table Description The `nft.trades` table on Dune Analytics is central to capturing and analyzing Non-Fungible Token (NFT) transactions across various marketplaces. It is a pivotal resource for dissecting the intricacies of NFT trade execution, market behavior, and collector activity within the NFT space. Usage The `nft.trades` table serves as an essential tool for delving into the NFT market's complexities. It offers a detailed snapshot of each NFT transaction, encompassing data points such as sale price, transaction timestamp, buyer and seller addresses, and the specific NFT assets involved. This table allows analysts to explore trends in NFT valuation, trading volumes, and marketplace dynamics, providing insights into the evolving landscape of digital collectibles and art. Table Coverage  The following table shows which projects and versions of those projects are covered in the  dex.trades  table on  ethereum .  Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/ethereum/curated-data/nft/nft-trades) Aggregator Trades  (/data-catalog/evm/ethereum/curated-data/dex/dex-aggregator-trades) Overview  (/data-catalog/evm/fantom/overview) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/ethereum/curated-data/nft/nft-trades"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw ink.traces Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink Overview  (/data-catalog/evm/ink/overview) Raw Blocks  (/data-catalog/evm/ink/raw/blocks) Creation Traces  (/data-catalog/evm/ink/raw/creation-traces) Logs  (/data-catalog/evm/ink/raw/logs) Transactions  (/data-catalog/evm/ink/raw/transactions) Traces  (/data-catalog/evm/ink/raw/traces) Decoded Curated KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Overview  (/data-catalog/evm/ink/overview) Raw Blocks  (/data-catalog/evm/ink/raw/blocks) Creation Traces  (/data-catalog/evm/ink/raw/creation-traces) Logs  (/data-catalog/evm/ink/raw/logs) Transactions  (/data-catalog/evm/ink/raw/transactions) Traces  (/data-catalog/evm/ink/raw/traces) Decoded Curated Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw ink.traces Description of the ink.traces table on Dune Table Description The  ink .traces  table contains the traces of the transactions executed on the Ethereum Virtual Machine (EVM). It includes the traces of the transaction and the traces of the internal transactions. Traces are the result of the execution of the transaction and are used to debug and understand the execution of the transaction. They are also known as `internal transactions` and can be used to understand the execution of a transaction. This is the raw version of this table. If the chain is a Fully Managed chain, decoded transaction calls will be available, see  call tables  (/data-catalog/evm/ink/decoded/call-tables)  section. If this is a Hosted chain, decoded call tables will not be available. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Example Querying traces for a specific transaction hash SELECT *\nFROM ink.traces\nWHERE tx_hash = 0xb30d6d67cf7d148c2257bf598c5f5cdf5912a3d05c7d3b000398d675d2fa912c\n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/ink/raw/traces) Transactions  (/data-catalog/evm/ink/raw/transactions) Overview  (/data-catalog/evm/ink/decoded/overview) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/ink/raw/traces"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded Event Logs Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink Overview  (/data-catalog/evm/ink/overview) Raw Decoded Overview  (/data-catalog/evm/ink/decoded/overview) Call Tables  (/data-catalog/evm/ink/decoded/call-tables) Event Logs  (/data-catalog/evm/ink/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/ink/decoded/contracts) Decoded Logs  (/data-catalog/evm/ink/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/ink/decoded/traces-decoded) Curated KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Overview  (/data-catalog/evm/ink/overview) Raw Decoded Overview  (/data-catalog/evm/ink/decoded/overview) Call Tables  (/data-catalog/evm/ink/decoded/call-tables) Event Logs  (/data-catalog/evm/ink/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/ink/decoded/contracts) Decoded Logs  (/data-catalog/evm/ink/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/ink/decoded/traces-decoded) Curated Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded Event Logs Smart Contracts emit event logs when certain predefined actions are completed. ", "url": "https://docs.dune.com/data-catalog/evm/ink/decoded/event-logs"}
{"content": "\u200b Overview \n Smart contracts emit event logs when certain predefined actions are completed. The emitted event logs are stored on the blockchain and are publicly accessible. Event logs are an important tool for smart contract developers to communicate with the outside world, as well as for data analysts to keep track of what happens inside of a smart contract. \n For example, the ERC20 standard defines the  Transfer  event, which is emitted every time a token transfer occurs. The event log contains the sender, the recipient and the amount of tokens transferred. \n event   Transfer ( address   indexed   from ,   address   indexed  to ,   uint256  value ) ; \n \n Decoded event logs always originate from the fields  topic0 ,  topic1 ,  topic2 ,  topic3  and  data  in the  logs  table. \n ", "url": "https://docs.dune.com/data-catalog/evm/ink/decoded/event-logs#overview"}
{"content": "\u200b Event Logs in Dune \n In Dune, we store all event logs of decoded smart contracts in separate tables. \n The structure published in these logs is predefined by the developer of the smart contract, the content is dynamically created during the transaction. \n Logs are useful for monitoring, alerting and in general keeping track of what happens inside of a smart contract. Logs are your best friend as a data analyst since they reliably present you with data that is intended to be analyzed post factum. If you ever want to see which logs  can  be emitted by a smart contract, you can simply search for the keyword  emit  in the source code of the smart contract. \n We will decode all event logs for smart contracts into tables named accordingly to this schema: \n [projectname_blockchain].[contractName]_evt_[eventName] \n ", "url": "https://docs.dune.com/data-catalog/evm/ink/decoded/event-logs#event-logs-in-dune"}
{"content": "\u200b Example \n Let\u2019s take the  uniswap v3 factory  (https://etherscan.io/address/0x1f98431c8ad98523631ae4a59f267346ea31f984#code)  as an example and look at the event that gets emitted upon the creation of a new pool. The event is called  PoolCreated  and gets emitted every time somebody successfully deploys a new Uniswap V3 pool by calling the function  createPool . The event will readily give us information like the tokens in the pool, the fee tier of this pool and the tick spacing. In Etherscan, you can easily look at the event logs of transaction by opening the  logs tab  (https://etherscan.io/tx/0xdeb368592f3de0f2840754bce61d2c3f29cdb3407c63c699052e68a854c71eaa#eventlog) . In Dune, this particular event will be stored in the table: \n uniswap_v3_ethereum.Factory_evt_PoolCreated \n \n ", "url": "https://docs.dune.com/data-catalog/evm/ink/decoded/event-logs#example"}
{"content": "\u200b Multiple Instances \n If there is multiple instances of a contract we will collect all event logs across all instances of this smart contract in one table. For example, all uniswap v3 pool  swap  events (on ethereum) are stored in the table:  uniswap_v3_ethereum.Pair_evt_Swap \n The column  contract_address  indicates as to which smart contract emitted this event. \n \n ", "url": "https://docs.dune.com/data-catalog/evm/ink/decoded/event-logs#multiple-instances"}
{"content": "\u200b Further Reading \n \n Understanding event logs on the Ethereum blockchain  (https://medium.com/mycrypto/understanding-event-logs-on-the-ethereum-blockchain-f4ae7ba50378) \n Everything You Ever Wanted to Know About Events and Logs on Ethereum  (https://medium.com/linum-labs/everything-you-ever-wanted-to-know-about-events-and-logs-on-ethereum-fec84ea7d0a5) \n \n Submit any contract for decoding  (/web-app/decoding/decoding-contracts) Explore already decoded contracts  (/data-catalog/evm/ethereum/decoded/contracts) Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/ink/decoded/event-logs) Call Tables  (/data-catalog/evm/ink/decoded/call-tables) Decoded Contracts  (/data-catalog/evm/ink/decoded/contracts) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Overview  (#overview) Event Logs in Dune  (#event-logs-in-dune) Example  (#example) Multiple Instances  (#multiple-instances) Further Reading  (#further-reading)", "url": "https://docs.dune.com/data-catalog/evm/ink/decoded/event-logs#further-reading"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw ink.creation_traces Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink Overview  (/data-catalog/evm/ink/overview) Raw Blocks  (/data-catalog/evm/ink/raw/blocks) Creation Traces  (/data-catalog/evm/ink/raw/creation-traces) Logs  (/data-catalog/evm/ink/raw/logs) Transactions  (/data-catalog/evm/ink/raw/transactions) Traces  (/data-catalog/evm/ink/raw/traces) Decoded Curated KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Overview  (/data-catalog/evm/ink/overview) Raw Blocks  (/data-catalog/evm/ink/raw/blocks) Creation Traces  (/data-catalog/evm/ink/raw/creation-traces) Logs  (/data-catalog/evm/ink/raw/logs) Transactions  (/data-catalog/evm/ink/raw/transactions) Traces  (/data-catalog/evm/ink/raw/traces) Decoded Curated Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw ink.creation_traces Description of the ink.creation_traces table on Dune Table Description The  ink .creation_traces  table contains information about the creation of smart contracts on the  ink  blockchain. This includes the address of the contract, the address of the creator, the block number at which the contract was created, the transaction hash, and the contract's bytecode. This table is useful for understanding the deployment of smart contracts on the  ink  blockchain. This table is a subset of the  traces  table, which contains information about all traces on the  ink  blockchain. The  creation_traces  table is filtered to only include traces that create new smart contracts. The filter for this is  type = 'create'  . Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Examples Show the creation of a specific smart contract SELECT * FROM ink.creation_traces\nWHERE contract_address = 0x06012c8cf97bead5deae237070f9587f8e7a266d Show the creation of smart contracts by a specific creator SELECT * FROM ink.creation_traces\nWHERE \"from\" = 0x0d4a11d5eeaac28ec3f61d100da81f6a1b65c9d6 Show the creation of smart contracts in the last 10 days SELECT \n    date_trunc('day', block_time) AS day,\n    COUNT(*)\nFROM ink.creation_traces\nGROUP BY 1\nORDER BY 1 DESC\nLIMIT 10 Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/ink/raw/creation-traces) Blocks  (/data-catalog/evm/ink/raw/blocks) Logs  (/data-catalog/evm/ink/raw/logs) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/ink/raw/creation-traces"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Optimism Optimism Overview Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Overview  (/data-catalog/evm/optimism/overview) Raw Decoded Curated Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Optimism Optimism Overview Optimism data on Dune Optimism is a Layer 2 scaling solution for Ethereum that utilizes Optimistic Rollups to drastically improve transaction throughput while reducing costs. Optimism is designed to be fully compatible with Ethereum, allowing developers to deploy existing Ethereum applications without significant modifications. \n Optimism operates under the principle of \u201coptimistic execution,\u201d where transactions are assumed to be valid by default and only fully verified if a challenge is raised. This method greatly accelerates transaction processing times and lowers gas fees. \n Scalability and Cost-Efficiency: \nOptimism enhances Ethereum\u2019s scalability by handling transactions off-chain while maintaining the security and decentralization of the main Ethereum network. It reduces the overall transaction costs, making it more accessible for users and developers. \n Ethereum Compatibility: \nBeing fully compatible with Ethereum, Optimism allows for seamless migration of dApps and smart contracts, utilizing the same tools and programming languages used on Ethereum. \n Community-Driven Governance: \nOptimism actively supports a community-driven approach to its governance and development, promoting a decentralized and inclusive platform ecosystem. \n Optimism documentation Access the official documentation for Optimism, providing detailed information on its technology, architecture, and how to build on the platform.  (https://community.optimism.io/docs/) \n ", "url": "https://docs.dune.com/data-catalog/evm/optimism/overview"}
{"content": "\u200b Data Catalog \n Logs Event logs from smart contracts, providing insights into contract interactions and the dynamic activity on Optimism.  (./raw/logs) Blocks Information on blocks processed, reflecting the enhanced throughput and capacity of the Optimism network.  (./raw/blocks) Transactions Detailed information on transactions, highlighting the operational efficiency and reduced costs facilitated by Optimistic Rollups.  (./raw/transactions) decoded Decoded transaction data for easier analysis and understanding of contract executions on the Optimism network.  (./decoded/overview) Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/optimism/overview) Traces  (/data-catalog/evm/mode/raw/traces) Blocks  (/data-catalog/evm/optimism/raw/blocks) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Data Catalog  (#data-catalog)", "url": "https://docs.dune.com/data-catalog/evm/optimism/overview#data-catalog"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded Event Logs Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Overview  (/data-catalog/evm/base/overview) Raw Decoded Overview  (/data-catalog/evm/base/decoded/overview) Call Tables  (/data-catalog/evm/base/decoded/call-tables) Event Logs  (/data-catalog/evm/base/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/base/decoded/contracts) Decoded Logs  (/data-catalog/evm/base/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/base/decoded/traces-decoded) Curated Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded Event Logs Smart Contracts emit event logs when certain predefined actions are completed. ", "url": "https://docs.dune.com/data-catalog/evm/base/decoded/event-logs"}
{"content": "\u200b Overview \n Smart contracts emit event logs when certain predefined actions are completed. The emitted event logs are stored on the blockchain and are publicly accessible. Event logs are an important tool for smart contract developers to communicate with the outside world, as well as for data analysts to keep track of what happens inside of a smart contract. \n For example, the ERC20 standard defines the  Transfer  event, which is emitted every time a token transfer occurs. The event log contains the sender, the recipient and the amount of tokens transferred. \n event   Transfer ( address   indexed   from ,   address   indexed  to ,   uint256  value ) ; \n \n Decoded event logs always originate from the fields  topic0 ,  topic1 ,  topic2 ,  topic3  and  data  in the  logs  table. \n ", "url": "https://docs.dune.com/data-catalog/evm/base/decoded/event-logs#overview"}
{"content": "\u200b Event Logs in Dune \n In Dune, we store all event logs of decoded smart contracts in separate tables. \n The structure published in these logs is predefined by the developer of the smart contract, the content is dynamically created during the transaction. \n Logs are useful for monitoring, alerting and in general keeping track of what happens inside of a smart contract. Logs are your best friend as a data analyst since they reliably present you with data that is intended to be analyzed post factum. If you ever want to see which logs  can  be emitted by a smart contract, you can simply search for the keyword  emit  in the source code of the smart contract. \n We will decode all event logs for smart contracts into tables named accordingly to this schema: \n [projectname_blockchain].[contractName]_evt_[eventName] \n ", "url": "https://docs.dune.com/data-catalog/evm/base/decoded/event-logs#event-logs-in-dune"}
{"content": "\u200b Example \n Let\u2019s take the  uniswap v3 factory  (https://etherscan.io/address/0x1f98431c8ad98523631ae4a59f267346ea31f984#code)  as an example and look at the event that gets emitted upon the creation of a new pool. The event is called  PoolCreated  and gets emitted every time somebody successfully deploys a new Uniswap V3 pool by calling the function  createPool . The event will readily give us information like the tokens in the pool, the fee tier of this pool and the tick spacing. In Etherscan, you can easily look at the event logs of transaction by opening the  logs tab  (https://etherscan.io/tx/0xdeb368592f3de0f2840754bce61d2c3f29cdb3407c63c699052e68a854c71eaa#eventlog) . In Dune, this particular event will be stored in the table: \n uniswap_v3_ethereum.Factory_evt_PoolCreated \n \n ", "url": "https://docs.dune.com/data-catalog/evm/base/decoded/event-logs#example"}
{"content": "\u200b Multiple Instances \n If there is multiple instances of a contract we will collect all event logs across all instances of this smart contract in one table. For example, all uniswap v3 pool  swap  events (on ethereum) are stored in the table:  uniswap_v3_ethereum.Pair_evt_Swap \n The column  contract_address  indicates as to which smart contract emitted this event. \n \n ", "url": "https://docs.dune.com/data-catalog/evm/base/decoded/event-logs#multiple-instances"}
{"content": "\u200b Further Reading \n \n Understanding event logs on the Ethereum blockchain  (https://medium.com/mycrypto/understanding-event-logs-on-the-ethereum-blockchain-f4ae7ba50378) \n Everything You Ever Wanted to Know About Events and Logs on Ethereum  (https://medium.com/linum-labs/everything-you-ever-wanted-to-know-about-events-and-logs-on-ethereum-fec84ea7d0a5) \n \n Submit any contract for decoding  (/web-app/decoding/decoding-contracts) Explore already decoded contracts  (/data-catalog/evm/ethereum/decoded/contracts) Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/base/decoded/event-logs) Call Tables  (/data-catalog/evm/base/decoded/call-tables) Decoded Contracts  (/data-catalog/evm/base/decoded/contracts) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Overview  (#overview) Event Logs in Dune  (#event-logs-in-dune) Example  (#example) Multiple Instances  (#multiple-instances) Further Reading  (#further-reading)", "url": "https://docs.dune.com/data-catalog/evm/base/decoded/event-logs#further-reading"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded base.contracts Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Overview  (/data-catalog/evm/base/overview) Raw Decoded Overview  (/data-catalog/evm/base/decoded/overview) Call Tables  (/data-catalog/evm/base/decoded/call-tables) Event Logs  (/data-catalog/evm/base/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/base/decoded/contracts) Decoded Logs  (/data-catalog/evm/base/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/base/decoded/traces-decoded) Curated Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded base.contracts Description of the base.contracts table on Dune Table Description This table contains information about the contracts Dune has decoded on the  base  blockchain. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/base/decoded/contracts) Event Logs  (/data-catalog/evm/base/decoded/event-logs) Decoded Logs  (/data-catalog/evm/base/decoded/logs-decoded) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/base/decoded/contracts"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded base.logs_decoded Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Overview  (/data-catalog/evm/base/overview) Raw Decoded Overview  (/data-catalog/evm/base/decoded/overview) Call Tables  (/data-catalog/evm/base/decoded/call-tables) Event Logs  (/data-catalog/evm/base/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/base/decoded/contracts) Decoded Logs  (/data-catalog/evm/base/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/base/decoded/traces-decoded) Curated Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded base.logs_decoded Description of the base.logs_decoded table on Dune Table Description The  logs_decoded  table contains decoded logs from  base  transactions. The table matches  topic0  to the event signature and the corresponding event name. The table does not contain the full event data and is not suitable for analysis of smart contract level data. For that, use the specific event tables as described in  Event Logs  (/data-catalog/evm/base/decoded/event-logs) . This table is great for gaining a high level understanding of the types of events that are being emitted by a smart contract or smart contracts of a certain protocol. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/base/decoded/logs-decoded) Decoded Contracts  (/data-catalog/evm/base/decoded/contracts) Decoded Traces  (/data-catalog/evm/base/decoded/traces-decoded) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/base/decoded/logs-decoded"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded polygon.logs_decoded Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Overview  (/data-catalog/evm/polygon/overview) Raw Decoded Overview  (/data-catalog/evm/polygon/decoded/overview) Call Tables  (/data-catalog/evm/polygon/decoded/call-tables) Event Logs  (/data-catalog/evm/polygon/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/polygon/decoded/contracts) Decoded Logs  (/data-catalog/evm/polygon/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/polygon/decoded/traces-decoded) Curated Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded polygon.logs_decoded Description of the polygon.logs_decoded table on Dune Table Description The  logs_decoded  table contains decoded logs from  polygon  transactions. The table matches  topic0  to the event signature and the corresponding event name. The table does not contain the full event data and is not suitable for analysis of smart contract level data. For that, use the specific event tables as described in  Event Logs  (/data-catalog/evm/polygon/decoded/event-logs) . This table is great for gaining a high level understanding of the types of events that are being emitted by a smart contract or smart contracts of a certain protocol. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/polygon/decoded/logs-decoded) Decoded Contracts  (/data-catalog/evm/polygon/decoded/contracts) Decoded Traces  (/data-catalog/evm/polygon/decoded/traces-decoded) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/polygon/decoded/logs-decoded"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded polygon.contracts Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Overview  (/data-catalog/evm/polygon/overview) Raw Decoded Overview  (/data-catalog/evm/polygon/decoded/overview) Call Tables  (/data-catalog/evm/polygon/decoded/call-tables) Event Logs  (/data-catalog/evm/polygon/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/polygon/decoded/contracts) Decoded Logs  (/data-catalog/evm/polygon/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/polygon/decoded/traces-decoded) Curated Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded polygon.contracts Description of the polygon.contracts table on Dune Table Description This table contains information about the contracts Dune has decoded on the  polygon  blockchain. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/polygon/decoded/contracts) Event Logs  (/data-catalog/evm/polygon/decoded/event-logs) Decoded Logs  (/data-catalog/evm/polygon/decoded/logs-decoded) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/polygon/decoded/contracts"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded Event Logs Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Overview  (/data-catalog/evm/polygon/overview) Raw Decoded Overview  (/data-catalog/evm/polygon/decoded/overview) Call Tables  (/data-catalog/evm/polygon/decoded/call-tables) Event Logs  (/data-catalog/evm/polygon/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/polygon/decoded/contracts) Decoded Logs  (/data-catalog/evm/polygon/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/polygon/decoded/traces-decoded) Curated Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded Event Logs Smart Contracts emit event logs when certain predefined actions are completed. ", "url": "https://docs.dune.com/data-catalog/evm/polygon/decoded/event-logs"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded base.traces_decoded Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Overview  (/data-catalog/evm/base/overview) Raw Decoded Overview  (/data-catalog/evm/base/decoded/overview) Call Tables  (/data-catalog/evm/base/decoded/call-tables) Event Logs  (/data-catalog/evm/base/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/base/decoded/contracts) Decoded Logs  (/data-catalog/evm/base/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/base/decoded/traces-decoded) Curated Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded base.traces_decoded Description of the base.traces_decoded table on Dune Table Description The  traces_decoded  table contains decoded traces from  base  transactions. The table matches  MethodID , which consists of the first 4 bytes of any eth call, to the trace signature and the corresponding Method name. The table does not contain the full trace data and is not suitable for analysis of smart contract level data. For that, use the specific event tables as described in  Call-tables  (/data-catalog/evm/base/decoded/traces-decoded) . This table is great for gaining a high level understanding of the types of events that are being emitted by a smart contract or smart contracts of a certain protocol. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/base/decoded/traces-decoded) Decoded Logs  (/data-catalog/evm/base/decoded/logs-decoded) Dex Trades  (/data-catalog/evm/base/curated-data/dex/dex-trades) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/base/decoded/traces-decoded"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded Call Tables Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Overview  (/data-catalog/evm/kaia/overview) Raw Decoded Overview  (/data-catalog/evm/kaia/decoded/overview) Call Tables  (/data-catalog/evm/kaia/decoded/call-tables) Event Logs  (/data-catalog/evm/kaia/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/kaia/decoded/contracts) Decoded Logs  (/data-catalog/evm/kaia/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/kaia/decoded/traces-decoded) Curated Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded Call Tables On Dune, we parse all message calls and transactions made to smart contracts in their own tables. ", "url": "https://docs.dune.com/data-catalog/evm/kaia/decoded/call-tables"}
{"content": "\u200b Overview \n Smart contracts emit event logs when certain predefined actions are completed. The emitted event logs are stored on the blockchain and are publicly accessible. Event logs are an important tool for smart contract developers to communicate with the outside world, as well as for data analysts to keep track of what happens inside of a smart contract. \n For example, the ERC20 standard defines the  Transfer  event, which is emitted every time a token transfer occurs. The event log contains the sender, the recipient and the amount of tokens transferred. \n event   Transfer ( address   indexed   from ,   address   indexed  to ,   uint256  value ) ; \n \n Decoded event logs always originate from the fields  topic0 ,  topic1 ,  topic2 ,  topic3  and  data  in the  logs  table. \n ", "url": "https://docs.dune.com/data-catalog/evm/polygon/decoded/event-logs#overview"}
{"content": "\u200b Event Logs in Dune \n In Dune, we store all event logs of decoded smart contracts in separate tables. \n The structure published in these logs is predefined by the developer of the smart contract, the content is dynamically created during the transaction. \n Logs are useful for monitoring, alerting and in general keeping track of what happens inside of a smart contract. Logs are your best friend as a data analyst since they reliably present you with data that is intended to be analyzed post factum. If you ever want to see which logs  can  be emitted by a smart contract, you can simply search for the keyword  emit  in the source code of the smart contract. \n We will decode all event logs for smart contracts into tables named accordingly to this schema: \n [projectname_blockchain].[contractName]_evt_[eventName] \n ", "url": "https://docs.dune.com/data-catalog/evm/polygon/decoded/event-logs#event-logs-in-dune"}
{"content": "\u200b Example \n Let\u2019s take the  uniswap v3 factory  (https://etherscan.io/address/0x1f98431c8ad98523631ae4a59f267346ea31f984#code)  as an example and look at the event that gets emitted upon the creation of a new pool. The event is called  PoolCreated  and gets emitted every time somebody successfully deploys a new Uniswap V3 pool by calling the function  createPool . The event will readily give us information like the tokens in the pool, the fee tier of this pool and the tick spacing. In Etherscan, you can easily look at the event logs of transaction by opening the  logs tab  (https://etherscan.io/tx/0xdeb368592f3de0f2840754bce61d2c3f29cdb3407c63c699052e68a854c71eaa#eventlog) . In Dune, this particular event will be stored in the table: \n uniswap_v3_ethereum.Factory_evt_PoolCreated \n \n ", "url": "https://docs.dune.com/data-catalog/evm/polygon/decoded/event-logs#example"}
{"content": "\u200b Multiple Instances \n If there is multiple instances of a contract we will collect all event logs across all instances of this smart contract in one table. For example, all uniswap v3 pool  swap  events (on ethereum) are stored in the table:  uniswap_v3_ethereum.Pair_evt_Swap \n The column  contract_address  indicates as to which smart contract emitted this event. \n \n ", "url": "https://docs.dune.com/data-catalog/evm/polygon/decoded/event-logs#multiple-instances"}
{"content": "\u200b Further Reading \n \n Understanding event logs on the Ethereum blockchain  (https://medium.com/mycrypto/understanding-event-logs-on-the-ethereum-blockchain-f4ae7ba50378) \n Everything You Ever Wanted to Know About Events and Logs on Ethereum  (https://medium.com/linum-labs/everything-you-ever-wanted-to-know-about-events-and-logs-on-ethereum-fec84ea7d0a5) \n \n Submit any contract for decoding  (/web-app/decoding/decoding-contracts) Explore already decoded contracts  (/data-catalog/evm/ethereum/decoded/contracts) Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/polygon/decoded/event-logs) Call Tables  (/data-catalog/evm/polygon/decoded/call-tables) Decoded Contracts  (/data-catalog/evm/polygon/decoded/contracts) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Overview  (#overview) Event Logs in Dune  (#event-logs-in-dune) Example  (#example) Multiple Instances  (#multiple-instances) Further Reading  (#further-reading)", "url": "https://docs.dune.com/data-catalog/evm/polygon/decoded/event-logs#further-reading"}
{"content": "\u200b Overview \n On Dune, we parse all message calls and transactions made to smart contracts in their own tables. This allows us to isolate the logic of a specific smart contract and analyze how it interacts with other smart contracts. \n The data is stored in the format: \n [projectname_blockchain].[contractName]_call_[functionName] \n This allows us to analyze how a specific function is used in a smart contract, and how often it is called, as well as how it interacts with other smart contracts. \n Call tables always originate from the  traces  table, which contains all the transactions and message calls on the Ethereum network. We parse the  data  field of the  traces  table to decode the function call and parameters. \n ", "url": "https://docs.dune.com/data-catalog/evm/kaia/decoded/call-tables#overview"}
{"content": "\u200b Decoding \n When a transaction is sent to a smart contract on the Ethereum network, it contains a  data  field. This  data  field is the encoded function call and parameters. Dune decodes this data and stores it in the corresponding table. \n For example, when a transaction is sent to the  Uniswap v3 factory  (https://etherscan.io/address/0x1f98431c8ad98523631ae4a59f267346ea31f984#code)  contract on the Ethereum network, Dune will decode the  data  field and store it in the table: \n uniswap_v3_ethereum.Factory_call_createPool \n \n ", "url": "https://docs.dune.com/data-catalog/evm/kaia/decoded/call-tables#decoding"}
{"content": "\u200b Multiple Instances \n For a contract where multiple instances exist, we will decode all calls to all instances of this smart contract into one table. If there are transactions calling the  swap  function of any instance of the  Uniswap v3 pair  (https://etherscan.io/address/0x8f8ef111b67c04eb1641f5ff19ee54cda062f163#writeContract)  contract, we will decode this data into the table  uniswap_v3_ethereum.Pair_call_swap . The  pair  contract is a template contract and there are many instances of it, each with its own address. The column  contract_address  will indicate the address of the instance of the pair contract that was called. \n \n ", "url": "https://docs.dune.com/data-catalog/evm/kaia/decoded/call-tables#multiple-instances"}
{"content": "\u200b Common misconceptions \n One thing to keep in mind here is that  web3.js  (https://web3js.readthedocs.io) ,  web3.py  (https://web3py.readthedocs.io/en/stable)  and all other methods of (locally) calling a  pure ,  read , or  constant  function do not broadcast or publish anything on the blockchain and are therefore not recorded in Dune. \n However, if one of these functions is invoked by another smart contract in the context of a transaction, this will be broadcast on the chain and therefore accessible in Dune. \n In short:  State data stored in the memory of a smart contract is not available on Dune! \n A good example of this is the function  decimals  of the  erc20 token contract  (https://etherscan.io/token/0x1f9840a85d5af5bf1d1762f925bdaddc4201f984#readContract)   Uni  which is a  constant  state variable that is able to be accessed through an automatically created \u201c getter function  (https://docs.soliditylang.org/en/v0.7.4/contracts.html#getter-functions) \u201d. Should a smart contract invoke this function in the context of transaction, this message call will be recorded in the Dune table  uniswap.\"UNI_call_decimals\"  (https://dune.com/queries/741354) . \n This is in contrast to anyone calling this function locally using web3.py/web3.js or using the Etherscan frontend to access this state. These local calls are not recorded in Dune. \n ", "url": "https://docs.dune.com/data-catalog/evm/kaia/decoded/call-tables#common-misconceptions"}
{"content": "\u200b Further Reading \n What is the difference between a transaction and a call?  (https://ethereum.stackexchange.com/questions/765/what-is-the-difference-between-a-transaction-and-a-call) Soliditylang.org documentation  (https://docs.soliditylang.org/en/v0.8.13/contracts.html#function-visibility) How Calldata is Encoded  (https://degatchi.com/articles/reading-raw-evm-calldata) \n // \u2026 existing code \u2026 Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/kaia/decoded/call-tables) Overview  (/data-catalog/evm/kaia/decoded/overview) Event Logs  (/data-catalog/evm/kaia/decoded/event-logs) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Overview  (#overview) Decoding  (#decoding) Multiple Instances  (#multiple-instances) Common misconceptions  (#common-misconceptions) Further Reading  (#further-reading)", "url": "https://docs.dune.com/data-catalog/evm/kaia/decoded/call-tables#further-reading"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded polygon.traces_decoded Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Overview  (/data-catalog/evm/polygon/overview) Raw Decoded Overview  (/data-catalog/evm/polygon/decoded/overview) Call Tables  (/data-catalog/evm/polygon/decoded/call-tables) Event Logs  (/data-catalog/evm/polygon/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/polygon/decoded/contracts) Decoded Logs  (/data-catalog/evm/polygon/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/polygon/decoded/traces-decoded) Curated Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded polygon.traces_decoded Description of the polygon.traces_decoded table on Dune Table Description The  traces_decoded  table contains decoded traces from  polygon  transactions. The table matches  MethodID , which consists of the first 4 bytes of any eth call, to the trace signature and the corresponding Method name. The table does not contain the full trace data and is not suitable for analysis of smart contract level data. For that, use the specific event tables as described in  Call-tables  (/data-catalog/evm/polygon/decoded/traces-decoded) . This table is great for gaining a high level understanding of the types of events that are being emitted by a smart contract or smart contracts of a certain protocol. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/polygon/decoded/traces-decoded) Decoded Logs  (/data-catalog/evm/polygon/decoded/logs-decoded) Dex Trades  (/data-catalog/evm/polygon/curated-data/dex/dex-trades) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/polygon/decoded/traces-decoded"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded kaia.traces_decoded Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Overview  (/data-catalog/evm/kaia/overview) Raw Decoded Overview  (/data-catalog/evm/kaia/decoded/overview) Call Tables  (/data-catalog/evm/kaia/decoded/call-tables) Event Logs  (/data-catalog/evm/kaia/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/kaia/decoded/contracts) Decoded Logs  (/data-catalog/evm/kaia/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/kaia/decoded/traces-decoded) Curated Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded kaia.traces_decoded Description of the kaia.traces_decoded table on Dune Table Description The  traces_decoded  table contains decoded traces from  kaia  transactions. The table matches  MethodID , which consists of the first 4 bytes of any eth call, to the trace signature and the corresponding Method name. The table does not contain the full trace data and is not suitable for analysis of smart contract level data. For that, use the specific event tables as described in  Call-tables  (/data-catalog/evm/kaia/decoded/traces-decoded) . This table is great for gaining a high level understanding of the types of events that are being emitted by a smart contract or smart contracts of a certain protocol. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/kaia/decoded/traces-decoded) Decoded Logs  (/data-catalog/evm/kaia/decoded/logs-decoded) Dex Trades  (/data-catalog/evm/kaia/curated-data/dex/dex-trades) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/kaia/decoded/traces-decoded"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation DEX dex_aggregator.trades on corn Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Overview  (/data-catalog/evm/corn/overview) Raw Decoded Curated DEX Dex Trades  (/data-catalog/evm/corn/curated-data/dex/dex-trades) Aggregator Trades  (/data-catalog/evm/corn/curated-data/dex/dex-aggregator-trades) NFT Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot DEX dex_aggregator.trades on corn Description of the Dex Aggregator Trades table for corn  This table is a cross-chain table but can be filtered for  corn  transactions. Table Description The  dex_aggregator.trades  table captures high-level data on trades executed via decentralized exchange (DEX) aggregators. These aggregators aggregate liquidity from multiple DEXs to provide users with the best possible trade execution. Unlike the  dex.trades  table, which records each intermediary step of a trade,  dex_aggregator.trades  condenses the trade data to reflect the user's intended trade, presenting it as a single entry. Functional Overview Users can expect the  dex_aggregator.trades  table to provide a high-level view of DEX trades facilitated by aggregators. This table simplifies trade records by showing a single entry for trades that may involve multiple DEXs and liquidity pools. For instance, a user might initiate a trade to swap USDC for PEPE via a DEX aggregator. The aggregator might route this trade through several liquidity pools such as WETH-USDC and WETH-PEPE, but  dex_aggregator.trades  will record it as a single USDC \u2192 PEPE trade. Complimentary to  dex_aggregator.trades  is the  dex.trades  table, where detailed trade executions are recorded. This table captures the granular steps of each trade, including interactions with different liquidity pools. The volume routed through aggregators is also recorded in the  dex.trades  table. One row in  dex_aggregator.trades  corresponds to one or more rows in  dex.trades , providing a comprehensive view of the detailed execution path that aggregated trades take. Coverage  The following table shows which projects and versions of those projects are covered in the  dex.trades  table on  corn .  Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/corn/curated-data/dex/dex-aggregator-trades) Dex Trades  (/data-catalog/evm/corn/curated-data/dex/dex-trades) NFT Trades  (/data-catalog/evm/corn/curated-data/nft/nft-trades) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/corn/curated-data/dex/dex-aggregator-trades"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded ink.logs_decoded Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink Overview  (/data-catalog/evm/ink/overview) Raw Decoded Overview  (/data-catalog/evm/ink/decoded/overview) Call Tables  (/data-catalog/evm/ink/decoded/call-tables) Event Logs  (/data-catalog/evm/ink/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/ink/decoded/contracts) Decoded Logs  (/data-catalog/evm/ink/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/ink/decoded/traces-decoded) Curated KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Overview  (/data-catalog/evm/ink/overview) Raw Decoded Overview  (/data-catalog/evm/ink/decoded/overview) Call Tables  (/data-catalog/evm/ink/decoded/call-tables) Event Logs  (/data-catalog/evm/ink/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/ink/decoded/contracts) Decoded Logs  (/data-catalog/evm/ink/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/ink/decoded/traces-decoded) Curated Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded ink.logs_decoded Description of the ink.logs_decoded table on Dune Table Description The  logs_decoded  table contains decoded logs from  ink  transactions. The table matches  topic0  to the event signature and the corresponding event name. The table does not contain the full event data and is not suitable for analysis of smart contract level data. For that, use the specific event tables as described in  Event Logs  (/data-catalog/evm/ink/decoded/event-logs) . This table is great for gaining a high level understanding of the types of events that are being emitted by a smart contract or smart contracts of a certain protocol. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/ink/decoded/logs-decoded) Decoded Contracts  (/data-catalog/evm/ink/decoded/contracts) Decoded Traces  (/data-catalog/evm/ink/decoded/traces-decoded) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/ink/decoded/logs-decoded"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw kaia.logs Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Overview  (/data-catalog/evm/kaia/overview) Raw Blocks  (/data-catalog/evm/kaia/raw/blocks) Creation Traces  (/data-catalog/evm/kaia/raw/creation-traces) Logs  (/data-catalog/evm/kaia/raw/logs) Transactions  (/data-catalog/evm/kaia/raw/transactions) Traces  (/data-catalog/evm/kaia/raw/traces) Decoded Curated Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw kaia.logs Description of the kaia.logs table on Dune Table Description The  kaia .logs  table represents the logs generated by the Ethereum Virtual Machine (EVM) when a contract is executed. Logs are a way to store data on the blockchain. Logs originate from events that occur during the execution of a smart contract. A log consists of: topic list: a list of 0 to 3 32-byte data topics.  Topic0  is the hash of the signature of the event (indexed), and the remaining topics are indexed parameters of the event. data: contains non-indexed data. This is the raw version of this table. If the chain is a Fully Managed chain, decoded transaction calls will be available, see  call tables  (/data-catalog/evm/kaia/decoded/call-tables)  section. If this is a Hosted chain, decoded call tables will not be available. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Examples Filter the logs for a specific contract SELECT *\nFROM kaia.logs\nWHERE contract_address = 0x06012c8cf97bead5deae237070f9587f8e7a266d\nLIMIT 10 Filter the logs for a specific topic SELECT *\nFROM kaia.logs\nWHERE topic0 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n Show the logs of a specific block SELECT *\nFROM kaia.logs\nWHERE evt_block_number = 1000000\n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/kaia/raw/logs) Creation Traces  (/data-catalog/evm/kaia/raw/creation-traces) Transactions  (/data-catalog/evm/kaia/raw/transactions) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/kaia/raw/logs"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw optimism.blocks Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Overview  (/data-catalog/evm/optimism/overview) Raw Blocks  (/data-catalog/evm/optimism/raw/blocks) Creation Traces  (/data-catalog/evm/optimism/raw/creation-traces) Logs  (/data-catalog/evm/optimism/raw/logs) Transactions  (/data-catalog/evm/optimism/raw/transactions) Traces  (/data-catalog/evm/optimism/raw/traces) Decoded Curated Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw optimism.blocks Description of the optimism.blocks table on Dune Table description The  optimism .blocks  table contains information about blocks in the  optimism  blockchain. A block is a collection of transactions that are hashed and added to the blockchain. Each block contains a reference to the previous block, known as the parent hash, and a timestamp. The table contains information about each block, such as the block number, the block hash, the block size, the number of transactions, and the gas used. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Examples Show the most recent blocks SELECT\n    number,\n    hash, \n    size,\n    gas_used\n  FROM optimism.blocks\n  ORDER BY number DESC\n  LIMIT 10 Show the number of blocks mined each day SELECT\n    date_trunc('day', time) AS day,\n    count(distinct number)\n  FROM optimism.blocks\n  GROUP BY day\n  ORDER BY day DESC Show the number of transactions in each block SELECT\n    number,\n    count(*)\n  FROM optimism.blocks\n  GROUP BY 1 \n  LIMIT 10 Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/optimism/raw/blocks) Overview  (/data-catalog/evm/optimism/overview) Creation Traces  (/data-catalog/evm/optimism/raw/creation-traces) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/optimism/raw/blocks"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Fantom Fantom Overview Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Overview  (/data-catalog/evm/fantom/overview) Raw Decoded Curated Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Fantom Fantom Overview Fantom data on Dune Fantom is a high-performance, scalable, and secure smart-contract platform that is designed to overcome the limitations of previous generation blockchain platforms. Fantom is unique in its use of a directed acyclic graph (DAG) architecture, which allows for asynchronous confirmation of transactions, resulting in high throughput and minimal transaction costs. \n The network uses a bespoke consensus algorithm called Lachesis, which ensures transactions are confirmed within 1-2 seconds, significantly improving the user experience and efficiency for decentralized applications (dApps) running on the platform. \n High Throughput and Low Cost: \nFantom\u2019s DAG architecture enables unparalleled transaction speed and drastically reduced costs, making it an ideal platform for developers looking to build scalable dApps. \n Developer-Friendly: \nFantom is fully compatible with Ethereum, allowing developers to deploy Ethereum-based applications quickly and seamlessly using existing tools and languages like Solidity. \n Ecosystem Growth: \nFantom supports a growing ecosystem of decentralized finance (DeFi) applications, NFT platforms, and other blockchain projects, fostering innovation and new developments within its network. \n Fantom documentation Access comprehensive documentation for Fantom, detailing its unique technology, features, and developer resources.  (https://docs.fantom.foundation) \n ", "url": "https://docs.dune.com/data-catalog/evm/fantom/overview"}
{"content": "\u200b Data Catalog \n Logs Insights into smart contract interactions through detailed event logs, providing visibility into the dynamic activity on Fantom.  (./raw/logs) Blocks Information on blocks processed on Fantom, reflecting the network\u2019s high throughput and capacity for handling large volumes of transactions.  (./raw/blocks) Transactions Extensive transaction data, highlighting the efficiency and speed of operations across the Fantom network.  (./raw/transactions) decoded Decoded transaction information for enhanced analysis and understanding of smart contract executions.  (./decoded/overview) Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/fantom/overview) NFT Trades  (/data-catalog/evm/ethereum/curated-data/nft/nft-trades) Blocks  (/data-catalog/evm/fantom/raw/blocks) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Data Catalog  (#data-catalog)", "url": "https://docs.dune.com/data-catalog/evm/fantom/overview#data-catalog"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Corn Corn Overview Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Overview  (/data-catalog/evm/corn/overview) Raw Decoded Curated Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Corn Corn Overview Corn data on Dune ", "url": "https://docs.dune.com/data-catalog/evm/corn/overview"}
{"content": "\u200b What is Corn? \n Corn is a next-generation Ethereum Layer 2 network specifically designed to unlock the full potential of Bitcoin. Built on Arbitrum Orbit, it provides a Bitcoin-centric ecosystem that combines scalability, efficiency, and innovative features to enhance the Bitcoin ecosystem. \n ", "url": "https://docs.dune.com/data-catalog/evm/corn/overview#what-is-corn"}
{"content": "\u200b Key Features \n \n Bitcorn (BTCN) : Native gas token of the network \n popCORN System : Provides long-term incentives for ecosystem participants \n LayerZero Integration : Enables seamless cross-chain asset transfers \n Arbitrum Orbit : Leverages Arbitrum\u2019s technology for scalability and efficiency \n Stylus Support : Allows developers to use multiple programming languages for smart contract development \n \n ", "url": "https://docs.dune.com/data-catalog/evm/corn/overview#key-features"}
{"content": "\u200b Why Corn? \n Corn positions itself as the \u201cButter Network\u201d with three main value propositions: \n \n Butter yield \n Butter BTC \n Butter vibes \n \n It\u2019s designed to be the optimal platform for putting Bitcoin to work, creating a rich ecosystem of Bitcoin-focused applications and services. \n ", "url": "https://docs.dune.com/data-catalog/evm/corn/overview#why-corn"}
{"content": "\u200b Technical Architecture \n Built on Arbitrum Orbit, Corn inherits the robust technical foundation of Arbitrum while adding Bitcoin-specific optimizations: \n ", "url": "https://docs.dune.com/data-catalog/evm/corn/overview#technical-architecture"}
{"content": "\u200b Development Features \n \n Multiple Language Support : Through Stylus integration, developers can write smart contracts in various programming languages \n Bitcoin Integration : Native support for Bitcoin-related operations and assets \n Cross-chain Capabilities : LayerZero integration for efficient cross-chain transactions \n \n ", "url": "https://docs.dune.com/data-catalog/evm/corn/overview#development-features"}
{"content": "\u200b Network Economics \n \n Gas Token : Bitcorn (BTCN) \n Incentive Structure : popCORN System for sustainable long-term ecosystem growth \n \n Corn Documentation Official documentation for developers building on Corn - The Butter Network for Bitcoin  (https://docs.usecorn.com) \n ", "url": "https://docs.dune.com/data-catalog/evm/corn/overview#network-economics"}
{"content": "\u200b Data Catalog \n Logs Insights into smart contract interactions through event logs  (./raw/logs) Blocks Information on blocks processed on Corn, reflecting network activity and capacity  (./raw/blocks) Transactions Detailed data on transactions, showcasing efficiency and operational execution  (./raw/transactions) decoded Decoded transaction information for enhanced analysis and understanding of smart contract executions  (./decoded/overview) Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/corn/overview) NFT Trades  (/data-catalog/evm/celo/curated-data/nft/nft-trades) Blocks  (/data-catalog/evm/corn/raw/blocks) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page What is Corn?  (#what-is-corn) Key Features  (#key-features) Why Corn?  (#why-corn) Technical Architecture  (#technical-architecture) Development Features  (#development-features) Network Economics  (#network-economics) Data Catalog  (#data-catalog)", "url": "https://docs.dune.com/data-catalog/evm/corn/overview#data-catalog"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded Overview Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Overview  (/data-catalog/evm/optimism/overview) Raw Decoded Overview  (/data-catalog/evm/optimism/decoded/overview) Call Tables  (/data-catalog/evm/optimism/decoded/call-tables) Event Logs  (/data-catalog/evm/optimism/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/optimism/decoded/contracts) Decoded Logs  (/data-catalog/evm/optimism/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/optimism/decoded/traces-decoded) Curated Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded Overview Simplifying smart contract analysis through human-readable tables. Overview of Dune's Decoded Data Approach Dune uses the ABI (Application Binary Interface) of smart contracts to decode blockchain transactions into structured tables. Each event log and function call from the ABI are parsed into their own tables. This decoding process transforms the raw, encoded data on the blockchain into human-readable tables, simplifying the analysis of smart contract data. Dune's decoded data approach offers several benefits: Enhanced Readability:  The decoded data tables provide a clear and intuitive representation of smart contract activities. Efficient Analysis:  The structured tables enable efficient querying and analysis of smart contract data. Handling Multiple Contract Instances:  For smart contracts with multiple instances, Dune aggregates the data from these instances into a single table, simplifying the analysis process. Collaborative Mapping:  Dune's smart contract library is continuously expanded through the active participation of the Dune community, ensuring that the decoding coverage remains comprehensive and current. Explore decoded logs  (/data-catalog/evm/optimism/decoded/event-logs) Explore decoded traces  (/data-catalog/evm/optimism/decoded/call-tables) Which contracts have decoded data? Contract submission on Dune are driven by the community. Usually, the odds are good that the contract you are looking at is already decoded, but especially for new projects or new contracts, it might be that the contract is not decoded yet. In those cases, you can submit the contract to be decoded. Decoding usually takes about 24 hours, in special cases it might take longer. You can check if contracts are already decoded by querying the  [blockchain].contracts  tables, the  data explorer  (/web-app/query-editor/data-explorer) , or use  this dashboard  (https://dune.com/dune/is-my-contract-decoded-yet-v2) . If you want to submit several contracts at the same time, there is also the possibility of submitting a batch of contracts. To do so, please use  this CSV  (https://gist.github.com/antonio-mendes/c6a43c22862581674c11462cae230e23)  as a template and fill it in with the appropriate information for the contracts you want to decode. Afterwards, send the CSV to decoding@dune.com. Submit any contract for decoding  (/web-app/decoding-contracts) Explore already decoded contracts  (/data-catalog/evm/optimism/decoded/contracts) How does decoding work? Smart Contracts on any EVM blockchain are mostly written in high-level languages like  Solidity  (https://docs.soliditylang.org/en/v0.8.2)  or  Vyper  (https://vyper.readthedocs.io/en/stable) . In order for them to be deployed to an EVM execution environment, they need to be compiled to EVM executable bytecode. Once deployed, the bytecode gets associated with an address on the respective chain and is permanently stored in the chain's state storage. To be able to interact with this smart contract, which is now just bytecode, we need a guide to call the functions defined in the high-level languages. This translation of names and arguments into byte representation is done using an  Application Binary Interface (ABI) . The ABI documents names, types, and arguments precisely, which allows us to interact with the smart contract using a somewhat human-readable format. The ABI can be compiled using the high-level language source code. The ABI is used to call a smart contract or interpret the data it emits. Decoding Example We are going to look at an event log of an ERC20 transfer event from the  smart contract  (https://etherscan.io/token/0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5#readContract)  that represents the $PICKLE token. On  Etherscan  (https://etherscan.io/tx/0x2bb7c8283b782355875fa37d05e4bd962519ea294678a3dcf2fdffbbd0761bc5#eventlog) , the undecoded event looks like this: If we query for this transaction in the `ethereum.logs` table in the Dune database, we will receive the same encoded bytecode as our result dataset. SELECT *\nFROM ethereum.logs\nWHERE tx_hash = 0x2bb7c8283b782355875fa37d05e4bd962519ea294678a3dcf2fdffbbd0761bc5\n We could make short work of this encoded bytecode by using  DuneSQL Varbinary functions  (/query-engine/Functions-and-operators/varbinary)  to decode it, but having the contract's ABI at hand makes this process much easier.  This contract is decoded in Dune, so we can use the  pickle_finance_ethereum.PickleToken_evt_Transfer  table to access the decoded event log. SELECT *\nFROM pickle_finance_ethereum.PickleToken_evt_Transfer\nWHERE evt_tx_hash = 0x2bb7c8283b782355875fa37d05e4bd962519ea294678a3dcf2fdffbbd0761bc5 Now this is actually useful for analyzing this transaction!  This data is much more readable and understandable than the encoded bytecode. We can see the sender, receiver, and the amount of tokens transferred in this event log. How do I understand decoded data? Decoded data is the high level programming language representation of two pieces of software talking to each other via the blockchain. It's not always easy for a human to understand what exactly is going on in these interactions, but most of the time, looking at column names and the data that is transmitted within them should help you to understand what is happening within that specific log or call. If you are not able to make sense of the data by just searching the tables, it usually helps to look at single transactions using the transaction hash and  Etherscan  (https://etherscan.io) . Furthermore, going into the code of the smart contract (our favorite way to do this is  DethCode  (https://etherscan.deth.net) ) to read the comments or the actual logic can help to understand the smart contract's emitted data. If that also doesn't lead to satisfactory results, scouring the relevant docs and GitHub of the project can lead you to the desired answers. Furthermore, talking to the developers and core community of a project can also help you to get an understanding of the smart contracts. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/optimism/decoded/overview) Traces  (/data-catalog/evm/optimism/raw/traces) Call Tables  (/data-catalog/evm/optimism/decoded/call-tables) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/optimism/decoded/overview"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw optimism.transactions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Overview  (/data-catalog/evm/optimism/overview) Raw Blocks  (/data-catalog/evm/optimism/raw/blocks) Creation Traces  (/data-catalog/evm/optimism/raw/creation-traces) Logs  (/data-catalog/evm/optimism/raw/logs) Transactions  (/data-catalog/evm/optimism/raw/transactions) Traces  (/data-catalog/evm/optimism/raw/traces) Decoded Curated Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw optimism.transactions Description of the optimism.transactions table on Dune Table Description The  optimism .transactions  table contains information about all transactions on the  optimism  blockchain. Each row represents a single transaction and includes information such as block number, hash, timestamp, sender, recipient, value, gas, gas price, and more. Transactions are the fundamental unit of interaction with the  optimism  blockchain. Transactions are created by users and are used to send value, deploy smart contracts, and interact with smart contracts. This is the raw version of this table. If the chain is a Fully Managed chain, decoded transaction calls will be available, see  call tables  (/data-catalog/evm/optimism/decoded/call-tables)  section. If this is a Hosted chain, decoded call tables will not be available. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Examples Show all transactions sent by a specific address SELECT * \nFROM optimism.transactions WHERE \"from\" = '0x50A1b5c358F8D34F0d35aA2f10742c46054E247e'\n Count the number of transactions per block SELECT \n    block_number, \n    COUNT(*)\nFROM optimism.transactions\nGROUP BY 1\nORDER BY 1 DESC\nLIMIT 10\n Show the top 10 transactions with the highest gas price SELECT \n    hash, \n    gas_price\nFROM optimism.transactions\nORDER BY gas_price DESC\nLIMIT 10\n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/optimism/raw/transactions) Logs  (/data-catalog/evm/optimism/raw/logs) Traces  (/data-catalog/evm/optimism/raw/traces) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/optimism/raw/transactions"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded Event Logs Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Overview  (/data-catalog/evm/kaia/overview) Raw Decoded Overview  (/data-catalog/evm/kaia/decoded/overview) Call Tables  (/data-catalog/evm/kaia/decoded/call-tables) Event Logs  (/data-catalog/evm/kaia/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/kaia/decoded/contracts) Decoded Logs  (/data-catalog/evm/kaia/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/kaia/decoded/traces-decoded) Curated Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded Event Logs Smart Contracts emit event logs when certain predefined actions are completed. ", "url": "https://docs.dune.com/data-catalog/evm/kaia/decoded/event-logs"}
{"content": "\u200b Overview \n Smart contracts emit event logs when certain predefined actions are completed. The emitted event logs are stored on the blockchain and are publicly accessible. Event logs are an important tool for smart contract developers to communicate with the outside world, as well as for data analysts to keep track of what happens inside of a smart contract. \n For example, the ERC20 standard defines the  Transfer  event, which is emitted every time a token transfer occurs. The event log contains the sender, the recipient and the amount of tokens transferred. \n event   Transfer ( address   indexed   from ,   address   indexed  to ,   uint256  value ) ; \n \n Decoded event logs always originate from the fields  topic0 ,  topic1 ,  topic2 ,  topic3  and  data  in the  logs  table. \n ", "url": "https://docs.dune.com/data-catalog/evm/kaia/decoded/event-logs#overview"}
{"content": "\u200b Event Logs in Dune \n In Dune, we store all event logs of decoded smart contracts in separate tables. \n The structure published in these logs is predefined by the developer of the smart contract, the content is dynamically created during the transaction. \n Logs are useful for monitoring, alerting and in general keeping track of what happens inside of a smart contract. Logs are your best friend as a data analyst since they reliably present you with data that is intended to be analyzed post factum. If you ever want to see which logs  can  be emitted by a smart contract, you can simply search for the keyword  emit  in the source code of the smart contract. \n We will decode all event logs for smart contracts into tables named accordingly to this schema: \n [projectname_blockchain].[contractName]_evt_[eventName] \n ", "url": "https://docs.dune.com/data-catalog/evm/kaia/decoded/event-logs#event-logs-in-dune"}
{"content": "\u200b Example \n Let\u2019s take the  uniswap v3 factory  (https://etherscan.io/address/0x1f98431c8ad98523631ae4a59f267346ea31f984#code)  as an example and look at the event that gets emitted upon the creation of a new pool. The event is called  PoolCreated  and gets emitted every time somebody successfully deploys a new Uniswap V3 pool by calling the function  createPool . The event will readily give us information like the tokens in the pool, the fee tier of this pool and the tick spacing. In Etherscan, you can easily look at the event logs of transaction by opening the  logs tab  (https://etherscan.io/tx/0xdeb368592f3de0f2840754bce61d2c3f29cdb3407c63c699052e68a854c71eaa#eventlog) . In Dune, this particular event will be stored in the table: \n uniswap_v3_ethereum.Factory_evt_PoolCreated \n \n ", "url": "https://docs.dune.com/data-catalog/evm/kaia/decoded/event-logs#example"}
{"content": "\u200b Multiple Instances \n If there is multiple instances of a contract we will collect all event logs across all instances of this smart contract in one table. For example, all uniswap v3 pool  swap  events (on ethereum) are stored in the table:  uniswap_v3_ethereum.Pair_evt_Swap \n The column  contract_address  indicates as to which smart contract emitted this event. \n \n ", "url": "https://docs.dune.com/data-catalog/evm/kaia/decoded/event-logs#multiple-instances"}
{"content": "\u200b Further Reading \n \n Understanding event logs on the Ethereum blockchain  (https://medium.com/mycrypto/understanding-event-logs-on-the-ethereum-blockchain-f4ae7ba50378) \n Everything You Ever Wanted to Know About Events and Logs on Ethereum  (https://medium.com/linum-labs/everything-you-ever-wanted-to-know-about-events-and-logs-on-ethereum-fec84ea7d0a5) \n \n Submit any contract for decoding  (/web-app/decoding/decoding-contracts) Explore already decoded contracts  (/data-catalog/evm/ethereum/decoded/contracts) Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/kaia/decoded/event-logs) Call Tables  (/data-catalog/evm/kaia/decoded/call-tables) Decoded Contracts  (/data-catalog/evm/kaia/decoded/contracts) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Overview  (#overview) Event Logs in Dune  (#event-logs-in-dune) Example  (#example) Multiple Instances  (#multiple-instances) Further Reading  (#further-reading)", "url": "https://docs.dune.com/data-catalog/evm/kaia/decoded/event-logs#further-reading"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw kaia.creation_traces Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Overview  (/data-catalog/evm/kaia/overview) Raw Blocks  (/data-catalog/evm/kaia/raw/blocks) Creation Traces  (/data-catalog/evm/kaia/raw/creation-traces) Logs  (/data-catalog/evm/kaia/raw/logs) Transactions  (/data-catalog/evm/kaia/raw/transactions) Traces  (/data-catalog/evm/kaia/raw/traces) Decoded Curated Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw kaia.creation_traces Description of the kaia.creation_traces table on Dune Table Description The  kaia .creation_traces  table contains information about the creation of smart contracts on the  kaia  blockchain. This includes the address of the contract, the address of the creator, the block number at which the contract was created, the transaction hash, and the contract's bytecode. This table is useful for understanding the deployment of smart contracts on the  kaia  blockchain. This table is a subset of the  traces  table, which contains information about all traces on the  kaia  blockchain. The  creation_traces  table is filtered to only include traces that create new smart contracts. The filter for this is  type = 'create'  . Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Examples Show the creation of a specific smart contract SELECT * FROM kaia.creation_traces\nWHERE contract_address = 0x06012c8cf97bead5deae237070f9587f8e7a266d Show the creation of smart contracts by a specific creator SELECT * FROM kaia.creation_traces\nWHERE \"from\" = 0x0d4a11d5eeaac28ec3f61d100da81f6a1b65c9d6 Show the creation of smart contracts in the last 10 days SELECT \n    date_trunc('day', block_time) AS day,\n    COUNT(*)\nFROM kaia.creation_traces\nGROUP BY 1\nORDER BY 1 DESC\nLIMIT 10 Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/kaia/raw/creation-traces) Blocks  (/data-catalog/evm/kaia/raw/blocks) Logs  (/data-catalog/evm/kaia/raw/logs) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/kaia/raw/creation-traces"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation DEX dex.trades on base Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Overview  (/data-catalog/evm/base/overview) Raw Decoded Curated DEX Dex Trades  (/data-catalog/evm/base/curated-data/dex/dex-trades) Aggregator Trades  (/data-catalog/evm/base/curated-data/dex/dex-aggregator-trades) NFT Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot DEX dex.trades on base The  dex.trades  table captures detailed data on decentralized exchange (DEX) trades, recording all raw trade events across various protocols on base.  This is a cross-chain table but can be filtered for  base  transactions. Table Description The  dex.trades  table captures detailed data on trades executed via decentralized exchanges (DEXs). This table captures all raw trade events that happen across all liqudity pools. It provides a comprehensive view of the entire trade execution process, detailing the specific paths and liquidity sources utilized. Functional Overview The  dex.trades  table provides an in-depth view of trades on decentralized exchanges like Uniswap or Curve. This table includes entries for each segment of a trade that passes through different liquidity pools, as well as single-step trades. For example, a user may initiate a trade to swap USDC for PEPE. If this trade is executed through multiple liquidity pools, such as USDC-WETH and WETH-PEPE, the  dex.trades  table will record each segment of the trade as a separate entry. Conversely, a single-step trade, such as directly swapping USDC for ETH, will be recorded as a single entry. This detailed approach allows for granular analysis of trade execution paths, enabling users to: Analyze Liquidity Sources:  Understand which liquidity pools are used and how they interact in both single-step and multi-step trades. Track Trade Execution Paths:  Follow the exact route a trade takes across different DEXs and liquidity pools Assess Slippage and Execution Quality:  Evaluate the impact of each step on the overall trade execution, including slippage and price changes. Monitor Market Dynamics:  Gain insights into the behavior and dynamics of different liquidity pools and DEXs over time. Table Coverage  The following table shows which projects and versions of those projects are covered in the  dex.trades  table on  base .  Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/base/curated-data/dex/dex-trades) Decoded Traces  (/data-catalog/evm/base/decoded/traces-decoded) Aggregator Trades  (/data-catalog/evm/base/curated-data/dex/dex-aggregator-trades) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/base/curated-data/dex/dex-trades"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw kaia.traces Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Overview  (/data-catalog/evm/kaia/overview) Raw Blocks  (/data-catalog/evm/kaia/raw/blocks) Creation Traces  (/data-catalog/evm/kaia/raw/creation-traces) Logs  (/data-catalog/evm/kaia/raw/logs) Transactions  (/data-catalog/evm/kaia/raw/transactions) Traces  (/data-catalog/evm/kaia/raw/traces) Decoded Curated Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw kaia.traces Description of the kaia.traces table on Dune Table Description The  kaia .traces  table contains the traces of the transactions executed on the Ethereum Virtual Machine (EVM). It includes the traces of the transaction and the traces of the internal transactions. Traces are the result of the execution of the transaction and are used to debug and understand the execution of the transaction. They are also known as `internal transactions` and can be used to understand the execution of a transaction. This is the raw version of this table. If the chain is a Fully Managed chain, decoded transaction calls will be available, see  call tables  (/data-catalog/evm/kaia/decoded/call-tables)  section. If this is a Hosted chain, decoded call tables will not be available. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Example Querying traces for a specific transaction hash SELECT *\nFROM kaia.traces\nWHERE tx_hash = 0xb30d6d67cf7d148c2257bf598c5f5cdf5912a3d05c7d3b000398d675d2fa912c\n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/kaia/raw/traces) Transactions  (/data-catalog/evm/kaia/raw/transactions) Overview  (/data-catalog/evm/kaia/decoded/overview) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/kaia/raw/traces"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw mode.traces Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Overview  (/data-catalog/evm/mode/overview) Raw Blocks  (/data-catalog/evm/mode/raw/blocks) Logs  (/data-catalog/evm/mode/raw/logs) Transactions  (/data-catalog/evm/mode/raw/transactions) Traces  (/data-catalog/evm/mode/raw/traces) Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw mode.traces Description of the mode.traces table on Dune  The data for the  mode  tables is hosted on Dune by the  mode  team in the context of Hosted blockchain integrations - a legacy integration route which only includes raw EVM data. We are working to migrate it over to the  standard EVM integration  (/catalyst/overview#1-evm-chains) .  \n Table Description The  mode .traces  table contains the traces of the transactions executed on the Ethereum Virtual Machine (EVM). It includes the traces of the transaction and the traces of the internal transactions. Traces are the result of the execution of the transaction and are used to debug and understand the execution of the transaction. They are also known as `internal transactions` and can be used to understand the execution of a transaction. This is the raw version of this table. If the chain is a Fully Managed chain, decoded transaction calls will be available, see  call tables  (/data-catalog/evm/mode/decoded/call-tables)  section. If this is a Hosted chain, decoded call tables will not be available. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Example Querying traces for a specific transaction hash SELECT *\nFROM mode.traces\nWHERE tx_hash = 0xb30d6d67cf7d148c2257bf598c5f5cdf5912a3d05c7d3b000398d675d2fa912c\n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/mode/raw/traces) Transactions  (/data-catalog/evm/mode/raw/transactions) Overview  (/data-catalog/evm/optimism/overview) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/mode/raw/traces"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded kaia.logs_decoded Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Overview  (/data-catalog/evm/kaia/overview) Raw Decoded Overview  (/data-catalog/evm/kaia/decoded/overview) Call Tables  (/data-catalog/evm/kaia/decoded/call-tables) Event Logs  (/data-catalog/evm/kaia/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/kaia/decoded/contracts) Decoded Logs  (/data-catalog/evm/kaia/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/kaia/decoded/traces-decoded) Curated Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded kaia.logs_decoded Description of the kaia.logs_decoded table on Dune Table Description The  logs_decoded  table contains decoded logs from  kaia  transactions. The table matches  topic0  to the event signature and the corresponding event name. The table does not contain the full event data and is not suitable for analysis of smart contract level data. For that, use the specific event tables as described in  Event Logs  (/data-catalog/evm/kaia/decoded/event-logs) . This table is great for gaining a high level understanding of the types of events that are being emitted by a smart contract or smart contracts of a certain protocol. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/kaia/decoded/logs-decoded) Decoded Contracts  (/data-catalog/evm/kaia/decoded/contracts) Decoded Traces  (/data-catalog/evm/kaia/decoded/traces-decoded) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/kaia/decoded/logs-decoded"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation DEX dex.trades on kaia Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Overview  (/data-catalog/evm/kaia/overview) Raw Decoded Curated DEX Dex Trades  (/data-catalog/evm/kaia/curated-data/dex/dex-trades) NFT Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot DEX dex.trades on kaia The  dex.trades  table captures detailed data on decentralized exchange (DEX) trades, recording all raw trade events across various protocols on kaia.  This is a cross-chain table but can be filtered for  kaia  transactions. Table Description The  dex.trades  table captures detailed data on trades executed via decentralized exchanges (DEXs). This table captures all raw trade events that happen across all liqudity pools. It provides a comprehensive view of the entire trade execution process, detailing the specific paths and liquidity sources utilized. Functional Overview The  dex.trades  table provides an in-depth view of trades on decentralized exchanges like Uniswap or Curve. This table includes entries for each segment of a trade that passes through different liquidity pools, as well as single-step trades. For example, a user may initiate a trade to swap USDC for PEPE. If this trade is executed through multiple liquidity pools, such as USDC-WETH and WETH-PEPE, the  dex.trades  table will record each segment of the trade as a separate entry. Conversely, a single-step trade, such as directly swapping USDC for ETH, will be recorded as a single entry. This detailed approach allows for granular analysis of trade execution paths, enabling users to: Analyze Liquidity Sources:  Understand which liquidity pools are used and how they interact in both single-step and multi-step trades. Track Trade Execution Paths:  Follow the exact route a trade takes across different DEXs and liquidity pools Assess Slippage and Execution Quality:  Evaluate the impact of each step on the overall trade execution, including slippage and price changes. Monitor Market Dynamics:  Gain insights into the behavior and dynamics of different liquidity pools and DEXs over time. Table Coverage  The following table shows which projects and versions of those projects are covered in the  dex.trades  table on  kaia .  Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/kaia/curated-data/dex/dex-trades) Decoded Traces  (/data-catalog/evm/kaia/decoded/traces-decoded) NFT Trades  (/data-catalog/evm/kaia/curated-data/nft/nft-trades) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/kaia/curated-data/dex/dex-trades"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded Overview Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Overview  (/data-catalog/evm/fantom/overview) Raw Decoded Overview  (/data-catalog/evm/fantom/decoded/overview) Call Tables  (/data-catalog/evm/fantom/decoded/call-tables) Event Logs  (/data-catalog/evm/fantom/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/fantom/decoded/contracts) Decoded Logs  (/data-catalog/evm/fantom/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/fantom/decoded/traces-decoded) Curated Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded Overview Simplifying smart contract analysis through human-readable tables. Overview of Dune's Decoded Data Approach Dune uses the ABI (Application Binary Interface) of smart contracts to decode blockchain transactions into structured tables. Each event log and function call from the ABI are parsed into their own tables. This decoding process transforms the raw, encoded data on the blockchain into human-readable tables, simplifying the analysis of smart contract data. Dune's decoded data approach offers several benefits: Enhanced Readability:  The decoded data tables provide a clear and intuitive representation of smart contract activities. Efficient Analysis:  The structured tables enable efficient querying and analysis of smart contract data. Handling Multiple Contract Instances:  For smart contracts with multiple instances, Dune aggregates the data from these instances into a single table, simplifying the analysis process. Collaborative Mapping:  Dune's smart contract library is continuously expanded through the active participation of the Dune community, ensuring that the decoding coverage remains comprehensive and current. Explore decoded logs  (/data-catalog/evm/fantom/decoded/event-logs) Explore decoded traces  (/data-catalog/evm/fantom/decoded/call-tables) Which contracts have decoded data? Contract submission on Dune are driven by the community. Usually, the odds are good that the contract you are looking at is already decoded, but especially for new projects or new contracts, it might be that the contract is not decoded yet. In those cases, you can submit the contract to be decoded. Decoding usually takes about 24 hours, in special cases it might take longer. You can check if contracts are already decoded by querying the  [blockchain].contracts  tables, the  data explorer  (/web-app/query-editor/data-explorer) , or use  this dashboard  (https://dune.com/dune/is-my-contract-decoded-yet-v2) . If you want to submit several contracts at the same time, there is also the possibility of submitting a batch of contracts. To do so, please use  this CSV  (https://gist.github.com/antonio-mendes/c6a43c22862581674c11462cae230e23)  as a template and fill it in with the appropriate information for the contracts you want to decode. Afterwards, send the CSV to decoding@dune.com. Submit any contract for decoding  (/web-app/decoding-contracts) Explore already decoded contracts  (/data-catalog/evm/fantom/decoded/contracts) How does decoding work? Smart Contracts on any EVM blockchain are mostly written in high-level languages like  Solidity  (https://docs.soliditylang.org/en/v0.8.2)  or  Vyper  (https://vyper.readthedocs.io/en/stable) . In order for them to be deployed to an EVM execution environment, they need to be compiled to EVM executable bytecode. Once deployed, the bytecode gets associated with an address on the respective chain and is permanently stored in the chain's state storage. To be able to interact with this smart contract, which is now just bytecode, we need a guide to call the functions defined in the high-level languages. This translation of names and arguments into byte representation is done using an  Application Binary Interface (ABI) . The ABI documents names, types, and arguments precisely, which allows us to interact with the smart contract using a somewhat human-readable format. The ABI can be compiled using the high-level language source code. The ABI is used to call a smart contract or interpret the data it emits. Decoding Example We are going to look at an event log of an ERC20 transfer event from the  smart contract  (https://etherscan.io/token/0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5#readContract)  that represents the $PICKLE token. On  Etherscan  (https://etherscan.io/tx/0x2bb7c8283b782355875fa37d05e4bd962519ea294678a3dcf2fdffbbd0761bc5#eventlog) , the undecoded event looks like this: If we query for this transaction in the `ethereum.logs` table in the Dune database, we will receive the same encoded bytecode as our result dataset. SELECT *\nFROM ethereum.logs\nWHERE tx_hash = 0x2bb7c8283b782355875fa37d05e4bd962519ea294678a3dcf2fdffbbd0761bc5\n We could make short work of this encoded bytecode by using  DuneSQL Varbinary functions  (/query-engine/Functions-and-operators/varbinary)  to decode it, but having the contract's ABI at hand makes this process much easier.  This contract is decoded in Dune, so we can use the  pickle_finance_ethereum.PickleToken_evt_Transfer  table to access the decoded event log. SELECT *\nFROM pickle_finance_ethereum.PickleToken_evt_Transfer\nWHERE evt_tx_hash = 0x2bb7c8283b782355875fa37d05e4bd962519ea294678a3dcf2fdffbbd0761bc5 Now this is actually useful for analyzing this transaction!  This data is much more readable and understandable than the encoded bytecode. We can see the sender, receiver, and the amount of tokens transferred in this event log. How do I understand decoded data? Decoded data is the high level programming language representation of two pieces of software talking to each other via the blockchain. It's not always easy for a human to understand what exactly is going on in these interactions, but most of the time, looking at column names and the data that is transmitted within them should help you to understand what is happening within that specific log or call. If you are not able to make sense of the data by just searching the tables, it usually helps to look at single transactions using the transaction hash and  Etherscan  (https://etherscan.io) . Furthermore, going into the code of the smart contract (our favorite way to do this is  DethCode  (https://etherscan.deth.net) ) to read the comments or the actual logic can help to understand the smart contract's emitted data. If that also doesn't lead to satisfactory results, scouring the relevant docs and GitHub of the project can lead you to the desired answers. Furthermore, talking to the developers and core community of a project can also help you to get an understanding of the smart contracts. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/fantom/decoded/overview) Traces  (/data-catalog/evm/fantom/raw/traces) Call Tables  (/data-catalog/evm/fantom/decoded/call-tables) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/fantom/decoded/overview"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw optimism.creation_traces Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Overview  (/data-catalog/evm/optimism/overview) Raw Blocks  (/data-catalog/evm/optimism/raw/blocks) Creation Traces  (/data-catalog/evm/optimism/raw/creation-traces) Logs  (/data-catalog/evm/optimism/raw/logs) Transactions  (/data-catalog/evm/optimism/raw/transactions) Traces  (/data-catalog/evm/optimism/raw/traces) Decoded Curated Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw optimism.creation_traces Description of the optimism.creation_traces table on Dune Table Description The  optimism .creation_traces  table contains information about the creation of smart contracts on the  optimism  blockchain. This includes the address of the contract, the address of the creator, the block number at which the contract was created, the transaction hash, and the contract's bytecode. This table is useful for understanding the deployment of smart contracts on the  optimism  blockchain. This table is a subset of the  traces  table, which contains information about all traces on the  optimism  blockchain. The  creation_traces  table is filtered to only include traces that create new smart contracts. The filter for this is  type = 'create'  . Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Examples Show the creation of a specific smart contract SELECT * FROM optimism.creation_traces\nWHERE contract_address = 0x06012c8cf97bead5deae237070f9587f8e7a266d Show the creation of smart contracts by a specific creator SELECT * FROM optimism.creation_traces\nWHERE \"from\" = 0x0d4a11d5eeaac28ec3f61d100da81f6a1b65c9d6 Show the creation of smart contracts in the last 10 days SELECT \n    date_trunc('day', block_time) AS day,\n    COUNT(*)\nFROM optimism.creation_traces\nGROUP BY 1\nORDER BY 1 DESC\nLIMIT 10 Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/optimism/raw/creation-traces) Blocks  (/data-catalog/evm/optimism/raw/blocks) Logs  (/data-catalog/evm/optimism/raw/logs) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/optimism/raw/creation-traces"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded kaia.contracts Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Overview  (/data-catalog/evm/kaia/overview) Raw Decoded Overview  (/data-catalog/evm/kaia/decoded/overview) Call Tables  (/data-catalog/evm/kaia/decoded/call-tables) Event Logs  (/data-catalog/evm/kaia/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/kaia/decoded/contracts) Decoded Logs  (/data-catalog/evm/kaia/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/kaia/decoded/traces-decoded) Curated Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded kaia.contracts Description of the kaia.contracts table on Dune Table Description This table contains information about the contracts Dune has decoded on the  kaia  blockchain. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/kaia/decoded/contracts) Event Logs  (/data-catalog/evm/kaia/decoded/event-logs) Decoded Logs  (/data-catalog/evm/kaia/decoded/logs-decoded) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/kaia/decoded/contracts"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw optimism.traces Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Overview  (/data-catalog/evm/optimism/overview) Raw Blocks  (/data-catalog/evm/optimism/raw/blocks) Creation Traces  (/data-catalog/evm/optimism/raw/creation-traces) Logs  (/data-catalog/evm/optimism/raw/logs) Transactions  (/data-catalog/evm/optimism/raw/transactions) Traces  (/data-catalog/evm/optimism/raw/traces) Decoded Curated Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw optimism.traces Description of the optimism.traces table on Dune Table Description The  optimism .traces  table contains the traces of the transactions executed on the Ethereum Virtual Machine (EVM). It includes the traces of the transaction and the traces of the internal transactions. Traces are the result of the execution of the transaction and are used to debug and understand the execution of the transaction. They are also known as `internal transactions` and can be used to understand the execution of a transaction. This is the raw version of this table. If the chain is a Fully Managed chain, decoded transaction calls will be available, see  call tables  (/data-catalog/evm/optimism/decoded/call-tables)  section. If this is a Hosted chain, decoded call tables will not be available. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Example Querying traces for a specific transaction hash SELECT *\nFROM optimism.traces\nWHERE tx_hash = 0xb30d6d67cf7d148c2257bf598c5f5cdf5912a3d05c7d3b000398d675d2fa912c\n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/optimism/raw/traces) Transactions  (/data-catalog/evm/optimism/raw/transactions) Overview  (/data-catalog/evm/optimism/decoded/overview) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/optimism/raw/traces"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw optimism.logs Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Overview  (/data-catalog/evm/optimism/overview) Raw Blocks  (/data-catalog/evm/optimism/raw/blocks) Creation Traces  (/data-catalog/evm/optimism/raw/creation-traces) Logs  (/data-catalog/evm/optimism/raw/logs) Transactions  (/data-catalog/evm/optimism/raw/transactions) Traces  (/data-catalog/evm/optimism/raw/traces) Decoded Curated Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw optimism.logs Description of the optimism.logs table on Dune Table Description The  optimism .logs  table represents the logs generated by the Ethereum Virtual Machine (EVM) when a contract is executed. Logs are a way to store data on the blockchain. Logs originate from events that occur during the execution of a smart contract. A log consists of: topic list: a list of 0 to 3 32-byte data topics.  Topic0  is the hash of the signature of the event (indexed), and the remaining topics are indexed parameters of the event. data: contains non-indexed data. This is the raw version of this table. If the chain is a Fully Managed chain, decoded transaction calls will be available, see  call tables  (/data-catalog/evm/optimism/decoded/call-tables)  section. If this is a Hosted chain, decoded call tables will not be available. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Examples Filter the logs for a specific contract SELECT *\nFROM optimism.logs\nWHERE contract_address = 0x06012c8cf97bead5deae237070f9587f8e7a266d\nLIMIT 10 Filter the logs for a specific topic SELECT *\nFROM optimism.logs\nWHERE topic0 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n Show the logs of a specific block SELECT *\nFROM optimism.logs\nWHERE evt_block_number = 1000000\n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/optimism/raw/logs) Creation Traces  (/data-catalog/evm/optimism/raw/creation-traces) Transactions  (/data-catalog/evm/optimism/raw/transactions) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/optimism/raw/logs"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded ink.traces_decoded Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink Overview  (/data-catalog/evm/ink/overview) Raw Decoded Overview  (/data-catalog/evm/ink/decoded/overview) Call Tables  (/data-catalog/evm/ink/decoded/call-tables) Event Logs  (/data-catalog/evm/ink/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/ink/decoded/contracts) Decoded Logs  (/data-catalog/evm/ink/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/ink/decoded/traces-decoded) Curated KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Overview  (/data-catalog/evm/ink/overview) Raw Decoded Overview  (/data-catalog/evm/ink/decoded/overview) Call Tables  (/data-catalog/evm/ink/decoded/call-tables) Event Logs  (/data-catalog/evm/ink/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/ink/decoded/contracts) Decoded Logs  (/data-catalog/evm/ink/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/ink/decoded/traces-decoded) Curated Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded ink.traces_decoded Description of the ink.traces_decoded table on Dune Table Description The  traces_decoded  table contains decoded traces from  ink  transactions. The table matches  MethodID , which consists of the first 4 bytes of any eth call, to the trace signature and the corresponding Method name. The table does not contain the full trace data and is not suitable for analysis of smart contract level data. For that, use the specific event tables as described in  Call-tables  (/data-catalog/evm/ink/decoded/traces-decoded) . This table is great for gaining a high level understanding of the types of events that are being emitted by a smart contract or smart contracts of a certain protocol. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/ink/decoded/traces-decoded) Decoded Logs  (/data-catalog/evm/ink/decoded/logs-decoded) Dex Trades  (/data-catalog/evm/ink/curated-data/dex/dex-trades) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/ink/decoded/traces-decoded"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded Event Logs Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Overview  (/data-catalog/evm/optimism/overview) Raw Decoded Overview  (/data-catalog/evm/optimism/decoded/overview) Call Tables  (/data-catalog/evm/optimism/decoded/call-tables) Event Logs  (/data-catalog/evm/optimism/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/optimism/decoded/contracts) Decoded Logs  (/data-catalog/evm/optimism/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/optimism/decoded/traces-decoded) Curated Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded Event Logs Smart Contracts emit event logs when certain predefined actions are completed. ", "url": "https://docs.dune.com/data-catalog/evm/optimism/decoded/event-logs"}
{"content": "\u200b Overview \n Smart contracts emit event logs when certain predefined actions are completed. The emitted event logs are stored on the blockchain and are publicly accessible. Event logs are an important tool for smart contract developers to communicate with the outside world, as well as for data analysts to keep track of what happens inside of a smart contract. \n For example, the ERC20 standard defines the  Transfer  event, which is emitted every time a token transfer occurs. The event log contains the sender, the recipient and the amount of tokens transferred. \n event   Transfer ( address   indexed   from ,   address   indexed  to ,   uint256  value ) ; \n \n Decoded event logs always originate from the fields  topic0 ,  topic1 ,  topic2 ,  topic3  and  data  in the  logs  table. \n ", "url": "https://docs.dune.com/data-catalog/evm/optimism/decoded/event-logs#overview"}
{"content": "\u200b Event Logs in Dune \n In Dune, we store all event logs of decoded smart contracts in separate tables. \n The structure published in these logs is predefined by the developer of the smart contract, the content is dynamically created during the transaction. \n Logs are useful for monitoring, alerting and in general keeping track of what happens inside of a smart contract. Logs are your best friend as a data analyst since they reliably present you with data that is intended to be analyzed post factum. If you ever want to see which logs  can  be emitted by a smart contract, you can simply search for the keyword  emit  in the source code of the smart contract. \n We will decode all event logs for smart contracts into tables named accordingly to this schema: \n [projectname_blockchain].[contractName]_evt_[eventName] \n ", "url": "https://docs.dune.com/data-catalog/evm/optimism/decoded/event-logs#event-logs-in-dune"}
{"content": "\u200b Example \n Let\u2019s take the  uniswap v3 factory  (https://etherscan.io/address/0x1f98431c8ad98523631ae4a59f267346ea31f984#code)  as an example and look at the event that gets emitted upon the creation of a new pool. The event is called  PoolCreated  and gets emitted every time somebody successfully deploys a new Uniswap V3 pool by calling the function  createPool . The event will readily give us information like the tokens in the pool, the fee tier of this pool and the tick spacing. In Etherscan, you can easily look at the event logs of transaction by opening the  logs tab  (https://etherscan.io/tx/0xdeb368592f3de0f2840754bce61d2c3f29cdb3407c63c699052e68a854c71eaa#eventlog) . In Dune, this particular event will be stored in the table: \n uniswap_v3_ethereum.Factory_evt_PoolCreated \n \n ", "url": "https://docs.dune.com/data-catalog/evm/optimism/decoded/event-logs#example"}
{"content": "\u200b Multiple Instances \n If there is multiple instances of a contract we will collect all event logs across all instances of this smart contract in one table. For example, all uniswap v3 pool  swap  events (on ethereum) are stored in the table:  uniswap_v3_ethereum.Pair_evt_Swap \n The column  contract_address  indicates as to which smart contract emitted this event. \n \n ", "url": "https://docs.dune.com/data-catalog/evm/optimism/decoded/event-logs#multiple-instances"}
{"content": "\u200b Further Reading \n \n Understanding event logs on the Ethereum blockchain  (https://medium.com/mycrypto/understanding-event-logs-on-the-ethereum-blockchain-f4ae7ba50378) \n Everything You Ever Wanted to Know About Events and Logs on Ethereum  (https://medium.com/linum-labs/everything-you-ever-wanted-to-know-about-events-and-logs-on-ethereum-fec84ea7d0a5) \n \n Submit any contract for decoding  (/web-app/decoding/decoding-contracts) Explore already decoded contracts  (/data-catalog/evm/ethereum/decoded/contracts) Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/optimism/decoded/event-logs) Call Tables  (/data-catalog/evm/optimism/decoded/call-tables) Decoded Contracts  (/data-catalog/evm/optimism/decoded/contracts) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Overview  (#overview) Event Logs in Dune  (#event-logs-in-dune) Example  (#example) Multiple Instances  (#multiple-instances) Further Reading  (#further-reading)", "url": "https://docs.dune.com/data-catalog/evm/optimism/decoded/event-logs#further-reading"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded optimism.contracts Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Overview  (/data-catalog/evm/optimism/overview) Raw Decoded Overview  (/data-catalog/evm/optimism/decoded/overview) Call Tables  (/data-catalog/evm/optimism/decoded/call-tables) Event Logs  (/data-catalog/evm/optimism/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/optimism/decoded/contracts) Decoded Logs  (/data-catalog/evm/optimism/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/optimism/decoded/traces-decoded) Curated Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded optimism.contracts Description of the optimism.contracts table on Dune Table Description This table contains information about the contracts Dune has decoded on the  optimism  blockchain. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/optimism/decoded/contracts) Event Logs  (/data-catalog/evm/optimism/decoded/event-logs) Decoded Logs  (/data-catalog/evm/optimism/decoded/logs-decoded) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/optimism/decoded/contracts"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw corn.logs Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Overview  (/data-catalog/evm/corn/overview) Raw Blocks  (/data-catalog/evm/corn/raw/blocks) Creation Traces  (/data-catalog/evm/corn/raw/creation-traces) Logs  (/data-catalog/evm/corn/raw/logs) Transactions  (/data-catalog/evm/corn/raw/transactions) Traces  (/data-catalog/evm/corn/raw/traces) Decoded Curated Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw corn.logs Description of the corn.logs table on Dune Table Description The  corn .logs  table represents the logs generated by the Ethereum Virtual Machine (EVM) when a contract is executed. Logs are a way to store data on the blockchain. Logs originate from events that occur during the execution of a smart contract. A log consists of: topic list: a list of 0 to 3 32-byte data topics.  Topic0  is the hash of the signature of the event (indexed), and the remaining topics are indexed parameters of the event. data: contains non-indexed data. This is the raw version of this table. If the chain is a Fully Managed chain, decoded transaction calls will be available, see  call tables  (/data-catalog/evm/corn/decoded/call-tables)  section. If this is a Hosted chain, decoded call tables will not be available. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Examples Filter the logs for a specific contract SELECT *\nFROM corn.logs\nWHERE contract_address = 0x06012c8cf97bead5deae237070f9587f8e7a266d\nLIMIT 10 Filter the logs for a specific topic SELECT *\nFROM corn.logs\nWHERE topic0 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n Show the logs of a specific block SELECT *\nFROM corn.logs\nWHERE evt_block_number = 1000000\n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/corn/raw/logs) Creation Traces  (/data-catalog/evm/corn/raw/creation-traces) Transactions  (/data-catalog/evm/corn/raw/transactions) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/corn/raw/logs"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw fantom.transactions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Overview  (/data-catalog/evm/fantom/overview) Raw Blocks  (/data-catalog/evm/fantom/raw/blocks) Creation Traces  (/data-catalog/evm/fantom/raw/creation-traces) Logs  (/data-catalog/evm/fantom/raw/logs) Transactions  (/data-catalog/evm/fantom/raw/transactions) Traces  (/data-catalog/evm/fantom/raw/traces) Decoded Curated Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw fantom.transactions Description of the fantom.transactions table on Dune Table Description The  fantom .transactions  table contains information about all transactions on the  fantom  blockchain. Each row represents a single transaction and includes information such as block number, hash, timestamp, sender, recipient, value, gas, gas price, and more. Transactions are the fundamental unit of interaction with the  fantom  blockchain. Transactions are created by users and are used to send value, deploy smart contracts, and interact with smart contracts. This is the raw version of this table. If the chain is a Fully Managed chain, decoded transaction calls will be available, see  call tables  (/data-catalog/evm/fantom/decoded/call-tables)  section. If this is a Hosted chain, decoded call tables will not be available. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Examples Show all transactions sent by a specific address SELECT * \nFROM fantom.transactions WHERE \"from\" = '0x50A1b5c358F8D34F0d35aA2f10742c46054E247e'\n Count the number of transactions per block SELECT \n    block_number, \n    COUNT(*)\nFROM fantom.transactions\nGROUP BY 1\nORDER BY 1 DESC\nLIMIT 10\n Show the top 10 transactions with the highest gas price SELECT \n    hash, \n    gas_price\nFROM fantom.transactions\nORDER BY gas_price DESC\nLIMIT 10\n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/fantom/raw/transactions) Logs  (/data-catalog/evm/fantom/raw/logs) Traces  (/data-catalog/evm/fantom/raw/traces) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/fantom/raw/transactions"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation DEX dex_aggregator.trades on optimism Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Overview  (/data-catalog/evm/optimism/overview) Raw Decoded Curated DEX Dex Trades  (/data-catalog/evm/optimism/curated-data/dex/dex-trades) Aggregator Trades  (/data-catalog/evm/optimism/curated-data/dex/dex-aggregator-trades) NFT Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot DEX dex_aggregator.trades on optimism Description of the Dex Aggregator Trades table for optimism  This table is a cross-chain table but can be filtered for  optimism  transactions. Table Description The  dex_aggregator.trades  table captures high-level data on trades executed via decentralized exchange (DEX) aggregators. These aggregators aggregate liquidity from multiple DEXs to provide users with the best possible trade execution. Unlike the  dex.trades  table, which records each intermediary step of a trade,  dex_aggregator.trades  condenses the trade data to reflect the user's intended trade, presenting it as a single entry. Functional Overview Users can expect the  dex_aggregator.trades  table to provide a high-level view of DEX trades facilitated by aggregators. This table simplifies trade records by showing a single entry for trades that may involve multiple DEXs and liquidity pools. For instance, a user might initiate a trade to swap USDC for PEPE via a DEX aggregator. The aggregator might route this trade through several liquidity pools such as WETH-USDC and WETH-PEPE, but  dex_aggregator.trades  will record it as a single USDC \u2192 PEPE trade. Complimentary to  dex_aggregator.trades  is the  dex.trades  table, where detailed trade executions are recorded. This table captures the granular steps of each trade, including interactions with different liquidity pools. The volume routed through aggregators is also recorded in the  dex.trades  table. One row in  dex_aggregator.trades  corresponds to one or more rows in  dex.trades , providing a comprehensive view of the detailed execution path that aggregated trades take. Coverage  The following table shows which projects and versions of those projects are covered in the  dex.trades  table on  optimism .  Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/optimism/curated-data/dex/dex-aggregator-trades) Dex Trades  (/data-catalog/evm/optimism/curated-data/dex/dex-trades) NFT Trades  (/data-catalog/evm/optimism/curated-data/nft/nft-trades) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/optimism/curated-data/dex/dex-aggregator-trades"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw fantom.logs Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Overview  (/data-catalog/evm/fantom/overview) Raw Blocks  (/data-catalog/evm/fantom/raw/blocks) Creation Traces  (/data-catalog/evm/fantom/raw/creation-traces) Logs  (/data-catalog/evm/fantom/raw/logs) Transactions  (/data-catalog/evm/fantom/raw/transactions) Traces  (/data-catalog/evm/fantom/raw/traces) Decoded Curated Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw fantom.logs Description of the fantom.logs table on Dune Table Description The  fantom .logs  table represents the logs generated by the Ethereum Virtual Machine (EVM) when a contract is executed. Logs are a way to store data on the blockchain. Logs originate from events that occur during the execution of a smart contract. A log consists of: topic list: a list of 0 to 3 32-byte data topics.  Topic0  is the hash of the signature of the event (indexed), and the remaining topics are indexed parameters of the event. data: contains non-indexed data. This is the raw version of this table. If the chain is a Fully Managed chain, decoded transaction calls will be available, see  call tables  (/data-catalog/evm/fantom/decoded/call-tables)  section. If this is a Hosted chain, decoded call tables will not be available. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Examples Filter the logs for a specific contract SELECT *\nFROM fantom.logs\nWHERE contract_address = 0x06012c8cf97bead5deae237070f9587f8e7a266d\nLIMIT 10 Filter the logs for a specific topic SELECT *\nFROM fantom.logs\nWHERE topic0 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n Show the logs of a specific block SELECT *\nFROM fantom.logs\nWHERE evt_block_number = 1000000\n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/fantom/raw/logs) Creation Traces  (/data-catalog/evm/fantom/raw/creation-traces) Transactions  (/data-catalog/evm/fantom/raw/transactions) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/fantom/raw/logs"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw fantom.blocks Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Overview  (/data-catalog/evm/fantom/overview) Raw Blocks  (/data-catalog/evm/fantom/raw/blocks) Creation Traces  (/data-catalog/evm/fantom/raw/creation-traces) Logs  (/data-catalog/evm/fantom/raw/logs) Transactions  (/data-catalog/evm/fantom/raw/transactions) Traces  (/data-catalog/evm/fantom/raw/traces) Decoded Curated Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw fantom.blocks Description of the fantom.blocks table on Dune Table description The  fantom .blocks  table contains information about blocks in the  fantom  blockchain. A block is a collection of transactions that are hashed and added to the blockchain. Each block contains a reference to the previous block, known as the parent hash, and a timestamp. The table contains information about each block, such as the block number, the block hash, the block size, the number of transactions, and the gas used. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Examples Show the most recent blocks SELECT\n    number,\n    hash, \n    size,\n    gas_used\n  FROM fantom.blocks\n  ORDER BY number DESC\n  LIMIT 10 Show the number of blocks mined each day SELECT\n    date_trunc('day', time) AS day,\n    count(distinct number)\n  FROM fantom.blocks\n  GROUP BY day\n  ORDER BY day DESC Show the number of transactions in each block SELECT\n    number,\n    count(*)\n  FROM fantom.blocks\n  GROUP BY 1 \n  LIMIT 10 Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/fantom/raw/blocks) Overview  (/data-catalog/evm/fantom/overview) Creation Traces  (/data-catalog/evm/fantom/raw/creation-traces) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/fantom/raw/blocks"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw corn.transactions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Overview  (/data-catalog/evm/corn/overview) Raw Blocks  (/data-catalog/evm/corn/raw/blocks) Creation Traces  (/data-catalog/evm/corn/raw/creation-traces) Logs  (/data-catalog/evm/corn/raw/logs) Transactions  (/data-catalog/evm/corn/raw/transactions) Traces  (/data-catalog/evm/corn/raw/traces) Decoded Curated Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw corn.transactions Description of the corn.transactions table on Dune Table Description The  corn .transactions  table contains information about all transactions on the  corn  blockchain. Each row represents a single transaction and includes information such as block number, hash, timestamp, sender, recipient, value, gas, gas price, and more. Transactions are the fundamental unit of interaction with the  corn  blockchain. Transactions are created by users and are used to send value, deploy smart contracts, and interact with smart contracts. This is the raw version of this table. If the chain is a Fully Managed chain, decoded transaction calls will be available, see  call tables  (/data-catalog/evm/corn/decoded/call-tables)  section. If this is a Hosted chain, decoded call tables will not be available. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Examples Show all transactions sent by a specific address SELECT * \nFROM corn.transactions WHERE \"from\" = '0x50A1b5c358F8D34F0d35aA2f10742c46054E247e'\n Count the number of transactions per block SELECT \n    block_number, \n    COUNT(*)\nFROM corn.transactions\nGROUP BY 1\nORDER BY 1 DESC\nLIMIT 10\n Show the top 10 transactions with the highest gas price SELECT \n    hash, \n    gas_price\nFROM corn.transactions\nORDER BY gas_price DESC\nLIMIT 10\n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/corn/raw/transactions) Logs  (/data-catalog/evm/corn/raw/logs) Traces  (/data-catalog/evm/corn/raw/traces) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/corn/raw/transactions"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded Overview Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Overview  (/data-catalog/evm/corn/overview) Raw Decoded Overview  (/data-catalog/evm/corn/decoded/overview) Call Tables  (/data-catalog/evm/corn/decoded/call-tables) Event Logs  (/data-catalog/evm/corn/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/corn/decoded/contracts) Decoded Logs  (/data-catalog/evm/corn/decoded/logs-decoded) traces_decoded  (/data-catalog/evm/corn/decoded/traces-decoded) Curated Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded Overview Simplifying smart contract analysis through human-readable tables. Overview of Dune's Decoded Data Approach Dune uses the ABI (Application Binary Interface) of smart contracts to decode blockchain transactions into structured tables. Each event log and function call from the ABI are parsed into their own tables. This decoding process transforms the raw, encoded data on the blockchain into human-readable tables, simplifying the analysis of smart contract data. Dune's decoded data approach offers several benefits: Enhanced Readability:  The decoded data tables provide a clear and intuitive representation of smart contract activities. Efficient Analysis:  The structured tables enable efficient querying and analysis of smart contract data. Handling Multiple Contract Instances:  For smart contracts with multiple instances, Dune aggregates the data from these instances into a single table, simplifying the analysis process. Collaborative Mapping:  Dune's smart contract library is continuously expanded through the active participation of the Dune community, ensuring that the decoding coverage remains comprehensive and current. Explore decoded logs  (/data-catalog/evm/corn/decoded/event-logs) Explore decoded traces  (/data-catalog/evm/corn/decoded/call-tables) Which contracts have decoded data? Contract submission on Dune are driven by the community. Usually, the odds are good that the contract you are looking at is already decoded, but especially for new projects or new contracts, it might be that the contract is not decoded yet. In those cases, you can submit the contract to be decoded. Decoding usually takes about 24 hours, in special cases it might take longer. You can check if contracts are already decoded by querying the  [blockchain].contracts  tables, the  data explorer  (/web-app/query-editor/data-explorer) , or use  this dashboard  (https://dune.com/dune/is-my-contract-decoded-yet-v2) . If you want to submit several contracts at the same time, there is also the possibility of submitting a batch of contracts. To do so, please use  this CSV  (https://gist.github.com/antonio-mendes/c6a43c22862581674c11462cae230e23)  as a template and fill it in with the appropriate information for the contracts you want to decode. Afterwards, send the CSV to decoding@dune.com. Submit any contract for decoding  (/web-app/decoding-contracts) Explore already decoded contracts  (/data-catalog/evm/corn/decoded/contracts) How does decoding work? Smart Contracts on any EVM blockchain are mostly written in high-level languages like  Solidity  (https://docs.soliditylang.org/en/v0.8.2)  or  Vyper  (https://vyper.readthedocs.io/en/stable) . In order for them to be deployed to an EVM execution environment, they need to be compiled to EVM executable bytecode. Once deployed, the bytecode gets associated with an address on the respective chain and is permanently stored in the chain's state storage. To be able to interact with this smart contract, which is now just bytecode, we need a guide to call the functions defined in the high-level languages. This translation of names and arguments into byte representation is done using an  Application Binary Interface (ABI) . The ABI documents names, types, and arguments precisely, which allows us to interact with the smart contract using a somewhat human-readable format. The ABI can be compiled using the high-level language source code. The ABI is used to call a smart contract or interpret the data it emits. Decoding Example We are going to look at an event log of an ERC20 transfer event from the  smart contract  (https://etherscan.io/token/0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5#readContract)  that represents the $PICKLE token. On  Etherscan  (https://etherscan.io/tx/0x2bb7c8283b782355875fa37d05e4bd962519ea294678a3dcf2fdffbbd0761bc5#eventlog) , the undecoded event looks like this: If we query for this transaction in the `ethereum.logs` table in the Dune database, we will receive the same encoded bytecode as our result dataset. SELECT *\nFROM ethereum.logs\nWHERE tx_hash = 0x2bb7c8283b782355875fa37d05e4bd962519ea294678a3dcf2fdffbbd0761bc5\n We could make short work of this encoded bytecode by using  DuneSQL Varbinary functions  (/query-engine/Functions-and-operators/varbinary)  to decode it, but having the contract's ABI at hand makes this process much easier.  This contract is decoded in Dune, so we can use the  pickle_finance_ethereum.PickleToken_evt_Transfer  table to access the decoded event log. SELECT *\nFROM pickle_finance_ethereum.PickleToken_evt_Transfer\nWHERE evt_tx_hash = 0x2bb7c8283b782355875fa37d05e4bd962519ea294678a3dcf2fdffbbd0761bc5 Now this is actually useful for analyzing this transaction!  This data is much more readable and understandable than the encoded bytecode. We can see the sender, receiver, and the amount of tokens transferred in this event log. How do I understand decoded data? Decoded data is the high level programming language representation of two pieces of software talking to each other via the blockchain. It's not always easy for a human to understand what exactly is going on in these interactions, but most of the time, looking at column names and the data that is transmitted within them should help you to understand what is happening within that specific log or call. If you are not able to make sense of the data by just searching the tables, it usually helps to look at single transactions using the transaction hash and  Etherscan  (https://etherscan.io) . Furthermore, going into the code of the smart contract (our favorite way to do this is  DethCode  (https://etherscan.deth.net) ) to read the comments or the actual logic can help to understand the smart contract's emitted data. If that also doesn't lead to satisfactory results, scouring the relevant docs and GitHub of the project can lead you to the desired answers. Furthermore, talking to the developers and core community of a project can also help you to get an understanding of the smart contracts. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/corn/decoded/overview) Traces  (/data-catalog/evm/corn/raw/traces) Call Tables  (/data-catalog/evm/corn/decoded/call-tables) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/corn/decoded/overview"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation B3 B3 Overview Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Overview  (/data-catalog/evm/b3/overview) Raw Decoded Curated Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot B3 B3 Overview B3 data on Dune B3 is a fun-first gaming ecosystem designed to bring the next generation of gamers and game creators onchain. Created by a team of Base/Coinbase alumni and OG Ethereum contributors, B3 provides a seamless gaming experience without the need for wallets, bridging, or switching networks. Players can dive into games instantly\u2014just visit  Basement.fun  (https://basement.fun)  to experience it yourself. \n Fast, Cheap, and Scalable: \nB3 is a Layer 3 (L3) solution that settles on Base, delivering lightning-fast transactions with sub-cent fees. It is purpose-built for gamers, offering dedicated blockspace that scales to meet the demands of high-throughput games. Whether you\u2019re building or playing, B3 ensures a smooth, low-cost experience. \n Onchain is the New Online: \nB3 envisions a future where onchain gaming becomes the new standard for online interactions, empowering game creators and rewarding creativity. B3 allows anyone to play games from anywhere, all while leveraging the security and scalability of Base. \n Scalable Architecture: \nB3\u2019s rollup engine offers horizontal scaling through application-layer sharding. By orchestrating dedicated sidecars for games and other computationally heavy operations, B3 can handle web2-scale games while maintaining near gasless transactions. \n Built on Base: \nAs a secure, low-cost Layer 2 incubated by Coinbase, Base provides the ideal foundation for B3. Leveraging Base as its settlement layer, B3 is positioned to further scale the Base ecosystem and contribute to its technical and product strategy. \n B3 documentation Explore comprehensive documentation of B3, detailing its architecture, protocol, and resources for developers.  (https://docs.b3.fun/) \n ", "url": "https://docs.dune.com/data-catalog/evm/b3/overview"}
{"content": "\u200b Data Catalog \n Logs Detailed event logs from smart contracts, providing insights into interactions within the b3 network.  (./raw/logs) Blocks Information on blocks, illustrating the operational capacity and activity levels on b3.  (./raw/blocks) Transactions Extensive transaction data, showcasing the efficiency and execution of operations on b3.  (./raw/transactions) decoded Enhanced transaction data decoded for better analysis and understanding of contract executions.  (./decoded/overview) Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/b3/overview) NFT Trades  (/data-catalog/evm/avalanche/curated-data/nft/nft-trades) Blocks  (/data-catalog/evm/b3/raw/blocks) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Data Catalog  (#data-catalog)", "url": "https://docs.dune.com/data-catalog/evm/b3/overview#data-catalog"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded ethereum.traces_decoded Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Overview  (/data-catalog/evm/optimism/overview) Raw Decoded Overview  (/data-catalog/evm/optimism/decoded/overview) Call Tables  (/data-catalog/evm/optimism/decoded/call-tables) Event Logs  (/data-catalog/evm/optimism/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/optimism/decoded/contracts) Decoded Logs  (/data-catalog/evm/optimism/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/optimism/decoded/traces-decoded) Curated Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded ethereum.traces_decoded Description of the ethereum.traces_decoded table on Dune Table Description The  traces_decoded  table contains decoded traces from  optimism  transactions. The table matches  MethodID , which consists of the first 4 bytes of any eth call, to the trace signature and the corresponding Method name. The table does not contain the full trace data and is not suitable for analysis of smart contract level data. For that, use the specific event tables as described in  Call-tables  (/data-catalog/evm/optimism/decoded/traces-decoded) . This table is great for gaining a high level understanding of the types of events that are being emitted by a smart contract or smart contracts of a certain protocol. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/optimism/decoded/traces-decoded) Decoded Logs  (/data-catalog/evm/optimism/decoded/logs-decoded) Dex Trades  (/data-catalog/evm/optimism/curated-data/dex/dex-trades) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/optimism/decoded/traces-decoded"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation DEX dex_aggregator.trades on b3 Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Overview  (/data-catalog/evm/b3/overview) Raw Decoded Curated DEX Dex Trades  (/data-catalog/evm/b3/curated-data/dex/dex-trades) Aggregator Trades  (/data-catalog/evm/b3/curated-data/dex/dex-aggregator-trades) NFT Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot DEX dex_aggregator.trades on b3 Description of the Dex Aggregator Trades table for b3  This table is a cross-chain table but can be filtered for  b3  transactions. Table Description The  dex_aggregator.trades  table captures high-level data on trades executed via decentralized exchange (DEX) aggregators. These aggregators aggregate liquidity from multiple DEXs to provide users with the best possible trade execution. Unlike the  dex.trades  table, which records each intermediary step of a trade,  dex_aggregator.trades  condenses the trade data to reflect the user's intended trade, presenting it as a single entry. Functional Overview Users can expect the  dex_aggregator.trades  table to provide a high-level view of DEX trades facilitated by aggregators. This table simplifies trade records by showing a single entry for trades that may involve multiple DEXs and liquidity pools. For instance, a user might initiate a trade to swap USDC for PEPE via a DEX aggregator. The aggregator might route this trade through several liquidity pools such as WETH-USDC and WETH-PEPE, but  dex_aggregator.trades  will record it as a single USDC \u2192 PEPE trade. Complimentary to  dex_aggregator.trades  is the  dex.trades  table, where detailed trade executions are recorded. This table captures the granular steps of each trade, including interactions with different liquidity pools. The volume routed through aggregators is also recorded in the  dex.trades  table. One row in  dex_aggregator.trades  corresponds to one or more rows in  dex.trades , providing a comprehensive view of the detailed execution path that aggregated trades take. Coverage  The following table shows which projects and versions of those projects are covered in the  dex.trades  table on  b3 .  Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/b3/curated-data/dex/dex-aggregator-trades) Dex Trades  (/data-catalog/evm/b3/curated-data/dex/dex-trades) NFT Trades  (/data-catalog/evm/b3/curated-data/nft/nft-trades) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/b3/curated-data/dex/dex-aggregator-trades"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation NFT NFT.trades on gnosis Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Overview  (/data-catalog/evm/gnosis/overview) Raw Decoded Curated DEX NFT NFT Trades  (/data-catalog/evm/gnosis/curated-data/nft/nft-trades) Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot NFT NFT.trades on gnosis The  nft.trades  table captures detailed data on NFT marketplaces, recording all trade events across various protocols on gnosis.  This is a cross-chain table but can be filtered for  gnosis  transactions. Table Description The `nft.trades` table on Dune Analytics is central to capturing and analyzing Non-Fungible Token (NFT) transactions across various marketplaces. It is a pivotal resource for dissecting the intricacies of NFT trade execution, market behavior, and collector activity within the NFT space. Usage The `nft.trades` table serves as an essential tool for delving into the NFT market's complexities. It offers a detailed snapshot of each NFT transaction, encompassing data points such as sale price, transaction timestamp, buyer and seller addresses, and the specific NFT assets involved. This table allows analysts to explore trends in NFT valuation, trading volumes, and marketplace dynamics, providing insights into the evolving landscape of digital collectibles and art. Table Coverage  The following table shows which projects and versions of those projects are covered in the  dex.trades  table on  gnosis .  Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/gnosis/curated-data/nft/nft-trades) Aggregator Trades  (/data-catalog/evm/gnosis/curated-data/dex/dex-aggregator-trades) Overview  (/data-catalog/evm/ink/overview) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/gnosis/curated-data/nft/nft-trades"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation DEX dex.trades on corn Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Overview  (/data-catalog/evm/corn/overview) Raw Decoded Curated DEX Dex Trades  (/data-catalog/evm/corn/curated-data/dex/dex-trades) Aggregator Trades  (/data-catalog/evm/corn/curated-data/dex/dex-aggregator-trades) NFT Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot DEX dex.trades on corn The  dex.trades  table captures detailed data on decentralized exchange (DEX) trades, recording all raw trade events across various protocols on corn.  This is a cross-chain table but can be filtered for  corn  transactions. Table Description The  dex.trades  table captures detailed data on trades executed via decentralized exchanges (DEXs). This table captures all raw trade events that happen across all liqudity pools. It provides a comprehensive view of the entire trade execution process, detailing the specific paths and liquidity sources utilized. Functional Overview The  dex.trades  table provides an in-depth view of trades on decentralized exchanges like Uniswap or Curve. This table includes entries for each segment of a trade that passes through different liquidity pools, as well as single-step trades. For example, a user may initiate a trade to swap USDC for PEPE. If this trade is executed through multiple liquidity pools, such as USDC-WETH and WETH-PEPE, the  dex.trades  table will record each segment of the trade as a separate entry. Conversely, a single-step trade, such as directly swapping USDC for ETH, will be recorded as a single entry. This detailed approach allows for granular analysis of trade execution paths, enabling users to: Analyze Liquidity Sources:  Understand which liquidity pools are used and how they interact in both single-step and multi-step trades. Track Trade Execution Paths:  Follow the exact route a trade takes across different DEXs and liquidity pools Assess Slippage and Execution Quality:  Evaluate the impact of each step on the overall trade execution, including slippage and price changes. Monitor Market Dynamics:  Gain insights into the behavior and dynamics of different liquidity pools and DEXs over time. Table Coverage  The following table shows which projects and versions of those projects are covered in the  dex.trades  table on  corn .  Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/corn/curated-data/dex/dex-trades) traces_decoded  (/data-catalog/evm/corn/decoded/traces-decoded) Aggregator Trades  (/data-catalog/evm/corn/curated-data/dex/dex-aggregator-trades) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/corn/curated-data/dex/dex-trades"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw corn.blocks Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Overview  (/data-catalog/evm/corn/overview) Raw Blocks  (/data-catalog/evm/corn/raw/blocks) Creation Traces  (/data-catalog/evm/corn/raw/creation-traces) Logs  (/data-catalog/evm/corn/raw/logs) Transactions  (/data-catalog/evm/corn/raw/transactions) Traces  (/data-catalog/evm/corn/raw/traces) Decoded Curated Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw corn.blocks Description of the corn.blocks table on Dune Table description The  corn .blocks  table contains information about blocks in the  corn  blockchain. A block is a collection of transactions that are hashed and added to the blockchain. Each block contains a reference to the previous block, known as the parent hash, and a timestamp. The table contains information about each block, such as the block number, the block hash, the block size, the number of transactions, and the gas used. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Examples Show the most recent blocks SELECT\n    number,\n    hash, \n    size,\n    gas_used\n  FROM corn.blocks\n  ORDER BY number DESC\n  LIMIT 10 Show the number of blocks mined each day SELECT\n    date_trunc('day', time) AS day,\n    count(distinct number)\n  FROM corn.blocks\n  GROUP BY day\n  ORDER BY day DESC Show the number of transactions in each block SELECT\n    number,\n    count(*)\n  FROM corn.blocks\n  GROUP BY 1 \n  LIMIT 10 Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/corn/raw/blocks) Overview  (/data-catalog/evm/corn/overview) Creation Traces  (/data-catalog/evm/corn/raw/creation-traces) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/corn/raw/blocks"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation DEX dex.trades on polygon Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Overview  (/data-catalog/evm/polygon/overview) Raw Decoded Curated DEX Dex Trades  (/data-catalog/evm/polygon/curated-data/dex/dex-trades) Aggregator Trades  (/data-catalog/evm/polygon/curated-data/dex/dex-aggregator-trades) NFT Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot DEX dex.trades on polygon The  dex.trades  table captures detailed data on decentralized exchange (DEX) trades, recording all raw trade events across various protocols on polygon.  This is a cross-chain table but can be filtered for  polygon  transactions. Table Description The  dex.trades  table captures detailed data on trades executed via decentralized exchanges (DEXs). This table captures all raw trade events that happen across all liqudity pools. It provides a comprehensive view of the entire trade execution process, detailing the specific paths and liquidity sources utilized. Functional Overview The  dex.trades  table provides an in-depth view of trades on decentralized exchanges like Uniswap or Curve. This table includes entries for each segment of a trade that passes through different liquidity pools, as well as single-step trades. For example, a user may initiate a trade to swap USDC for PEPE. If this trade is executed through multiple liquidity pools, such as USDC-WETH and WETH-PEPE, the  dex.trades  table will record each segment of the trade as a separate entry. Conversely, a single-step trade, such as directly swapping USDC for ETH, will be recorded as a single entry. This detailed approach allows for granular analysis of trade execution paths, enabling users to: Analyze Liquidity Sources:  Understand which liquidity pools are used and how they interact in both single-step and multi-step trades. Track Trade Execution Paths:  Follow the exact route a trade takes across different DEXs and liquidity pools Assess Slippage and Execution Quality:  Evaluate the impact of each step on the overall trade execution, including slippage and price changes. Monitor Market Dynamics:  Gain insights into the behavior and dynamics of different liquidity pools and DEXs over time. Table Coverage  The following table shows which projects and versions of those projects are covered in the  dex.trades  table on  polygon .  Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/polygon/curated-data/dex/dex-trades) Decoded Traces  (/data-catalog/evm/polygon/decoded/traces-decoded) Aggregator Trades  (/data-catalog/evm/polygon/curated-data/dex/dex-aggregator-trades) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/polygon/curated-data/dex/dex-trades"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation NFT NFT.trades on celo Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Overview  (/data-catalog/evm/celo/overview) Raw Decoded Curated DEX NFT NFT Trades  (/data-catalog/evm/celo/curated-data/nft/nft-trades) Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot NFT NFT.trades on celo The  nft.trades  table captures detailed data on NFT marketplaces, recording all trade events across various protocols on celo.  This is a cross-chain table but can be filtered for  celo  transactions. Table Description The `nft.trades` table on Dune Analytics is central to capturing and analyzing Non-Fungible Token (NFT) transactions across various marketplaces. It is a pivotal resource for dissecting the intricacies of NFT trade execution, market behavior, and collector activity within the NFT space. Usage The `nft.trades` table serves as an essential tool for delving into the NFT market's complexities. It offers a detailed snapshot of each NFT transaction, encompassing data points such as sale price, transaction timestamp, buyer and seller addresses, and the specific NFT assets involved. This table allows analysts to explore trends in NFT valuation, trading volumes, and marketplace dynamics, providing insights into the evolving landscape of digital collectibles and art. Table Coverage  The following table shows which projects and versions of those projects are covered in the  dex.trades  table on  celo .  Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/celo/curated-data/nft/nft-trades) Aggregator Trades  (/data-catalog/evm/celo/curated-data/dex/dex-aggregator-trades) Overview  (/data-catalog/evm/corn/overview) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/celo/curated-data/nft/nft-trades"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Solana solana.transactions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Overview  (/data-catalog/solana/overview) Account Activity  (/data-catalog/solana/account-activity) Blocks  (/data-catalog/solana/blocks) IDL Decoded Tables  (/data-catalog/solana/idl-tables) Instruction Calls  (/data-catalog/solana/instruction-calls) Rewards  (/data-catalog/solana/rewards) Transactions  (/data-catalog/solana/transactions) Vote Transactions  (/data-catalog/solana/vote-transactions) Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Solana solana.transactions Description of the solana.transactions table on Dune ", "url": "https://docs.dune.com/data-catalog/solana/transactions"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Decoded Overview Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Overview  (/data-catalog/evm/base/overview) Raw Decoded Overview  (/data-catalog/evm/base/decoded/overview) Call Tables  (/data-catalog/evm/base/decoded/call-tables) Event Logs  (/data-catalog/evm/base/decoded/event-logs) Decoded Contracts  (/data-catalog/evm/base/decoded/contracts) Decoded Logs  (/data-catalog/evm/base/decoded/logs-decoded) Decoded Traces  (/data-catalog/evm/base/decoded/traces-decoded) Curated Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Decoded Overview Simplifying smart contract analysis through human-readable tables. Overview of Dune's Decoded Data Approach Dune uses the ABI (Application Binary Interface) of smart contracts to decode blockchain transactions into structured tables. Each event log and function call from the ABI are parsed into their own tables. This decoding process transforms the raw, encoded data on the blockchain into human-readable tables, simplifying the analysis of smart contract data. Dune's decoded data approach offers several benefits: Enhanced Readability:  The decoded data tables provide a clear and intuitive representation of smart contract activities. Efficient Analysis:  The structured tables enable efficient querying and analysis of smart contract data. Handling Multiple Contract Instances:  For smart contracts with multiple instances, Dune aggregates the data from these instances into a single table, simplifying the analysis process. Collaborative Mapping:  Dune's smart contract library is continuously expanded through the active participation of the Dune community, ensuring that the decoding coverage remains comprehensive and current. Explore decoded logs  (/data-catalog/evm/base/decoded/event-logs) Explore decoded traces  (/data-catalog/evm/base/decoded/call-tables) Which contracts have decoded data? Contract submission on Dune are driven by the community. Usually, the odds are good that the contract you are looking at is already decoded, but especially for new projects or new contracts, it might be that the contract is not decoded yet. In those cases, you can submit the contract to be decoded. Decoding usually takes about 24 hours, in special cases it might take longer. You can check if contracts are already decoded by querying the  [blockchain].contracts  tables, the  data explorer  (/web-app/query-editor/data-explorer) , or use  this dashboard  (https://dune.com/dune/is-my-contract-decoded-yet-v2) . If you want to submit several contracts at the same time, there is also the possibility of submitting a batch of contracts. To do so, please use  this CSV  (https://gist.github.com/antonio-mendes/c6a43c22862581674c11462cae230e23)  as a template and fill it in with the appropriate information for the contracts you want to decode. Afterwards, send the CSV to decoding@dune.com. Submit any contract for decoding  (/web-app/decoding-contracts) Explore already decoded contracts  (/data-catalog/evm/base/decoded/contracts) How does decoding work? Smart Contracts on any EVM blockchain are mostly written in high-level languages like  Solidity  (https://docs.soliditylang.org/en/v0.8.2)  or  Vyper  (https://vyper.readthedocs.io/en/stable) . In order for them to be deployed to an EVM execution environment, they need to be compiled to EVM executable bytecode. Once deployed, the bytecode gets associated with an address on the respective chain and is permanently stored in the chain's state storage. To be able to interact with this smart contract, which is now just bytecode, we need a guide to call the functions defined in the high-level languages. This translation of names and arguments into byte representation is done using an  Application Binary Interface (ABI) . The ABI documents names, types, and arguments precisely, which allows us to interact with the smart contract using a somewhat human-readable format. The ABI can be compiled using the high-level language source code. The ABI is used to call a smart contract or interpret the data it emits. Decoding Example We are going to look at an event log of an ERC20 transfer event from the  smart contract  (https://etherscan.io/token/0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5#readContract)  that represents the $PICKLE token. On  Etherscan  (https://etherscan.io/tx/0x2bb7c8283b782355875fa37d05e4bd962519ea294678a3dcf2fdffbbd0761bc5#eventlog) , the undecoded event looks like this: If we query for this transaction in the `ethereum.logs` table in the Dune database, we will receive the same encoded bytecode as our result dataset. SELECT *\nFROM ethereum.logs\nWHERE tx_hash = 0x2bb7c8283b782355875fa37d05e4bd962519ea294678a3dcf2fdffbbd0761bc5\n We could make short work of this encoded bytecode by using  DuneSQL Varbinary functions  (/query-engine/Functions-and-operators/varbinary)  to decode it, but having the contract's ABI at hand makes this process much easier.  This contract is decoded in Dune, so we can use the  pickle_finance_ethereum.PickleToken_evt_Transfer  table to access the decoded event log. SELECT *\nFROM pickle_finance_ethereum.PickleToken_evt_Transfer\nWHERE evt_tx_hash = 0x2bb7c8283b782355875fa37d05e4bd962519ea294678a3dcf2fdffbbd0761bc5 Now this is actually useful for analyzing this transaction!  This data is much more readable and understandable than the encoded bytecode. We can see the sender, receiver, and the amount of tokens transferred in this event log. How do I understand decoded data? Decoded data is the high level programming language representation of two pieces of software talking to each other via the blockchain. It's not always easy for a human to understand what exactly is going on in these interactions, but most of the time, looking at column names and the data that is transmitted within them should help you to understand what is happening within that specific log or call. If you are not able to make sense of the data by just searching the tables, it usually helps to look at single transactions using the transaction hash and  Etherscan  (https://etherscan.io) . Furthermore, going into the code of the smart contract (our favorite way to do this is  DethCode  (https://etherscan.deth.net) ) to read the comments or the actual logic can help to understand the smart contract's emitted data. If that also doesn't lead to satisfactory results, scouring the relevant docs and GitHub of the project can lead you to the desired answers. Furthermore, talking to the developers and core community of a project can also help you to get an understanding of the smart contracts. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/base/decoded/overview) Traces  (/data-catalog/evm/base/raw/traces) Call Tables  (/data-catalog/evm/base/decoded/call-tables) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/base/decoded/overview"}
{"content": "\u200b Table description \n This table contains the transaction data within Solana\u2019s blockchain. Most of the relevant data related to account, protocol, and program activity is available in this table. \n This table excludes all voting transactions, which are available in the  solana.vote_transactions  table. \n ", "url": "https://docs.dune.com/data-catalog/solana/transactions#table-description"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/solana/transactions#column-descriptions"}
{"content": "\u200b Table Sample \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/solana/transactions) Rewards  (/data-catalog/solana/rewards) Vote Transactions  (/data-catalog/solana/vote-transactions) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample)", "url": "https://docs.dune.com/data-catalog/solana/transactions#table-sample"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Solana solana.vote_transactions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Overview  (/data-catalog/solana/overview) Account Activity  (/data-catalog/solana/account-activity) Blocks  (/data-catalog/solana/blocks) IDL Decoded Tables  (/data-catalog/solana/idl-tables) Instruction Calls  (/data-catalog/solana/instruction-calls) Rewards  (/data-catalog/solana/rewards) Transactions  (/data-catalog/solana/transactions) Vote Transactions  (/data-catalog/solana/vote-transactions) Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Solana solana.vote_transactions Description of the solana.vote_transactions table on Dune ", "url": "https://docs.dune.com/data-catalog/solana/vote-transactions"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Solana solana.instruction_calls Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Overview  (/data-catalog/solana/overview) Account Activity  (/data-catalog/solana/account-activity) Blocks  (/data-catalog/solana/blocks) IDL Decoded Tables  (/data-catalog/solana/idl-tables) Instruction Calls  (/data-catalog/solana/instruction-calls) Rewards  (/data-catalog/solana/rewards) Transactions  (/data-catalog/solana/transactions) Vote Transactions  (/data-catalog/solana/vote-transactions) Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Solana solana.instruction_calls Description of the solana.instruction_calls table on Dune ", "url": "https://docs.dune.com/data-catalog/solana/instruction-calls"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw base.logs Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Overview  (/data-catalog/evm/base/overview) Raw Blocks  (/data-catalog/evm/base/raw/blocks) Creation Traces  (/data-catalog/evm/base/raw/creation-traces) Logs  (/data-catalog/evm/base/raw/logs) Transactions  (/data-catalog/evm/base/raw/transactions) Traces  (/data-catalog/evm/base/raw/traces) Decoded Curated Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw base.logs Description of the base.logs table on Dune Table Description The  base .logs  table represents the logs generated by the Ethereum Virtual Machine (EVM) when a contract is executed. Logs are a way to store data on the blockchain. Logs originate from events that occur during the execution of a smart contract. A log consists of: topic list: a list of 0 to 3 32-byte data topics.  Topic0  is the hash of the signature of the event (indexed), and the remaining topics are indexed parameters of the event. data: contains non-indexed data. This is the raw version of this table. If the chain is a Fully Managed chain, decoded transaction calls will be available, see  call tables  (/data-catalog/evm/base/decoded/call-tables)  section. If this is a Hosted chain, decoded call tables will not be available. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Examples Filter the logs for a specific contract SELECT *\nFROM base.logs\nWHERE contract_address = 0x06012c8cf97bead5deae237070f9587f8e7a266d\nLIMIT 10 Filter the logs for a specific topic SELECT *\nFROM base.logs\nWHERE topic0 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n Show the logs of a specific block SELECT *\nFROM base.logs\nWHERE evt_block_number = 1000000\n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/base/raw/logs) Creation Traces  (/data-catalog/evm/base/raw/creation-traces) Transactions  (/data-catalog/evm/base/raw/transactions) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/base/raw/logs"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Solana Solana Decoded Tables Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Overview  (/data-catalog/solana/overview) Account Activity  (/data-catalog/solana/account-activity) Blocks  (/data-catalog/solana/blocks) IDL Decoded Tables  (/data-catalog/solana/idl-tables) Instruction Calls  (/data-catalog/solana/instruction-calls) Rewards  (/data-catalog/solana/rewards) Transactions  (/data-catalog/solana/transactions) Vote Transactions  (/data-catalog/solana/vote-transactions) Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Solana Solana Decoded Tables Decoded tables for Solana programs IDL Submissions You can submit any program for decoding that has a public IDL or github repo (anchor and native are both supported) like  this one  (https://solscan.io/account/JUP4Fb2cqiRUcaTHdrPC8h2gNsA2ETXiPDD33WcGuJB#anchorProgramIDL) . You can submit to  this form  (https://forms.gle/tbHZ6ZeEke5qwVjcA) . \n Decoded tables inherit all of the columns from  instruction_calls  (data-catalog/solana/instruction-calls) , so you can refer there for most of the types. We only add columns for each argument in the function call  data  and each account that was required to be in  account_arguments .  These only decode from instructions, and not inner instructions. \n ", "url": "https://docs.dune.com/data-catalog/solana/idl-tables"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Solana solana.rewards Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Overview  (/data-catalog/solana/overview) Account Activity  (/data-catalog/solana/account-activity) Blocks  (/data-catalog/solana/blocks) IDL Decoded Tables  (/data-catalog/solana/idl-tables) Instruction Calls  (/data-catalog/solana/instruction-calls) Rewards  (/data-catalog/solana/rewards) Transactions  (/data-catalog/solana/transactions) Vote Transactions  (/data-catalog/solana/vote-transactions) Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Solana solana.rewards Description of the solana.rewards table on Dune ", "url": "https://docs.dune.com/data-catalog/solana/rewards"}
{"content": "\u200b Table description \n This table contains the full set of vote transactions that are submitted by validators to vote on a block. It can be joined with the non-vote transactions table above to get a full breakdown of all transactions. It has the same schema as the main transactions table. \n ", "url": "https://docs.dune.com/data-catalog/solana/vote-transactions#table-description"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/solana/vote-transactions#column-descriptions"}
{"content": "\u200b Table Sample \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/solana/vote-transactions) Transactions  (/data-catalog/solana/transactions) Overview  (/data-catalog/starknet/overview) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample)", "url": "https://docs.dune.com/data-catalog/solana/vote-transactions#table-sample"}
{"content": "\u200b Table description \n This is an unnested table of  solana.transactions  (/data-catalog/solana/transactions) . There can be multiple instructions in a transaction, so having an exploded view here will make it a little easier to work with the data.  This table mainly exists as the base for  Solana decoded tables  (/data-catalog/solana/idl-tables) , which you should be using instead. \n ", "url": "https://docs.dune.com/data-catalog/solana/instruction-calls#table-description"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/solana/instruction-calls#column-descriptions"}
{"content": "\u200b Table Sample \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/solana/instruction-calls) IDL Decoded Tables  (/data-catalog/solana/idl-tables) Rewards  (/data-catalog/solana/rewards) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample)", "url": "https://docs.dune.com/data-catalog/solana/instruction-calls#table-sample"}
{"content": "\u200b Example IDL Decoded Walkthrough \n Using an IDL, we decode the function data arguments and the required account arguments. Let\u2019s look at an example using Whirlpool - normally you can find the IDL  on Solscan  (https://solscan.io/account/whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc#anchorProgramIDL) , but this time we had to dig  into the project repo  (https://github.com/orca-so/whirlpools/blob/main/sdk/src/artifacts/whirlpool.json) . IDLs are like ABIs on Ethereum, except they are created from the  Anchor lang  (https://www.anchor-lang.com/)  project instead of natively from every program. \n Here\u2019s a transaction  (https://solscan.io/tx/TGDKvM2E8mWYcsG2JBnb9axFcyEcKqs7yZLyayCmrV8p8SSdA8r9SLEC7EHQ4mcXQXpczEyaCBXvnmEi9yoKVJ9)  of a pool (a trading pair) being initialzed. \n You can see that the instruction data is decoded in \u201cBumps\u201d, \u201cTickSpacing\u201d, and \u201cInitialSqrtPrice\u201d on the explorer. We have the same thing in a SQL table! You can also see all the account names are labelled clearly as well with an  account_  prefix. Raw table inherited columns like  tx_id ,  block_time ,  tx_index  get a  call_  prefix. \n The main thing to note is that we\u2019ve exploded outer and inner instructions, where the index will match what you see on explorers. This example call is at the outer instruction level, so the inner instruction index is null. For Whirlpool swaps, often times it will happen in inner_instructions so then the top level outer instruction is inherited into the  call_outer_instruction_index  and the inner index is  call_inner_instruction_index  (same idea with the  call_outer_executing_account  and  call_inner_executing_acount ) \n \n Try it out for yourself in  this query  (https://dune.com/queries/2352049/)  below: \n SELECT * FROM whirlpool_solana.whirlpool_call_initializePool \n WHERE call_tx_id = 'TGDKvM2E8mWYcsG2JBnb9axFcyEcKqs7yZLyayCmrV8p8SSdA8r9SLEC7EHQ4mcXQXpczEyaCBXvnmEi9yoKVJ9' \n \n The table name follows the pattern: \n <namespace>_solana.<programName>_call_<instructionName> \n We already have many of the top projects decoded, so go play around! Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/solana/idl-tables) Blocks  (/data-catalog/solana/blocks) Instruction Calls  (/data-catalog/solana/instruction-calls) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Example IDL Decoded Walkthrough  (#example-idl-decoded-walkthrough)", "url": "https://docs.dune.com/data-catalog/solana/idl-tables#example-idl-decoded-walkthrough"}
{"content": "\u200b Table description \n This table contains data about rewards paid out on Solana. One block may contain zero or more rewards, and each row corresponds to one reward. \n ", "url": "https://docs.dune.com/data-catalog/solana/rewards#table-description"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/solana/rewards#column-descriptions"}
{"content": "\u200b Table Sample \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/solana/rewards) Instruction Calls  (/data-catalog/solana/instruction-calls) Transactions  (/data-catalog/solana/transactions) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample)", "url": "https://docs.dune.com/data-catalog/solana/rewards#table-sample"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Solana solana.blocks Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Overview  (/data-catalog/solana/overview) Account Activity  (/data-catalog/solana/account-activity) Blocks  (/data-catalog/solana/blocks) IDL Decoded Tables  (/data-catalog/solana/idl-tables) Instruction Calls  (/data-catalog/solana/instruction-calls) Rewards  (/data-catalog/solana/rewards) Transactions  (/data-catalog/solana/transactions) Vote Transactions  (/data-catalog/solana/vote-transactions) Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Solana solana.blocks Description of the solana.blocks table on Dune ", "url": "https://docs.dune.com/data-catalog/solana/blocks"}
{"content": "\u200b Table description \n This table contains the block data within Solana\u2019s blockchain. It can be used to identify block activity and transaction changes over time. \n ", "url": "https://docs.dune.com/data-catalog/solana/blocks#table-description"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/solana/blocks#column-descriptions"}
{"content": "\u200b Table Sample \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/solana/blocks) Account Activity  (/data-catalog/solana/account-activity) IDL Decoded Tables  (/data-catalog/solana/idl-tables) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample)", "url": "https://docs.dune.com/data-catalog/solana/blocks#table-sample"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Polkadot polkadot.traces Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Overview  (/data-catalog/substrate/overview) Balances  (/data-catalog/substrate/balances) Blocks  (/data-catalog/substrate/blocks) Calls  (/data-catalog/substrate/calls) Events  (/data-catalog/substrate/events) Extrinsics  (/data-catalog/substrate/extrinsics) Materialized Views  (/data-catalog/substrate/materialized_views) Stakings  (/data-catalog/substrate/stakings) Transfers  (/data-catalog/substrate/transfers) Traces  (/data-catalog/substrate/traces) Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Polkadot polkadot.traces Description of the polkadot.traces table on Dune. ", "url": "https://docs.dune.com/data-catalog/substrate/traces"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Result Filtering Pagination Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Pagination  (/api-reference/executions/pagination) Filtering  (/api-reference/executions/filtering) Sorting  (/api-reference/executions/sorting) Sampling  (/api-reference/executions/sampling) Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Queries Materialized Views Webhooks Data Management Endpoints Tables Preset Endpoints DEX EigenLayer EVM Contracts Farcaster Markets Projects Result Filtering Pagination Our API supports pagination on all  /results  endpoints  to facilitate efficient data retrieval by dividing large datasets into smaller, manageable chunks. This feature helps prevent overload, ensures smoother performance, and enhances the user experience by making it easier to navigate through data, thus avoiding limit errors. Pagination is available for the following endpoints: \n \n Get Execution Results  (./endpoint/get-execution-result) \n Get Execution Results CSV  (./endpoint/get-execution-result-csv) \n Get Query Results  (./endpoint/get-query-result) \n Get Query Results CSV  (./endpoint/get-query-result-csv) \n \n Pagination can be effectively combined with  filtering  (./filtering)  and  sorting  (./sorting)  to optimize data fetching. \n \u200b  (#example-paginating-request) Example Paginating Request \n Python SDK cURL Python Javascript Go PHP Java '' ' \n When using higher level functions like `get_latest_result_dataframe` ,   \n pagination via `limit` param  is  done automatically behind the scenes  \n to get  all  rows  in  the result  set . \n \n To actually paginate manually ,  i . e . ,   \n limit the number of rows each call returns ,   \n use a lower level function like `get_execution_results_csv` . \n '' ' \n \n import  dotenv ,  os \n from  dune_client . types  import  QueryParameter \n from  dune_client . client  import  DuneClient \n from  dune_client . query  import  QueryBase \n \n os . chdir ( \"<path_to_your_dotevn_file>\" ) \n \n # load .env file \n dotenv . load_dotenv ( \".env\" ) \n # setup Dune Python client \n dune  =  DuneClient . from_env ( ) \n \n # Higher level function, let pagination be handled automatically and get full query result \n query  =  QueryBase ( \n     query_id = 3567562   # https://dune.com/queries/3568055 -> DEX Pair Stats \n ) \n \n query_result  =  dune . get_latest_result_dataframe ( \n     query = query \n      ,  filters = \"overtip_amount > 0\" \n      ,  sort_by = [ \"overall_tip_given_amount desc\" ] \n )   \n \n print ( query_result ) \n \n # Lower level function, paginate manually to actually get a subset of results one chunk at a time  \n query_result2  =  dune . get_execution_results ( \n     job_id  =   '01HTJ5J9R1D366ZQ08S5B40P0W' \n      ,  limit  =   100 \n      ,  filters = \"overtip_amount > 0\" \n      ,  sort_by = [ \"overall_tip_given_amount desc\" ] \n )   \n \n print ( \"next_uri = \"   +  query_result2 . next_uri  +   \"\\n\" ) \n print ( \"next_offset = \"   +   str ( query_result2 . next_offset )   +   \"\\n\" ) \n print ( query_result2 . result . rows ) \n \n \n To paginate through results: \n \n Use the  limit  parameter to set the maximum number of results per request. \n The  offset  parameter defines the starting point for the data retrieval, with a default value of 0 (the first row). \n For JSON responses, the  next_offset  and  next_uri  fields in the response body indicate how to fetch the next page. For CSV responses, look for the  X-Dune-Next-Offset  and  X-Dune-Next-Uri  headers. The server may adjust the provided limit if deemed too large, ensuring efficient data handling. Follow these indicators to navigate through the dataset seamlessly. \n \n ", "url": "https://docs.dune.com/api-reference/executions/pagination"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Result Filtering Filtering Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Pagination  (/api-reference/executions/pagination) Filtering  (/api-reference/executions/filtering) Sorting  (/api-reference/executions/sorting) Sampling  (/api-reference/executions/sampling) Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Queries Materialized Views Webhooks Data Management Endpoints Tables Preset Endpoints DEX EigenLayer EVM Contracts Farcaster Markets Projects Result Filtering Filtering Our API supports filtering on all  /results  endpoints to refine query results. You can apply filters on both rows and columns to narrow down the data returned by the API. This feature is available for the following endpoints: \n \n Get Execution Results  (./endpoint/get-execution-result) \n Get Execution Results CSV  (./endpoint/get-execution-result-csv) \n Get Query Results  (./endpoint/get-query-result) \n Get Query Results CSV  (./endpoint/get-query-result-csv) \n \n Filtering can be effectively used in conjunction with  pagination  (./pagination)  and  sorting  (./sorting)  to further enhance query efficiency and relevance. See an example of filtering in action with  this Dune farcaster frame  (/learning/how-tos/dune-frames) . \n \u200b  (#example-filtering-request) Example Filtering Request \n Python SDK cURL Python Javascript Go PHP Java import  dotenv ,  os \n from  dune_client . types  import  QueryParameter \n from  dune_client . client  import  DuneClient \n from  dune_client . query  import  QueryBase \n \n os . chdir ( \"<path_to_your_dotevn_file>\" ) \n \n # load .env file \n dotenv . load_dotenv ( \".env\" ) \n # setup Dune Python client \n dune  =  DuneClient . from_env ( ) \n \n query_result  =  dune . get_latest_result_dataframe ( \n     query = 3567562   # https://dune.com/queries/3567562 \n      ,  filters = \"overtip_amount > 0\" \n      ,  columns = [ \"donor_fname\" , \"overtip_amount\" , \"days_overtipped\" , \"overall_tip_given_amount\" , \"overall_avg_tip_amount\" ] \n      ,  sort_by = [ \"overall_tip_given_amount desc\" ] \n ) \n \n print ( query_result ) \n \n \n ", "url": "https://docs.dune.com/api-reference/executions/filtering"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Dune Index Transactions Fees Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Dune Index Transactions Fees Understanding transaction fees and their relationship to transaction costs in blockchain networks ", "url": "https://docs.dune.com/data-catalog/dune-index/gas-fees"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Solana solana.account_activity Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Overview  (/data-catalog/solana/overview) Account Activity  (/data-catalog/solana/account-activity) Blocks  (/data-catalog/solana/blocks) IDL Decoded Tables  (/data-catalog/solana/idl-tables) Instruction Calls  (/data-catalog/solana/instruction-calls) Rewards  (/data-catalog/solana/rewards) Transactions  (/data-catalog/solana/transactions) Vote Transactions  (/data-catalog/solana/vote-transactions) Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Solana solana.account_activity Description of the solana.account_activity table on Dune ", "url": "https://docs.dune.com/data-catalog/solana/account-activity"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation DEX dex.trades on ink Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink Overview  (/data-catalog/evm/ink/overview) Raw Decoded Curated DEX Dex Trades  (/data-catalog/evm/ink/curated-data/dex/dex-trades) Aggregator Trades  (/data-catalog/evm/ink/curated-data/dex/dex-aggregator-trades) NFT KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Overview  (/data-catalog/evm/ink/overview) Raw Decoded Curated DEX Dex Trades  (/data-catalog/evm/ink/curated-data/dex/dex-trades) Aggregator Trades  (/data-catalog/evm/ink/curated-data/dex/dex-aggregator-trades) NFT Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot DEX dex.trades on ink The  dex.trades  table captures detailed data on decentralized exchange (DEX) trades, recording all raw trade events across various protocols on ink.  This is a cross-chain table but can be filtered for  ink  transactions. Table Description The  dex.trades  table captures detailed data on trades executed via decentralized exchanges (DEXs). This table captures all raw trade events that happen across all liqudity pools. It provides a comprehensive view of the entire trade execution process, detailing the specific paths and liquidity sources utilized. Functional Overview The  dex.trades  table provides an in-depth view of trades on decentralized exchanges like Uniswap or Curve. This table includes entries for each segment of a trade that passes through different liquidity pools, as well as single-step trades. For example, a user may initiate a trade to swap USDC for PEPE. If this trade is executed through multiple liquidity pools, such as USDC-WETH and WETH-PEPE, the  dex.trades  table will record each segment of the trade as a separate entry. Conversely, a single-step trade, such as directly swapping USDC for ETH, will be recorded as a single entry. This detailed approach allows for granular analysis of trade execution paths, enabling users to: Analyze Liquidity Sources:  Understand which liquidity pools are used and how they interact in both single-step and multi-step trades. Track Trade Execution Paths:  Follow the exact route a trade takes across different DEXs and liquidity pools Assess Slippage and Execution Quality:  Evaluate the impact of each step on the overall trade execution, including slippage and price changes. Monitor Market Dynamics:  Gain insights into the behavior and dynamics of different liquidity pools and DEXs over time. Table Coverage  The following table shows which projects and versions of those projects are covered in the  dex.trades  table on  ink .  Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/ink/curated-data/dex/dex-trades) Decoded Traces  (/data-catalog/evm/ink/decoded/traces-decoded) Aggregator Trades  (/data-catalog/evm/ink/curated-data/dex/dex-aggregator-trades) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/ink/curated-data/dex/dex-trades"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw kaia.blocks Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Overview  (/data-catalog/evm/kaia/overview) Raw Blocks  (/data-catalog/evm/kaia/raw/blocks) Creation Traces  (/data-catalog/evm/kaia/raw/creation-traces) Logs  (/data-catalog/evm/kaia/raw/logs) Transactions  (/data-catalog/evm/kaia/raw/transactions) Traces  (/data-catalog/evm/kaia/raw/traces) Decoded Curated Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw kaia.blocks Description of the kaia.blocks table on Dune Table description The  kaia .blocks  table contains information about blocks in the  kaia  blockchain. A block is a collection of transactions that are hashed and added to the blockchain. Each block contains a reference to the previous block, known as the parent hash, and a timestamp. The table contains information about each block, such as the block number, the block hash, the block size, the number of transactions, and the gas used. Column Descriptions  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   Table Sample Examples Show the most recent blocks SELECT\n    number,\n    hash, \n    size,\n    gas_used\n  FROM kaia.blocks\n  ORDER BY number DESC\n  LIMIT 10 Show the number of blocks mined each day SELECT\n    date_trunc('day', time) AS day,\n    count(distinct number)\n  FROM kaia.blocks\n  GROUP BY day\n  ORDER BY day DESC Show the number of transactions in each block SELECT\n    number,\n    count(*)\n  FROM kaia.blocks\n  GROUP BY 1 \n  LIMIT 10 Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/kaia/raw/blocks) Overview  (/data-catalog/evm/kaia/overview) Creation Traces  (/data-catalog/evm/kaia/raw/creation-traces) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/data-catalog/evm/kaia/raw/blocks"}
{"content": "\u200b Table description \n The traces table, also known as the \u201csnapshot\u201d table, stores relevant on-chain state data that are otherwise difficult to acquire from base Substrate tables such as extrinsics and events.  The traces tables are populated with special scripts modeling key storage elements at the end of the hour or day. \n Having these snapshots enables Dune wizards to build useful dashboards on Dune\nsuch as: \n \n Polkadot Staking  (https://dune.com/substrate/polkadot-staking) \n Polkadot OpenGov  (https://dune.com/substrate/polkadot-gov) \n HydraDX OmniPool  (https://dune.com/substrate/hydradx) \n Interlay Vaults  (https://dune.com/substrate/interlay) \n \n ", "url": "https://docs.dune.com/data-catalog/substrate/traces#table-description"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/substrate/traces#column-descriptions"}
{"content": "\u200b Table Sample \n \n \n \n \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/substrate/traces) Transfers  (/data-catalog/substrate/transfers) Overview  (/data-catalog/solana/overview) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample)", "url": "https://docs.dune.com/data-catalog/substrate/traces#table-sample"}
{"content": "\u200b Pagination Parameters \n \u200b  (#limit-required) limit  (required) \n \n Type:   integer \n Description:  Specifies the maximum number of rows to return in a single request, controlling the page size for pagination. \n \n \u200b  (#offset) offset \n \n Type:   integer \n Description:  Determines the starting point for data retrieval, allowing for sequential access through the dataset. \n Default:  0 (the first row) \n Usage:  Use in conjunction with  limit  to navigate through results in an efficient, incremental manner. \n \n ", "url": "https://docs.dune.com/api-reference/executions/pagination#pagination-parameters"}
{"content": "\u200b Pagination in Response \n The following fields in the response body are related to pagination and can be utilized when doing paginated get results request. If they are available, you can use them to paginate the next page. If they are not available, that means there are no more results to be fetched. \n JSON response endpoints CSV response endpoints next_offset \n Type: Integer \n Description: Provides the offset to use for retrieving the next page of results, if available. \n next_uri \n Type: String (URL) \n Description: Specifies the complete URI to retrieve the next page of results, if available. \n \n If you pass in an invalid  offset  parameter value, you will get an empty result set. For example, if there are only 25 rows of result data, and you pass in  offset=30 , you will  not  receive an error, but rather an empty result with metadata like this. Note the response field  result.total_row_count , indicating this result has only 25 rows. Example empty response      { \n          \"execution_id\" :   \"01HPF1299EV69Z08DBKW1B6MJR\" , \n          \"query_id\" :   2616430 , \n          \"is_execution_finished\" :   true , \n          \"state\" :   \"QUERY_STATE_COMPLETED\" , \n          \"submitted_at\" :   \"2024-02-12T16:05:40.270193Z\" , \n          \"expires_at\" :   \"2024-05-12T16:05:40.654018Z\" , \n          \"execution_started_at\" :   \"2024-02-12T16:05:40.312207906Z\" , \n          \"execution_ended_at\" :   \"2024-02-12T16:05:40.654017085Z\" , \n          \"result\" :   { \n              \"rows\" :   [ ] , \n              \"metadata\" :   { \n              \"column_names\" :   [ \n                  \"foo\" \n              ] , \n              \"row_count\" :   0 , \n              \"result_set_bytes\" :   0 , \n              \"total_row_count\" :   25 , \n              \"total_result_set_bytes\" :   28 , \n              \"datapoint_count\" :   0 , \n              \"pending_time_millis\" :   42 , \n              \"execution_time_millis\" :   341 \n              } \n          } \n      } \n \n Example paginated response      { \n          \"execution_id\" :   \"01HPFJ7VSFXPTA8WPMDKBXE167\" , \n          \"query_id\" :   3426636 , \n          \"is_execution_finished\" :   true , \n          \"state\" :   \"QUERY_STATE_COMPLETED\" , \n          \"submitted_at\" :   \"2024-02-12T21:05:48.848069Z\" , \n          \"expires_at\" :   \"2024-05-12T21:05:50.199443Z\" , \n          \"execution_started_at\" :   \"2024-02-12T21:05:48.863094766Z\" , \n          \"execution_ended_at\" :   \"2024-02-12T21:05:50.199442351Z\" , \n          \"result\" :   { \n              \"rows\" :   [ \n                  { \n                      \"amount_usd\" :   null , \n                      \"block_date\" :   \"2021-06-07 00:00:00.000 UTC\" , \n                      \"block_month\" :   \"2021-06-01T00:00:00Z\" , \n                      \"block_time\" :   \"2021-06-07 13:21:10.000 UTC\" , \n                      \"blockchain\" :   \"bnb\" , \n                      \"evt_index\" :   432 , \n                      \"maker\" :   null , \n                      \"project\" :   \"pancakeswap\" , \n                      \"project_contract_address\" :   \"0xa41e57459f09a126f358e118b693789d088ea8a0\" , \n                      \"taker\" :   \"0x88bf5a2e82510847e5dcbf33f44a9f611f1c1df5\" , \n                      \"token_bought_address\" :   \"0x85e76cbf4893c1fbcb34dcf1239a91ce2a4cf5a7\" , \n                      \"token_bought_amount\" :   2985.646787349244 , \n                      \"token_bought_amount_raw\" :   \"2985646787349243786078\" , \n                      \"token_bought_symbol\" :   \"USDG\" , \n                      \"token_pair\" :   \"GMT-USDG\" , \n                      \"token_sold_address\" :   \"0x99e92123eb77bc8f999316f622e5222498438784\" , \n                      \"token_sold_amount\" :   192.8996462242313 , \n                      \"token_sold_amount_raw\" :   \"192899646224231304314\" , \n                      \"token_sold_symbol\" :   \"GMT\" , \n                      \"tx_from\" :   \"0x88bf5a2e82510847e5dcbf33f44a9f611f1c1df5\" , \n                      \"tx_hash\" :   \"0xcee1e51083f28655fd9cc434238e2a243aa8f9bad20e717d145f246b5e73e231\" , \n                      \"tx_to\" :   \"0x10ed43c718714eb63d5aa57b78b54704e256024e\" \n                  } , \n                  { \n                      \"amount_usd\" :   0.0038254393551350966 , \n                      \"block_date\" :   \"2021-06-27 00:00:00.000 UTC\" , \n                      \"block_month\" :   \"2021-06-01T00:00:00Z\" , \n                      \"block_time\" :   \"2021-06-27 19:21:48.000 UTC\" , \n                      \"blockchain\" :   \"bnb\" , \n                      \"evt_index\" :   38 , \n                      \"maker\" :   null , \n                      \"project\" :   \"pancakeswap\" , \n                      \"project_contract_address\" :   \"0x73c6542f8a529bf7bf0ac27a1d232a8525748738\" , \n                      \"taker\" :   \"0x10ed43c718714eb63d5aa57b78b54704e256024e\" , \n                      \"token_bought_address\" :   \"0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c\" , \n                      \"token_bought_amount\" :   0.00001404037053195 , \n                      \"token_bought_amount_raw\" :   \"14040370531950\" , \n                      \"token_bought_symbol\" :   \"WBNB\" , \n                      \"token_pair\" :   null , \n                      \"token_sold_address\" :   \"0x3da1fd918a4c56b1cf6280ba37018c211db0d943\" , \n                      \"token_sold_amount\" :   null , \n                      \"token_sold_amount_raw\" :   \"23274980840704048977780\" , \n                      \"token_sold_symbol\" :   null , \n                      \"tx_from\" :   \"0xc0ffee00d263df1ecb44ece29f63a1e7479b7420\" , \n                      \"tx_hash\" :   \"0xa37ab410b4802e4d4aab950d1c3ce186abf4dbc98f7d7dbc54af17cf23519444\" , \n                      \"tx_to\" :   \"0x17f07d78e432b91ccfbed98f0617a83a4bfcc446\" \n                  } , \n                  { \n                      \"amount_usd\" :   229.4023072060263 , \n                      \"block_date\" :   \"2021-06-29 00:00:00.000 UTC\" , \n                      \"block_month\" :   \"2021-06-01T00:00:00Z\" , \n                      \"block_time\" :   \"2021-06-29 23:23:56.000 UTC\" , \n                      \"blockchain\" :   \"bnb\" , \n                      \"evt_index\" :   51 , \n                      \"maker\" :   null , \n                      \"project\" :   \"pancakeswap\" , \n                      \"project_contract_address\" :   \"0x58f876857a02d6762e0101bb5c46a8c1ed44dc16\" , \n                      \"taker\" :   \"0xd7d116d7535aa724f8be9c482d2c768bc425a23c\" , \n                      \"token_bought_address\" :   \"0xe9e7cea3dedca5984780bafc599bd69add087d56\" , \n                      \"token_bought_amount\" :   229.23954712756574 , \n                      \"token_bought_amount_raw\" :   \"229239547127565734569\" , \n                      \"token_bought_symbol\" :   \"BUSD\" , \n                      \"token_pair\" :   \"BUSD-WBNB\" , \n                      \"token_sold_address\" :   \"0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c\" , \n                      \"token_sold_amount\" :   0.761872346852129 , \n                      \"token_sold_amount_raw\" :   \"761872346852129018\" , \n                      \"token_sold_symbol\" :   \"WBNB\" , \n                      \"tx_from\" :   \"0xd7d116d7535aa724f8be9c482d2c768bc425a23c\" , \n                      \"tx_hash\" :   \"0x21429506dd0323b9ec40f4cf9314e58579aa25620bf95130f3a275a356ecd64c\" , \n                      \"tx_to\" :   \"0x10ed43c718714eb63d5aa57b78b54704e256024e\" \n                  } , \n                  { \n                      \"amount_usd\" :   2.668233112736453 , \n                      \"block_date\" :   \"2021-06-04 00:00:00.000 UTC\" , \n                      \"block_month\" :   \"2021-06-01T00:00:00Z\" , \n                      \"block_time\" :   \"2021-06-04 00:11:44.000 UTC\" , \n                      \"blockchain\" :   \"bnb\" , \n                      \"evt_index\" :   384 , \n                      \"maker\" :   null , \n                      \"project\" :   \"pancakeswap\" , \n                      \"project_contract_address\" :   \"0x16b9a82891338f9ba80e2d6970fdda79d1eb0dae\" , \n                      \"taker\" :   \"0x452c012e55f7a27d3c25caf15fddfc5d63004cd5\" , \n                      \"token_bought_address\" :   \"0x55d398326f99059ff775485246999027b3197955\" , \n                      \"token_bought_amount\" :   2.662657507914879 , \n                      \"token_bought_amount_raw\" :   \"2662657507914878729\" , \n                      \"token_bought_symbol\" :   \"USDT\" , \n                      \"token_pair\" :   \"USDT-WBNB\" , \n                      \"token_sold_address\" :   \"0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c\" , \n                      \"token_sold_amount\" :   0.00632140891710662 , \n                      \"token_sold_amount_raw\" :   \"6321408917106620\" , \n                      \"token_sold_symbol\" :   \"WBNB\" , \n                      \"tx_from\" :   \"0x452c012e55f7a27d3c25caf15fddfc5d63004cd5\" , \n                      \"tx_hash\" :   \"0x540ae87272f0fcce54595e7c2b67b9ef32cf2d0b5ccfa23c73a21727ae3350ba\" , \n                      \"tx_to\" :   \"0x10ed43c718714eb63d5aa57b78b54704e256024e\" \n                  } , \n                  { \n                      \"amount_usd\" :   46.95293131078031 , \n                      \"block_date\" :   \"2021-06-25 00:00:00.000 UTC\" , \n                      \"block_month\" :   \"2021-06-01T00:00:00Z\" , \n                      \"block_time\" :   \"2021-06-25 18:24:20.000 UTC\" , \n                      \"blockchain\" :   \"bnb\" , \n                      \"evt_index\" :   105 , \n                      \"maker\" :   null , \n                      \"project\" :   \"pancakeswap\" , \n                      \"project_contract_address\" :   \"0x446f87f15d9a9f15b39d1b24d1d6d7e606e9d32d\" , \n                      \"taker\" :   \"0x10ed43c718714eb63d5aa57b78b54704e256024e\" , \n                      \"token_bought_address\" :   \"0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c\" , \n                      \"token_bought_amount\" :   0.16652337675833562 , \n                      \"token_bought_amount_raw\" :   \"166523376758335622\" , \n                      \"token_bought_symbol\" :   \"WBNB\" , \n                      \"token_pair\" :   null , \n                      \"token_sold_address\" :   \"0x384f5a9b720349015a27251684c7a1510dd151ba\" , \n                      \"token_sold_amount\" :   null , \n                      \"token_sold_amount_raw\" :   \"299011495590365081887\" , \n                      \"token_sold_symbol\" :   null , \n                      \"tx_from\" :   \"0x60e028a06d04ecfd041ba415c3b8a63258a6506e\" , \n                      \"tx_hash\" :   \"0xf5e24e5024ff047210127c87cd12b475354ff84afc4bebc159066f9522daac73\" , \n                      \"tx_to\" :   \"0x10ed43c718714eb63d5aa57b78b54704e256024e\" \n                  } \n              ] , \n              \"metadata\" :   { \n                  \"column_names\" :   [ \n                      \"amount_usd\" , \n                      \"block_date\" , \n                      \"token_bought_symbol\" , \n                      \"token_pair\" , \n                      \"block_time\" , \n                      \"blockchain\" , \n                      \"evt_index\" , \n                      \"block_month\" , \n                      \"maker\" , \n                      \"project\" , \n                      \"project_contract_address\" , \n                      \"taker\" , \n                      \"token_bought_address\" , \n                      \"token_bought_amount\" , \n                      \"token_bought_amount_raw\" , \n                      \"token_sold_address\" , \n                      \"token_sold_amount\" , \n                      \"token_sold_amount_raw\" , \n                      \"token_sold_symbol\" , \n                      \"tx_from\" , \n                      \"tx_hash\" , \n                      \"tx_to\" \n                  ] , \n                  \"row_count\" :   5 , \n                  \"result_set_bytes\" :   0 , \n                  \"total_row_count\" :   10 , \n                  \"total_result_set_bytes\" :   5639 , \n                  \"datapoint_count\" :   110 , \n                  \"pending_time_millis\" :   15 , \n                  \"execution_time_millis\" :   1336 \n              } \n          } , \n          \"next_uri\" :   \"https://api.dune.com/api/v1/execution/01HPFJ7VSFXPTA8WPMDKBXE167/results?limit=1000&offset=5\" , \n          \"next_offset\" :   5 \n      } \n \n Data Returned Limit When using pagination, our intention is to use sizes that work well on mobile, with lower data and ram consumption. For this, and to avoid more work on the developer, when the client specifies a very large limit value (for example 500000 rows), instead of returning an error, the server will override this limit to a lower, safer value (for example 30000 rows) and  will always provide  the correct next  offset  and  limit  value to use on the next paginated requests. The exact maximum limit value is subject to change. Data Size Limit Dune internally has a maximum query result size limit (which currently is 8GB, but subject to increase in the future). If your query yields more than 8GB of data, the result will be truncated in storage. In such cases, pulling the result data (using pagination) but without specifying  allow_partial_results  set to true will trigger an error message: \u201cerror\u201d: \u201cPartial Result, please request with \u2018allows_partial_results=true\u2019\u201d. If you wish to retrieve partial results, you can pass the parameter  allow_partial_results=true . But please make sure you indeed want to fetch the truncated result. So what? Related to pagination, this means that \n For query results under 8GB, use the API as normal. \n When your query results exceed 8GB, in addition to  limit  and  offset  parameters in order to read the partial result (the first 8GB of data), set  allow_partial_results=true \n You can use the  Get Status API  (./endpoint/get-execution-status)  to check the size of your result,  result.result_set_size \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/executions/pagination) Client SDKs  (/api-reference/overview/sdks) Filtering  (/api-reference/executions/filtering) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Example Paginating Request  (#example-paginating-request) Pagination Parameters  (#pagination-parameters) limit (required)  (#limit-required) offset  (#offset) Pagination in Response  (#pagination-in-response)", "url": "https://docs.dune.com/api-reference/executions/pagination#pagination-in-response"}
{"content": "\u200b Filtering Parameters \n \u200b  (#filters) filters \n \n Type:   string \n Description:  Allows specifying criteria to filter rows in the result set. It functions similarly to a SQL  WHERE  clause. If omitted, all results are returned. \n \n \n Use the format  <column_name> <operator> <value>  for criteria, for example,  block_time >= '2024-03-05 15:03' . \n Combine criteria using parentheses and logical operators  AND  /  OR , e.g.,  block_time >= '2024-03-05 15:03' AND (project = 'uniswap' OR project = 'balancer') . \n The  IN  operator is permitted, as in  tx_to IN (0x6a3e4b7e23661108aaec70266c468e6c679ae022, 0xdbf89389504e39f03fbb6bdd601aabb6bfbbed71) . \n The  NOT  operator is not supported; using  NOT IN  or  NOT LIKE  will produce an error. \n For column names with special characters (e.g., spaces, emojis, dashes, dots), enclose them in double quotes:  \"special, column\" = 'ABC' . \n Values must be strings or numbers. SQL expressions like  now() - interval '1' day  are not allowed. \n Dates and times should be formatted as strings, e.g.,  block_time > '2023-01-03' . \n \n \u200b  (#columns) columns \n \n Type:   string \n Description:  Specifies the column names to include in the result set. If omitted, all columns are returned. \n \n \n List column names without spaces, e.g., use  project,block_time,amount_usd  instead of  project, block_time, amount_usd . \n Specifying columns helps limit the results to essential data, reducing the data cost of the call. \n \n ", "url": "https://docs.dune.com/api-reference/executions/filtering#filtering-parameters"}
{"content": "\u200b Filtered Response \n Example filtered response      { \n          \"execution_id\" :   \"01HR8AGD6CWGHGP1BN3Z1SJ4MD\" , \n          \"query_id\" :   3493826 , \n          \"is_execution_finished\" :   true , \n          \"state\" :   \"QUERY_STATE_COMPLETED\" , \n          \"submitted_at\" :   \"2024-03-05T22:07:22.828653Z\" , \n          \"expires_at\" :   \"2024-06-03T22:07:53.36647Z\" , \n          \"execution_started_at\" :   \"2024-03-05T22:07:24.013663281Z\" , \n          \"execution_ended_at\" :   \"2024-03-05T22:07:53.366469062Z\" , \n          \"result\" :   { \n              \"rows\" :   [ \n                  { \n                      \"amount_usd\" :   null , \n                      \"block_time\" :   \"2024-03-05 20:50:59.000 UTC\" , \n                      \"tx_from\" :   \"0x38032f326436fdb9c7a9b359e90010f86b8ab482\" , \n                      \"tx_hash\" :   \"0xce6f59cf2f0b395d8fc33e49d1f5db5686be95555135fd8126bc7c59327cd9be\" , \n                      \"tx_to\" :   \"0x061b87122ed14b9526a813209c8a59a633257bab\" \n                  } , \n                  { \n                      \"amount_usd\" :   null , \n                      \"block_time\" :   \"2024-03-05 20:49:33.000 UTC\" , \n                      \"tx_from\" :   \"0xb46b909be665d75f833be22c6e6285ba5ad74dfa\" , \n                      \"tx_hash\" :   \"0x1f1725ebe374b1ffb50047055b793b2be6a8cb07ab75fd685b95e842953da4ca\" , \n                      \"tx_to\" :   \"0x1111111254eeb25477b68fb85ed929f73a960582\" \n                  } , \n                  { \n                      \"amount_usd\" :   null , \n                      \"block_time\" :   \"2024-03-05 20:48:53.000 UTC\" , \n                      \"tx_from\" :   \"0x40014275b332f38423fa0de39939d26c7294ffc0\" , \n                      \"tx_hash\" :   \"0xb4364656c20007fb1d7bfa93d87fc6fe345a91b10661835d1a54d1ac7761a244\" , \n                      \"tx_to\" :   \"0x1111111254eeb25477b68fb85ed929f73a960582\" \n                  } , \n                  { \n                      \"amount_usd\" :   1397.903560808159 , \n                      \"block_time\" :   \"2024-03-05 20:48:03.000 UTC\" , \n                      \"tx_from\" :   \"0xb46b909be665d75f833be22c6e6285ba5ad74dfa\" , \n                      \"tx_hash\" :   \"0x818f701a6c7dcf78a090cfd8324da5896005c2a6d8e3ec5ac2c29cfa5e67f5d9\" , \n                      \"tx_to\" :   \"0x1111111254eeb25477b68fb85ed929f73a960582\" \n                  } , \n                  { \n                      \"amount_usd\" :   null , \n                      \"block_time\" :   \"2024-03-05 20:47:55.000 UTC\" , \n                      \"tx_from\" :   \"0x50758bdc1735e94401ed73eb7e8bde482766819c\" , \n                      \"tx_hash\" :   \"0x1dc342dc397ffa7b433fa64280fe9f4a7e0b51409e9abc9fde61bc9b85c938be\" , \n                      \"tx_to\" :   \"0x4c4af8dbc524681930a27b2f1af5bcc8062e6fb7\" \n                  } , \n                  { \n                      \"amount_usd\" :   null , \n                      \"block_time\" :   \"2024-03-05 20:47:55.000 UTC\" , \n                      \"tx_from\" :   \"0x50758bdc1735e94401ed73eb7e8bde482766819c\" , \n                      \"tx_hash\" :   \"0x1dc342dc397ffa7b433fa64280fe9f4a7e0b51409e9abc9fde61bc9b85c938be\" , \n                      \"tx_to\" :   \"0x4c4af8dbc524681930a27b2f1af5bcc8062e6fb7\" \n                  } , \n                  { \n                      \"amount_usd\" :   null , \n                      \"block_time\" :   \"2024-03-05 20:47:53.000 UTC\" , \n                      \"tx_from\" :   \"0xfa3dc8db10e7c2f7dfa87e86bba6257066731bc1\" , \n                      \"tx_hash\" :   \"0x0d34634a9438ce241e2870b23e70a008c8db839ba38daadc1074c9b1a52be7c7\" , \n                      \"tx_to\" :   \"0xba12222222228d8ba445958a75a0704d566bf2c8\" \n                  } , \n                  { \n                      \"amount_usd\" :   2.753641952846242 , \n                      \"block_time\" :   \"2024-03-05 20:47:53.000 UTC\" , \n                      \"tx_from\" :   \"0xfa3dc8db10e7c2f7dfa87e86bba6257066731bc1\" , \n                      \"tx_hash\" :   \"0x0d34634a9438ce241e2870b23e70a008c8db839ba38daadc1074c9b1a52be7c7\" , \n                      \"tx_to\" :   \"0xba12222222228d8ba445958a75a0704d566bf2c8\" \n                  } , \n                  { \n                      \"amount_usd\" :   null , \n                      \"block_time\" :   \"2024-03-05 20:47:53.000 UTC\" , \n                      \"tx_from\" :   \"0xfa3dc8db10e7c2f7dfa87e86bba6257066731bc1\" , \n                      \"tx_hash\" :   \"0x0d34634a9438ce241e2870b23e70a008c8db839ba38daadc1074c9b1a52be7c7\" , \n                      \"tx_to\" :   \"0xba12222222228d8ba445958a75a0704d566bf2c8\" \n                  } , \n                  { \n                      \"amount_usd\" :   1798.8186143812122 , \n                      \"block_time\" :   \"2024-03-05 20:47:49.000 UTC\" , \n                      \"tx_from\" :   \"0xb46b909be665d75f833be22c6e6285ba5ad74dfa\" , \n                      \"tx_hash\" :   \"0xcf8d9873f017a8ba9e624c3bb61bede8e11c194965690026cd394f20c55f896a\" , \n                      \"tx_to\" :   \"0x1111111254eeb25477b68fb85ed929f73a960582\" \n                  } \n              ] , \n              \"metadata\" :   { \n                  \"column_names\" :   [ \n                      \"block_time\" , \n                      \"tx_from\" , \n                      \"tx_to\" , \n                      \"tx_hash\" , \n                      \"amount_usd\" \n                  ] , \n                  \"row_count\" :   10 , \n                  \"result_set_bytes\" :   2042 , \n                  \"total_row_count\" :   100 , \n                  \"total_result_set_bytes\" :   56496 , \n                  \"datapoint_count\" :   50 , \n                  \"pending_time_millis\" :   1185 , \n                  \"execution_time_millis\" :   29352 \n              } \n          } , \n          \"next_uri\" :   \"https://api.dune.com/api/v1/execution/01HR8AGD6CWGHGP1BN3Z1SJ4MD/results?columns=block_time%2Ctx_from%2Ctx_to%2Ctx_hash%2Camount_usd&filters=block_time+%3E+%272024-03-01%27&limit=10&offset=10\" , \n          \"next_offset\" :   10 \n      } \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/executions/filtering) Pagination  (/api-reference/executions/pagination) Sorting  (/api-reference/executions/sorting) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Example Filtering Request  (#example-filtering-request) Filtering Parameters  (#filtering-parameters) filters  (#filters) columns  (#columns) Filtered Response  (#filtered-response)", "url": "https://docs.dune.com/api-reference/executions/filtering#filtered-response"}
{"content": "\u200b Overview \n Transaction fees represent the dollar costs of executing operations on blockchain networks. By measuring transaction fees, we can understand the demand for resources on the network and the incentives that drive user behavior.\nGas fee calculations are more complex than they may seem at first glance. This is because different networks have different fee structures, and some even have multiple components to their fees. We are aggregating the data from multiple sources to provide a comprehensive view of the fees paid for each network. \n You can explore the daily gas fee data via  metrics.gas_fees_daily \n \n \n ", "url": "https://docs.dune.com/data-catalog/dune-index/gas-fees#overview"}
{"content": "\u200b EVM Networks \n For EVM networks, we have developed a unified model to calculate transaction fees consistently across different types of chains. The data is accessible through the  gas.fees  table, which standardizes the fee components into  l1_fee ,  base_fee , and  priority_fee . This model elegantly unifies the fee structures of rollups, L1s, and L2s, providing a coherent view of gas costs across the EVM ecosystem. However, it\u2019s important to note that the specific fee components and their calculations may vary depending on the unique characteristics and design choices of each network. You can find the fee components for each network below. \n Arbitrum Avalanche C-Chain Base Blast BNB Chain Celo Ethereum Fantom Gnosis Linea Mantle Optimism Polygon Scroll Sei Tron zkEVM zkSync Zora Arbitrum uses a custom L1/L2 fee model that ignores priority fees (tips) in calculations and uses effective_gas_price instead of standard gas_price. This helps account for the actual costs of posting data to the L1 chain. -- Two component fee structure \n l1_fee  =  gas_used_for_l1  *  effective_gas_price \n base_fee  =   ( gas_used  -  gas_used_for_l1 )   *  effective_gas_price \n \n Fee Metrics Code For more details on the implementation, check out the fees metrics code in the Spellbook repository.  (https://github.com/duneanalytics/spellbook/tree/main/dbt_subprojects/daily_spellbook/models/_metrics/fees) \n ", "url": "https://docs.dune.com/data-catalog/dune-index/gas-fees#evm-networks"}
{"content": "\u200b Non-EVM Networks \n For non-EVM networks we haven\u2019t yet found a consistent way to model the fee structure, so we are not yet able to provide a unified model for non-EVM networks. However all the data is included in the  metrics.gas_fees_daily  table. \n \u200b  (#solana) Solana \n Solana has two \u201ctypes\u201d of transactions:  transactions  and  votes . We track the fees for each type separately in  gas_solana.tx_fees  and  gas_solana.vote_fees . \n Solana Transactions Solana Votes Solana uses a custom fee structure with a base fee and an optional prioritization fee for transactions. The base fee is calculated based on the number of signatures required for the transaction, while the prioritization fee depends on the compute unit price and compute budget limit. -- Two component fee structure \n base_fee  =   # of signatures * 0.000005 \n priority_fee  =  compute_unit_price  *  compute_budget_limit \n This data is standardized in  gas_solana.tx_fees . \n We consider both  gas_solana.tx_fees  and  gas_solana.vote_fees  when calculating the total transaction fees for solana in  metrics.gas_fees_daily . \n \u200b  (#bitcoin) Bitcoin \n Bitcoin uses a simple fee structure where each transaction has a fee paid to the miner. Miners pick the transactions with the highest fees to include in the next block. \n -- Single component fee structure \n fee  =  fee \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/dune-index/gas-fees) Introduction  (/data-catalog/dune-index/introduction) Net Transfers  (/data-catalog/dune-index/net-transfers) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Overview  (#overview) EVM Networks  (#evm-networks) Non-EVM Networks  (#non-evm-networks) Solana  (#solana) Bitcoin  (#bitcoin)", "url": "https://docs.dune.com/data-catalog/dune-index/gas-fees#non-evm-networks"}
{"content": "\u200b Table description \n This table contains information from the transactions table focused on account usage. Each row contains all information about an account\u2019s usage in a transaction. \n ", "url": "https://docs.dune.com/data-catalog/solana/account-activity#table-description"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/solana/account-activity#column-descriptions"}
{"content": "\u200b Table Sample \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/solana/account-activity) Overview  (/data-catalog/solana/overview) Blocks  (/data-catalog/solana/blocks) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample)", "url": "https://docs.dune.com/data-catalog/solana/account-activity#table-sample"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Raw ethereum.transactions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Overview  (/data-catalog/evm/ethereum/overview) Raw Transactions  (/data-catalog/evm/ethereum/raw/transactions) Logs  (/data-catalog/evm/ethereum/raw/logs) Traces  (/data-catalog/evm/ethereum/raw/traces) Creation Traces  (/data-catalog/evm/ethereum/raw/creation-traces) Blocks  (/data-catalog/evm/ethereum/raw/blocks) Withdrawals  (/data-catalog/evm/ethereum/raw/withdrawals) Decoded Curated Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Raw ethereum.transactions Description of the ethereum.transactions table on Dune ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/transactions"}
{"content": "\u200b Table Description \n The  transactions  table contains information about all transactions on the Ethereum blockchain. Each row represents a single transaction and includes information such as block number, hash, timestamp, sender, recipient, value, gas, gas price, and more.\nTransactions are the fundamental unit of interaction with the Ethereum blockchain. Transactions are created by users and are used to send value, deploy smart contracts, and interact with smart contracts. \n This is the raw version of this table, for decoded transaction calls, see the  call tables  (/data-catalog/evm/ethereum/decoded/call-tables)  section. \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/transactions#table-description"}
{"content": "\u200b Column Descriptions \n  Datatypes on Snowflake datashare are different in some cases, read more  here  (/datashare/datashare#datatypes) .   \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/transactions#column-descriptions"}
{"content": "\u200b Table Sample \n \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/transactions#table-sample"}
{"content": "\u200b Examples \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/transactions#examples"}
{"content": "\u200b Show all transactions sent by a specific address \n select   *   \n from  ethereum . transactions   where   \"from\"   =   0x50A1b5c358F8D34F0d35aA2f10742c46054E247e \n \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/transactions#show-all-transactions-sent-by-a-specific-address"}
{"content": "\u200b Count the number of transactions per block \n SELECT   \n     block_number ,   \n      COUNT ( * ) \n FROM  ethereum . transactions \n GROUP   BY   1 \n ORDER   BY   1   DESC \n LIMIT   10 \n \n ", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/transactions#count-the-number-of-transactions-per-block"}
{"content": "\u200b Show the top 10 transactions with the highest gas price \n SELECT   \n      hash ,   \n     gas_price \n FROM  ethereum . transactions \n ORDER   BY  gas_price  DESC \n LIMIT   10 \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/ethereum/raw/transactions) Overview  (/data-catalog/evm/ethereum/overview) Logs  (/data-catalog/evm/ethereum/raw/logs) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Table Description  (#table-description) Column Descriptions  (#column-descriptions) Table Sample  (#table-sample) Examples  (#examples) Show all transactions sent by a specific address  (#show-all-transactions-sent-by-a-specific-address) Count the number of transactions per block  (#count-the-number-of-transactions-per-block) Show the top 10 transactions with the highest gas price  (#show-the-top-10-transactions-with-the-highest-gas-price)", "url": "https://docs.dune.com/data-catalog/evm/ethereum/raw/transactions#show-the-top-10-transactions-with-the-highest-gas-price"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Curated Data Curated Data Overview Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot Curated Data Curated Data Overview Curated data Tables are the easiest way to gain insights on Dune ", "url": "https://docs.dune.com/data-catalog/curated/overview"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation SVM Transactions (Beta) Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune Echo Overview  (/echo/overview) EVM SVM GET Token Balances (Beta)  (/echo/svm/balances) GET Transactions (Beta)  (/echo/svm/transactions) React Hooks  (/echo/hooks) Proxy  (/echo/proxy) SVM Transactions (Beta) This endpoint returns transactions for a given address across several SVM chains. GET / echo / beta / transactions / svm / {address} Try it The Transactions Endpoint allows for quick and accurate lookup of transactions associated with an address.\nData is typically available within 100 ms after a block has been propagated to nodes. We currently only support Solana. \n ", "url": "https://docs.dune.com/echo/svm/transactions"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation EVM Networks EVM Overview Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Data Catalog  (/data-catalog/overview) Data Freshness  (/data-catalog/data-freshness) Bring your Data  (/data-catalog/bring-your-own-data) Dune Index Introduction  (/data-catalog/dune-index/introduction) Transactions Fees  (/data-catalog/dune-index/gas-fees) Net Transfers  (/data-catalog/dune-index/net-transfers) Transactions  (/data-catalog/dune-index/transactions) Curated Data Overview  (/data-catalog/curated/overview) EVM Solana Labels Prices EVM Networks Overview  (/data-catalog/evm/overview) Abstract Arbitrum One Arbitrum Nova Avalanche B3 Base Berachain Beacon Blast BNB BOB Boba Celo Corn Degen Ethereum Fantom Flare Gnosis Ink KAIA Linea Mantle Mode Optimism Polygon Polygon-zkEVM Ronin Scroll Sei Sophon Sonic Sepolia Viction World Chain zkSync Zora Ink Other Networks Aptos Bitcoin NEAR Polkadot Solana Starknet Stellar TON Tron Community Data Flashbots Farcaster GhostLogs Lens Reservoir Snapshot EVM Networks EVM Overview EVM chains on Dune ", "url": "https://docs.dune.com/data-catalog/evm/overview"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Create Queries Version History Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Web App Overview  (/web-app/overview) Create Queries Writing Queries  (/web-app/query-editor/query-window) Finding Tables  (/web-app/query-editor/data-explorer) Using Parameters  (/web-app/query-editor/parameters) Scheduling Queries  (/web-app/query-editor/query-scheduler) Query Lineage  (/web-app/query-editor/query-lineage) Version History  (/web-app/query-editor/version-history) Create Visualizations Decoding Contracts Create Dashboards  (/web-app/dashboards) Mint Dashboards  (/web-app/dashboard-minting) Teams on Dune  (/web-app/teams) Dune AI  (/web-app/dune-ai) Upload Data  (/web-app/upload-data) Share your work  (/web-app/embeds) Search content  (/web-app/search) Alerts  (/web-app/alerts) Bug Bounty  (/web-app/bug-bounty) Create Queries Version History Queries have a version history, where you can compare and revert to previous query versions. All queries come with version history, where you can compare and revert to previous query versions seamlessly.  You can access version history by clicking the \u201cclock\u201d icon on the top left of the query editor. \n History Length Everyone gets 30 days by default, you can upgrade your plan for longer history access. \n ", "url": "https://docs.dune.com/web-app/query-editor/version-history"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation SVM Token Balances (Beta) Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune Echo Overview  (/echo/overview) EVM SVM GET Token Balances (Beta)  (/echo/svm/balances) GET Transactions (Beta)  (/echo/svm/transactions) React Hooks  (/echo/hooks) Proxy  (/echo/proxy) SVM Token Balances (Beta) This endpoint returns SVM token balances for an address for any token that the address has interacted with GET / echo / beta / balances / svm / {address} Try it The Token Balances API provides accurate and fast real time balances of the native, SPL and SPL-2022 tokens of accounts on supported SVM blockchains.\nData is typically available within 100 ms since a block was propagated to nodes. We currently support Solana and Eclipse. \n \n These endpoints are authenticated with a normal Dune API key. \n As we are in beta there might be changes. Please reach out to us using  this form  (https://forms.gle/8qmnUZ6ZwzRFC2VY6)  if you use this API. \n Specify  ?chains=all  to fetch balances for all supported chains. \n Specify  ?chains=solana,eclipse  to fetch balances only for select chains. \n Birdeye is used for price information \n Token metadata, such as symbols and decimals, are fetched from Birdeye using Jupiter\u2019s list of verified tokens. \n \n ", "url": "https://docs.dune.com/echo/svm/balances"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Dune Echo React Hooks Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune Echo Overview  (/echo/overview) EVM SVM React Hooks  (/echo/hooks) Proxy  (/echo/proxy) Dune Echo React Hooks We\u2019ve created an easy to use hooks package for React apps that you can use to plug in your applications. \n https://github.com/duneanalytics/hooks/  (https://github.com/duneanalytics/hooks/) \n Currently, only EVM APIs are supported in the hooks package, but we will eventually enable all APIs. \n \n Token Balances  (./evm/balances) : Access accurate and fast real time balances of native and ERC20 tokens of accounts on EVM blockchains. \n Transactions  (./evm/transactions) : Access transactions for accounts in real time across EVM blockchains. \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /echo/hooks) Transactions (Beta)  (/echo/svm/transactions) Proxy  (/echo/proxy) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/echo/hooks"}
{"content": "\u200b Overview \n Dune and its community are building a collection of curated data tables that make it easier to query and analyze blockchain data. These tables are built using dbt, a tool that allows you to transform data in your warehouse using SQL and Jinja templating. We sometimes refer to these tables as  spells  and the collection of them as  spellbook . \n The curated data tables are built on top of raw data tables and provide a high-level view of the data. For example, the  dex.trades  table aggregates data from multiple sources to provide a comprehensive view of all trades on decentralized exchanges. \n The curated data tables are maintained in the  Spellbook repository  (https://github.com/duneanalytics/spellbook)  and are available for anyone to use \n Here is a non-exhaustive list of some of the curated data tables available in Spellbook: \n \n ", "url": "https://docs.dune.com/data-catalog/curated/overview#overview"}
{"content": "\u200b Benefits of curated data Tables \n Curated data tables provide several benefits: \n \n Simplified Queries : curated data tables make it easier to query and analyze blockchain data by providing a high-level view of the data. \n Consistent Data Models : The curated data tables follow a consistent data model, making it easier to combine data from different sources. \n Community Contributions : The curated data tables are maintained by the Dune community, so anyone can contribute to them and improve the data quality. \n \n ", "url": "https://docs.dune.com/data-catalog/curated/overview#benefits-of-curated-data-tables"}
{"content": "\u200b Resources \n Spellbook Repo Go to the dbt github repo with over 400+ contributors. All models live here.  (https://github.com/duneanalytics/spellbook) Model Docs Find the native dbt documentation for all models in spellbook.  (https://spellbook-docs.dune.com/) dbt practices in Spellbook Docs for contributing to spellbook and dbt best practices.  (https://github.com/duneanalytics/spellbook/tree/main/docs) Adding to Sector Models Learn to contribute to sector models like dex.trades and nft.trades tables  (https://github.com/duneanalytics/spellbook/blob/main/models/_sector/dex/readme.md) Adding a token to prices Learn to add a token to our prices.usd tracking in a PR  (https://github.com/duneanalytics/spellbook/blob/main/models/prices/README.md) Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/curated/overview) Transactions  (/data-catalog/dune-index/transactions) Overview  (/data-catalog/curated/evm/overview) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Overview  (#overview) Benefits of curated data Tables  (#benefits-of-curated-data-tables) Resources  (#resources)", "url": "https://docs.dune.com/data-catalog/curated/overview#resources"}
{"content": "\u200b Column Descriptions of the Transaction object \n Column Description Type address Wallet                   address string block_slot Block\u2019s sequential index. string block_time Timestamp of block creation. timestamp chain Name of the blockchain string raw_transaction Raw transaction data from the RPC node at the time of ingestion object \n See  getTransaction RPC Method  (https://solana.com/docs/rpc/http/gettransaction)  for more details about  raw_transaction . \n ", "url": "https://docs.dune.com/echo/svm/transactions#column-descriptions-of-the-transaction-object"}
{"content": "\u200b Ordering \n The data is ordered by descending block time, so that new transactions will always be delivered first. \n ", "url": "https://docs.dune.com/echo/svm/transactions#ordering"}
{"content": "\u200b Pagination \n This endpoint is using cursor based pagination. You can use the  limit  parameter to define the maximum page size.\nResults might at times be less than the maximum page size.\nThe  next_offset  value is included in the initial response and can be utilized to fetch the next page of results by passing it as the  offset  query parameter in the next request. \n You can only use the value from  next_offset  to set the  offset  parameter of the next page of results. Using your own  offset  value will not have any effect. Headers \u200b  (#parameter-x-dune-api-key) X-Dune-Api-Key string required API key to access the service Path Parameters \u200b  (#parameter-address) address string required Wallet to get transactions for Query Parameters \u200b  (#parameter-offset) offset string | null The offset to paginate through result sets. This is a cursor being passed from the previous response, only use what the backend has returned on previous responses. \u200b  (#parameter-limit) limit integer | null Maximum number of transactions to return Required range:  x > 0 Response 200 - application/json \u200b  (#response-transactions) transactions object[] required Show   child attributes \u200b  (#response-transactions-address) transactions. address string required \u200b  (#response-transactions-block-slot) transactions. block_slot integer required Required range:  x > 0 \u200b  (#response-transactions-chain) transactions. chain string required \u200b  (#response-transactions-raw-transaction) transactions. raw_transaction object required \u200b  (#response-transactions-block-time) transactions. block_time integer \u200b  (#response-next-offset) next_offset string | null Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /echo/svm/transactions) Token Balances (Beta)  (/echo/svm/balances) React Hooks  (/echo/hooks) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/echo/svm/transactions#pagination"}
{"content": "\u200b Introduction to EVM Chains \n The Ethereum Virtual Machine (EVM) is the runtime environment for smart contracts in Ethereum. It\u2019s not only the cornerstone of Ethereum but also serves as a standard for decentralized applications across various blockchain networks. Due to its robustness and developer-friendly attributes, numerous blockchains have adopted the EVM framework, enabling them to leverage Ethereum\u2019s thriving ecosystem and interoperability. \n ", "url": "https://docs.dune.com/data-catalog/evm/overview#introduction-to-evm-chains"}
{"content": "\u200b EVM Chains \n We provide the most comprehensive data catalog for Ethereum Mainnet and EVM-compatible rollups, sidechains and other layer 2 solutions.\nAll EVM chains on Dune have raw data, decoded data and curated data tables available. \n e.g. here are the available data sets for Ethereum Mainnet: \n Raw data  (./ethereum/raw/transactions) Decoded data  (./ethereum/decoded/overview) Curated data  (/data-catalog/curated/overview) \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /data-catalog/evm/overview) Latest Prices  (/data-catalog/curated/prices/prices_latest) Overview  (/data-catalog/evm/abstract/overview) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Introduction to EVM Chains  (#introduction-to-evm-chains) EVM Chains  (#evm-chains)", "url": "https://docs.dune.com/data-catalog/evm/overview#evm-chains"}
{"content": "\u200b Start of a new version \n The first time you save a query (whether it is forked or freshly created), there will be an initial commit to the query history. If you\u2019ve forked the query, you won\u2019t be able to access the original query\u2019s edit history - it starts anew for you. \n \n ", "url": "https://docs.dune.com/web-app/query-editor/version-history#start-of-a-new-version"}
{"content": "\u200b Saving and naming versions \n You can save a new version at any time by running your query. If you leave the page without saving/running, the new version will be lost! \n \n You can then edit the metadata of the saved version to make it easier to find in the future. \n \n ", "url": "https://docs.dune.com/web-app/query-editor/version-history#saving-and-naming-versions"}
{"content": "\u200b Comparing and reverting versions \n Here\u2019s the main feature: you can now easily compare diffs with previous versions, and then revert if you want to.  The reverted query is saved as a new version in the query history. \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /web-app/query-editor/version-history) Query Lineage  (/web-app/query-editor/query-lineage) Create Graphs  (/web-app/visualizations/charts-graphs) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Start of a new version  (#start-of-a-new-version) Saving and naming versions  (#saving-and-naming-versions) Comparing and reverting versions  (#comparing-and-reverting-versions)", "url": "https://docs.dune.com/web-app/query-editor/version-history#comparing-and-reverting-versions"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Web App Search content Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Web App Overview  (/web-app/overview) Create Queries Create Visualizations Decoding Contracts Create Dashboards  (/web-app/dashboards) Mint Dashboards  (/web-app/dashboard-minting) Teams on Dune  (/web-app/teams) Dune AI  (/web-app/dune-ai) Upload Data  (/web-app/upload-data) Share your work  (/web-app/embeds) Search content  (/web-app/search) Alerts  (/web-app/alerts) Bug Bounty  (/web-app/bug-bounty) Web App Search content Get the most out of Dune\u2019s powerful content search functionality Leverage Dune\u2019s powerful search functionality to find exactly what you need \n You can access Dune\u2019s search functionality everywhere in the Dune App through the search box in the top bar. If you want to refine your searches, you can click on the type of content you\u2019re interested in (e.g. Dashboards) to navigate to an extended results list: \n \n ", "url": "https://docs.dune.com/web-app/search"}
{"content": "\u200b Column Descriptions \n Column Description Type request_time Time of request timestamp response_time Time of response timestamp wallet_address Wallet address string chain Name of blockchain of token string address ERC20 contract address or blockchain name for native token string amount Amount of token owned in WEI double symbol Symbol of token, if avilable string decimals Decimals of token, if available double price_usd Current price of token, if available double value_usd Current value of token owned, if available double \n ", "url": "https://docs.dune.com/echo/svm/balances#column-descriptions"}
{"content": "\u200b Pagination \n This endpoint is using cursor based pagination. You can use the  limit  parameter to define the maximum page size.\nResults might at times be less than the maximum page size.\nThe  next_offset  value is passed back by the initial response and can be used to fetch the next page of results, by passing it as the  offet  query parameter in the next request. \n You can only use the value from  next_offset  to set the  offset  parameter of the next page of results. Using your own  offset  value will not have any effect. Headers \u200b  (#parameter-x-dune-api-key) X-Dune-Api-Key string required API key to access the service Path Parameters \u200b  (#parameter-address) address string required Wallet to get balances for Query Parameters \u200b  (#parameter-chains) chains string | null Either 'all' or a comma separated list of chains to get balances for. Currently supports 'solana' and 'eclipse' \u200b  (#parameter-offset) offset string | null The offset to paginate through result sets. This is a cursor being passed from the previous response, only use what the backend returns here. \u200b  (#parameter-limit) limit integer | null Maximum number of transactions to return Required range:  x > 0 Response 200 - application/json \u200b  (#response-balances) balances object[] required Show   child attributes \u200b  (#response-balances-address) balances. address string required \u200b  (#response-balances-amount) balances. amount string required \u200b  (#response-balances-chain) balances. chain string required \u200b  (#response-balances-chain-id) balances. chain_id integer \u200b  (#response-balances-decimals) balances. decimals integer | null \u200b  (#response-balances-price-usd) balances. price_usd number | null \u200b  (#response-balances-symbol) balances. symbol string | null \u200b  (#response-balances-token-metadata) balances. token_metadata object Show   child attributes \u200b  (#response-balances-token-metadata-logo) balances.token_metadata. logo string | null \u200b  (#response-balances-token-metadata-url) balances.token_metadata. url string | null \u200b  (#response-balances-value-usd) balances. value_usd number | null \u200b  (#response-response-time) response_time string required \u200b  (#response-wallet-address) wallet_address string required \u200b  (#response-errors) errors object Show   child attributes \u200b  (#response-errors-token-errors) errors. token_errors object[] required Show   child attributes \u200b  (#response-errors-token-errors-address) errors.token_errors. address string required \u200b  (#response-errors-token-errors-chain-id) errors.token_errors. chain_id integer required \u200b  (#response-errors-token-errors-description) errors.token_errors. description string \u200b  (#response-next-offset) next_offset string | null \u200b  (#response-request-time) request_time string | null Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /echo/svm/balances) Supported Chains (Transactions)  (/echo/evm/transactions-chains) Transactions (Beta)  (/echo/svm/transactions) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/echo/svm/balances#pagination"}
{"content": "\u200b Refining your results \n Alternatively, you can head over to the  Discover page  (https://dune.com/browse/dashboards)  where you will find the extended results page, with additional filters to apply, such as ranking by trending, favorites or recently created. You will find your search input which you can edit alongside these filters to refine your search on the sidebar next to the results list: \n \n You can edit your input and the results will immediately update to reflect. You can also rank by: \n \n Favorites, which combined with the time filter reflects the number of favorites received over that time period. This is useful to capture recently popular content. \n Trending, which is an internal metric of content popularity over the short term, across 3 different time windows. \n New, which ranks by the content\u2019s \u201ccreated at\u201d timestamp. \n \n ", "url": "https://docs.dune.com/web-app/search#refining-your-results"}
{"content": "\u200b Advanced Search \n You can apply advanced filters to your search, in any of Dune\u2019s search fields (in the top bar or in the sidebar in Discover). \n For example, you can search for  nft tags:nft,opensea,looksrare author:hildobby,denze,rantum,cryptuschrist,sealaunch  or  tags:usdc,usdt,dai -tags:ust  for more relevant and precise results. \n These are the filters we currently support: \n Filter Description Example title Search by title. Wrap your value in double quotes if your input has spaces. title:usdc  or  title:\"dex tracker\" tags Search by tag or tags. tags:usdc author Search by author. author:dune description Only applicable to Queries, find matches in the description. description:usdc code Only applicable to Queries, find matches in the code. code:\"from dex.trades\" created_before Only include matches created before or at a given date. created_before:2023-01-30 created_after Only include matches created after or at a given date. created_after:2023-01-30 updated_before Only include matches updated before or at a given date. updated_before:2023-01-30 updated_after Only include matches updated before or at a given date. updated_after:2023-01-30 \n Notes: \n \n You can combine multiple filters together with arbitrary text. \n You can also combine multiple values by separating them with a comma ( , ) such as  stablecoins tags:usdc,usdt . \n You can wrap your input in double quotes ( \" ) for terms that have spaces, such as  title:\"layer zero\" . \n You can also exclude results by prefixing it with a minus sign ( - ) (e.g.  -tags:ethereum ). \n \n Advanced Search is currently only supported for Dashboards and Queries. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /web-app/search) Share your work  (/web-app/embeds) Alerts  (/web-app/alerts) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Refining your results  (#refining-your-results) Advanced Search  (#advanced-search)", "url": "https://docs.dune.com/web-app/search#advanced-search"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Create Visualizations Create counters Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Web App Overview  (/web-app/overview) Create Queries Create Visualizations Create Graphs  (/web-app/visualizations/charts-graphs) Create counters  (/web-app/visualizations/counters) Formatting Tables  (/web-app/visualizations/tables) Decoding Contracts Create Dashboards  (/web-app/dashboards) Mint Dashboards  (/web-app/dashboard-minting) Teams on Dune  (/web-app/teams) Dune AI  (/web-app/dune-ai) Upload Data  (/web-app/upload-data) Share your work  (/web-app/embeds) Search content  (/web-app/search) Alerts  (/web-app/alerts) Bug Bounty  (/web-app/bug-bounty) Create Visualizations Create counters Counters give you a way to display a single number prominently. ", "url": "https://docs.dune.com/web-app/visualizations/counters"}
{"content": "\u200b Counters \n Counters are a great way to provide your audience with immediate \u201con a glance\u201d stats. \n \n ", "url": "https://docs.dune.com/web-app/visualizations/counters#counters"}
{"content": "\u200b Configuring your Counter \n \n \u200b  (#counter-options) Counter options \n In this section you can define what kind of data the counter should display: \n Display Title \n The Title will appear in all instances of this graph prominently at the top. \n If left blank, the Query name will be the only thing that is left standing. \n \n Column Selection \n In this field, you can define which column the counter should show. \n \n Row Selection \n This field can be used to define which row of the underlying data table you want displayed, e.g., row 1. \n Usually, this requires you to sort or limit your Query results in order for row 1 to show the wanted results. \n \n \u200b  (#formatting) Formatting \n This section is where you can adjust how your numerical data is displayed. \n Prefix Setting \n This field allows you to define a prefix for your counter value. \n e.g.:  $ ,  \u20ac ,  \u039e ,  \u0e3f \n \n Suffix Setting \n This field allows you to define a suffix for your counter value. \n \n Label Setting \n This field allows you to define a label for your counter value. \n The label will appear beneath the counter value as text. \n \n Decimal Setting \n In this field, you can choose how many decimals you want displayed for your counter. \n \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /web-app/visualizations/counters) Create Graphs  (/web-app/visualizations/charts-graphs) Formatting Tables  (/web-app/visualizations/tables) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Counters  (#counters) Configuring your Counter  (#configuring-your-counter) Counter options  (#counter-options) Formatting  (#formatting)", "url": "https://docs.dune.com/web-app/visualizations/counters#configuring-your-counter"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Create Visualizations Create Graphs Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Web App Overview  (/web-app/overview) Create Queries Create Visualizations Create Graphs  (/web-app/visualizations/charts-graphs) Create counters  (/web-app/visualizations/counters) Formatting Tables  (/web-app/visualizations/tables) Decoding Contracts Create Dashboards  (/web-app/dashboards) Mint Dashboards  (/web-app/dashboard-minting) Teams on Dune  (/web-app/teams) Dune AI  (/web-app/dune-ai) Upload Data  (/web-app/upload-data) Share your work  (/web-app/embeds) Search content  (/web-app/search) Alerts  (/web-app/alerts) Bug Bounty  (/web-app/bug-bounty) Create Visualizations Create Graphs Charts are good for condensing data points into a Visualization. Visualizations make your data come to life! You can create Visualizations from any results of a query. \n \n On Dune you can create a variety of different graphs and charts to visualize your data. \n Bar Charts \n Area Charts \n Scatter Charts \n Line Charts \n Pie Charts \n Mixed Graphs \n You can mix all of these graph types in one Visualization, as long as your base graph isn\u2019t a Pie chart. \n All graph Visualizations share a common set of editing options, see the tabs below for how to configure each. \n \n ", "url": "https://docs.dune.com/web-app/visualizations/charts-graphs"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Web App Upload Data Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Web App Overview  (/web-app/overview) Create Queries Create Visualizations Decoding Contracts Create Dashboards  (/web-app/dashboards) Mint Dashboards  (/web-app/dashboard-minting) Teams on Dune  (/web-app/teams) Dune AI  (/web-app/dune-ai) Upload Data  (/web-app/upload-data) Share your work  (/web-app/embeds) Search content  (/web-app/search) Alerts  (/web-app/alerts) Bug Bounty  (/web-app/bug-bounty) Web App Upload Data Upload your own data to Dune Easily upload your own data to Dune \n This feature allows you to upload any csv file to Dune and query it like any other table in Dune. Currently, we only supports uploading CSV files with a maximum size of 200 MB. The app will return an error if the file size exceeds this limit. \n Additionally, column names in the table can\u2019t start with a special character or digits. \n The files you upload will be queryable via the schema  dune.team_name.dataset_name . For example, if you upload a file called  energy_data.csv  to the team  dune  and name the dataset  energy_data , you will be able to query the data via  dune.dune.energy_data . \n You\u2019ll be able to query for your data in any query. \n Select   *   from  dune . dune . dataset_energy_data \n \n All data uploaded is public and can be accessed by anyone. \n Private data uploads are available only on the  premium plan. \n You can also upload data via the API. Check out the  API documentation  (/api-reference/tables/endpoint/upload)  for more information. \n \n \n Click on the \u201cUpload Data\u201d button in the menu of the Dune UI. \n Select the csv file you want to upload. \n Name your table and add a description. \n Click on save to finish the upload. \n \n ", "url": "https://docs.dune.com/web-app/upload-data"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Create Queries Writing Queries Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Web App Overview  (/web-app/overview) Create Queries Writing Queries  (/web-app/query-editor/query-window) Finding Tables  (/web-app/query-editor/data-explorer) Using Parameters  (/web-app/query-editor/parameters) Scheduling Queries  (/web-app/query-editor/query-scheduler) Query Lineage  (/web-app/query-editor/query-lineage) Version History  (/web-app/query-editor/version-history) Create Visualizations Decoding Contracts Create Dashboards  (/web-app/dashboards) Mint Dashboards  (/web-app/dashboard-minting) Teams on Dune  (/web-app/teams) Dune AI  (/web-app/dune-ai) Upload Data  (/web-app/upload-data) Share your work  (/web-app/embeds) Search content  (/web-app/search) Alerts  (/web-app/alerts) Bug Bounty  (/web-app/bug-bounty) Create Queries Writing Queries The query editor allows you to query blockchain data using DuneSQL. \n The Query Editor is where you construct your queries. You\u2019ll probably spend most of your time here. \n \n This section of the documentation describes the UI features of the query editor. \n To learn more about our query engine, check out the  query-engine  (query-engine/index.mdx)  section of the documentation. \n ", "url": "https://docs.dune.com/web-app/query-editor/query-window"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Create Visualizations Formatting Tables Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Web App Overview  (/web-app/overview) Create Queries Create Visualizations Create Graphs  (/web-app/visualizations/charts-graphs) Create counters  (/web-app/visualizations/counters) Formatting Tables  (/web-app/visualizations/tables) Decoding Contracts Create Dashboards  (/web-app/dashboards) Mint Dashboards  (/web-app/dashboard-minting) Teams on Dune  (/web-app/teams) Dune AI  (/web-app/dune-ai) Upload Data  (/web-app/upload-data) Share your work  (/web-app/embeds) Search content  (/web-app/search) Alerts  (/web-app/alerts) Bug Bounty  (/web-app/bug-bounty) Create Visualizations Formatting Tables Tables are a way to display your data in a tabular format. Tables are the default Visualization whenever you create and run a Query. \n \n You can also make more Tables to display your data differently using the  New visualization  button and drop down menu: \n \n ", "url": "https://docs.dune.com/web-app/visualizations/tables"}
{"content": "\u200b Visualization Configuration Options \n Chart options Result data X-axis options Y-axis options Series options Pie options This section allows you to define how to display your data. Title \n The title will appear in all instances of this graph prominently at the top. \n The graph will always keep the name of the Query, even if you edit this. \n Show chart legend \n Ticking this box will enable or disable the legend for the chart. \n Enable stacking \n If applicable, ticking this box will stack the chart values on top of each other based on the x-axis values. \n If this is not turned on, the values will be plotted individually on the y-axis. \n The calculation underpinning this will always group the value corresponding to one value on the x-axis. Make sure your data is clean in able for this to work (avoid gaps in your data). \n Normalize to percentage data \n This will normalize the chart to display percentage values of the chosen data table. \n The calculation underpinning this will always group the value corresponding to one value on the x-axis. Make sure your data is clean in able for this to work (avoid gaps in your data). \n Show data labels \n Ticking this box leads to the display of the individual datapoints inside of the graph. \n This only makes sense in cases where you have few datapoints that are spread out far enough from each other to not overlap. \n \n ", "url": "https://docs.dune.com/web-app/visualizations/charts-graphs#visualization-configuration-options"}
{"content": "\u200b X/Y-axis Tick and Label formats \n \n Tick formats change how numeric values and axis labels in your graphs are displayed. \n Here\u2019s how to format them: \n Starting Value Tick/Label format Output Description 1256784.3745 [blank] 1256784.3745000 Displays the number 7 decimal precision. 1256784.3745 0 1256784 Displays only the integer. 1256784.3745 0,0 1,256,784 Only displays the integer with comma separation. 1256784.3745 0,0.00 1,256,784.38 Displays the number with  [x]  decimal precision, where  [x]  is the number of  0  you add after the decimal point. 1256784.3745 0.0a 1.2M Displays the number with  [x]  precision and a letter based on the number\u2019s  1e[y]  power (eg \u201cm\u201d for million, \u201cb\u201d for billion) 1256784.3745 $0.0a $1.2M Adds a \u201d$\u201d to the number. Works with all formats above though use of the  a  suffix is recommended. Currently the only \u201d$\u201d is the only supported currency symbol. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /web-app/visualizations/charts-graphs) Version History  (/web-app/query-editor/version-history) Create counters  (/web-app/visualizations/counters) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Visualization Configuration Options  (#visualization-configuration-options) X/Y-axis Tick and Label formats  (#x-y-axis-tick-and-label-formats)", "url": "https://docs.dune.com/web-app/visualizations/charts-graphs#x-y-axis-tick-and-label-formats"}
{"content": "\u200b Querying for the data in Dune \n Once the data has been uploaded, you can explore it in the my data section in the data explorer: \n \n You can query for your data in any query. \n Select   *   from  dune . dune . dataset_energy_data \n \n To check whether the datatypes are correctly inferred, you can check the table details in the  data explorer  (/web-app/query-editor/data-explorer) . \n ", "url": "https://docs.dune.com/web-app/upload-data#querying-for-the-data-in-dune"}
{"content": "\u200b Updating data \n Updating data is only possible via the  API  (/api-reference/quickstart/tables-eg) . In the UI you can only replace the data with a new (updated) file that carries the same name. \n However, you can use the \u201cquery a query\u201d feature to query multiple .csv files at once. \n For example: \n --query_2441513 \n \n Select   *   from  dune . dune . dataset_energy_data_1 \n \n UNION   ALL \n \n Select   *   from  dune . dune . dataset_energy_data_2 \n \n -- add more as it becomes relevant \n \n In your main query, you could then simply refer to this query. \n Select   *   from  ethereum . transactions  t \n left   join  query_2441513 q  on  q . address  =  t . \"from\" \n \n ", "url": "https://docs.dune.com/web-app/upload-data#updating-data"}
{"content": "\u200b Private data \n If you don\u2019t want to share your data with the world, you can also upload private data. Private data is only visible to you and your team members. \n To upload private data,  you need to be on the premium plan . If you are on the premium plan, you can upload private data by toggling the \u201cmake table private\u201d switch in the upload data modal. \n You can also change the privacy settings of a dataset after it has been uploaded. To do so, go to settings -> data page and click on the three dots next to the dataset you want to change the privacy settings for. Then click on \u201cmake table private\u201d to make the table private or \u201cmake table public\u201d to make it public. \n ", "url": "https://docs.dune.com/web-app/upload-data#private-data"}
{"content": "\u200b Deleting data \n You can delete your data via your settings page. \n \n \n Click on the \u201csettings\u201d button in the menu of the Dune UI. \n Click on \u201cdata\u201d. \n Find the dataset you want to delete. \n Click on the three dots to open the options for the dataset. \n Click on \u201cdelete dataset\u201d. \n confirm the deletion. \n The dataset is now deleted. \n \n ", "url": "https://docs.dune.com/web-app/upload-data#deleting-data"}
{"content": "\u200b Large Amounts of Data \n If you want to share valuable off-chain data on Dune with your community, we are happy to discuss custom arrangements. Please reach indicate your interest via this  form  (https://bit.ly/dune-data-integration) . \n This is only applicable for datasets with positive externalities for the Dune community. Examples include: \n \n Farcaster  (/data-catalog/community/farcaster) \n Reservoir  (/data-catalog/community/reservoir) \n Flashbots  (/data-catalog/community/flashbots) \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /web-app/upload-data) Dune AI  (/web-app/dune-ai) Share your work  (/web-app/embeds) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Querying for the data in Dune  (#querying-for-the-data-in-dune) Updating data  (#updating-data) Private data  (#private-data) Deleting data  (#deleting-data) Large Amounts of Data  (#large-amounts-of-data)", "url": "https://docs.dune.com/web-app/upload-data#large-amounts-of-data"}
{"content": "\u200b Query editor \n The Query editor is pretty straightforward. It\u2019s a text editor where you can write SQL code. \n The editor has a few features that make your life easier: \n \n Autocomplete  (/_sites/docs.dune.com/web-app/query-editor/query-window#autocomplete) \n Run selection  (/_sites/docs.dune.com/web-app/query-editor/query-window#run-selection) \n Explain Query  (/_sites/docs.dune.com/web-app/query-editor/query-window#explain-query) \n \n ", "url": "https://docs.dune.com/web-app/query-editor/query-window#query-editor"}
{"content": "\u200b Autocomplete \n The autocomplete feature will bring up DuneSQL keywords, as well as tables and aliases you\u2019ve already included in your Query.\nYou can always bring up the autocomplete menu by pressing  ctrl/cmd + space . \n Turn it on/off in the settings. \n ", "url": "https://docs.dune.com/web-app/query-editor/query-window#autocomplete"}
{"content": "\u200b Run selection \n To save yourself time while testing and debugging your Queries, you can run just a part of your Query. \n To do this, highlight a part of your Query. You\u2019ll then see the Run button turn into a Run selection button. \n \n ", "url": "https://docs.dune.com/web-app/query-editor/query-window#run-selection"}
{"content": "\u200b Explain Query \n The explain query feature utilizes ChatGPT4 to explain your query in plain English. It\u2019s a great way to get a quick overview of what your query does. \n Simply click the explain query button to see a GPT4 generated explanation of the query. \n \n ", "url": "https://docs.dune.com/web-app/query-editor/query-window#explain-query"}
{"content": "\u200b Shortcuts \n Here are a handful of shortcuts to make crafting Queries easier: \n Shortcut Action ctrl + enter execute the Query ctrl + # or / comments out the selected code ctrl + space brings up a list of keywords crtl + z undoes your last changes ctrl + y redoes your last changes ctrl + f search for keywords ctrl + h search and replace keywords \n These shortcuts work on US/UK Keyboards and might vary based on the language setting on your device. \n ", "url": "https://docs.dune.com/web-app/query-editor/query-window#shortcuts"}
{"content": "\u200b Query results \n The Query results are displayed in a table below the Query editor. \n You can sort the results by clicking on the column headers. Click once to sort ascending, click again to sort descending.\nResults are paginated, so you can click through the pages to see more results. Each page shows 25 results. \n You can full text search the results by using the search bar below the results table. \n You can format the results according to the rules laid out in the  tables section  (web-app/visualizations/tables)  of the documentation. \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /web-app/query-editor/query-window) Overview  (/web-app/overview) Finding Tables  (/web-app/query-editor/data-explorer) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Query editor  (#query-editor) Autocomplete  (#autocomplete) Run selection  (#run-selection) Explain Query  (#explain-query) Shortcuts  (#shortcuts) Query results  (#query-results)", "url": "https://docs.dune.com/web-app/query-editor/query-window#query-results"}
{"content": "\u200b Configuring your Table \n \n \u200b  (#table-options) Table options \n Title \n The Title appears at the top of your Table. \n Leaving default value ( Table ) or making this blank makes your Table title the same as your Query\u2019s title/name. \n Adding any other value to this field will add that value first, followed by your Query Name: \n \n Note: the default value for \u201cQuery Results\u201d is treated like an added value. \n \u200b  (#column-x-options) \u201dColumn  [x] :\u201d options \n You can configure the following options for each column in your Table \n Title Align Format Hide Column The Title appears at the top of your Table. Leaving this blank makes your column title the same as its Dune database name. \n \u200b  (#numerical-column-options) Numerical Column options \n Columns that return numerical data have these additional options: \n Type Colored Values \n Normal  simply displays the column\u2019s numerical data. \n Progress bar  shows the column\u2019s numerical data with a progress bar visual that is \u201cfull\u201d for the column\u2019s highest value and \u201cnearly empty\u201d for the column\u2019s lowest value, with the rest of the data ranging in between: \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /web-app/visualizations/tables) Create counters  (/web-app/visualizations/counters) Decoding Contracts  (/web-app/decoding/decoding-contracts) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Configuring your Table  (#configuring-your-table) Table options  (#table-options) \u201dColumn [x]:\u201d options  (#column-x-options) Numerical Column options  (#numerical-column-options)", "url": "https://docs.dune.com/web-app/visualizations/tables#configuring-your-table"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Web App Dune AI Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Web App Overview  (/web-app/overview) Create Queries Create Visualizations Decoding Contracts Create Dashboards  (/web-app/dashboards) Mint Dashboards  (/web-app/dashboard-minting) Teams on Dune  (/web-app/teams) Dune AI  (/web-app/dune-ai) Upload Data  (/web-app/upload-data) Share your work  (/web-app/embeds) Search content  (/web-app/search) Alerts  (/web-app/alerts) Bug Bounty  (/web-app/bug-bounty) Web App Dune AI Wand is a beta suite of tools for writing SQL queries with the help of large language models. Dune is launching a beta suite of tools for writing SQL queries with the help of large language models. \n ", "url": "https://docs.dune.com/web-app/dune-ai"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Web App Bug Bounty Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Web App Overview  (/web-app/overview) Create Queries Create Visualizations Decoding Contracts Create Dashboards  (/web-app/dashboards) Mint Dashboards  (/web-app/dashboard-minting) Teams on Dune  (/web-app/teams) Dune AI  (/web-app/dune-ai) Upload Data  (/web-app/upload-data) Share your work  (/web-app/embeds) Search content  (/web-app/search) Alerts  (/web-app/alerts) Bug Bounty  (/web-app/bug-bounty) Web App Bug Bounty Found a security issue within our application? We are updating our Bug Bounty reward structure to ensure the program\u2019s sustainability while continuing to recognize the critical contributions of ethical hackers.\nThese adjustments will take effect on December 10th, 2024. Reports submitted before this date will be evaluated under the previous reward structure.\nFor details, refer to the  \u201cBounty Sizes\u201d  (/_sites/docs.dune.com/web-app/bug-bounty#bounty-sizes)  section below. \n If you believe you have discovered a security issue within our web application or API, we highly encourage you to report it to us. We appreciate the efforts of ethical hackers and reward those who responsibly disclose vulnerabilities. \n Please submit any vulnerability or bug discovered via this form:  https://forms.gle/NTK3FGMYRsAWKkY4A  (https://forms.gle/NTK3FGMYRsAWKkY4A) \n We do not accept email submissions of vulnerabilities. All reports must go through the form above to ensure they are tracked and processed appropriately. \n We aim to review and respond to submissions within 14 days. While we understand your eagerness to hear back, emailing us for updates will not speed up the review process. We appreciate your patience and cooperation as we work through each submission thoroughly.\nRepeated inquiries for updates via email may result in disqualification of the submission to ensure fairness and efficiency for all participants. \n We value transparency and will work with you to resolve any legitimate issues found. Your efforts help us maintain the security and trustworthiness of our platform. Thank you for your contribution to our security. \n ", "url": "https://docs.dune.com/web-app/bug-bounty"}
{"content": "\u200b Wand Create \n The Wand Create feature allows you to automatically generate SQL queries from natural language questions. It utilizes a suite of Dune-specific few-shot examples and automatically fetches table schemas to include in the prompt. (You must to explicitly include the relevant tables in your natural language question to include table schemas.) \n This feature simplifies the process of writing getting started writing a SQL query, especially for users who may not be familiar with the database structure. Your mileage may vary depending on the complexity of your question and how well the underlying tables are suited to answering it. We recommend using this feature as a starting point and then refining the query using the Wand Edit feature. \n You can find this feature in the query editor and click the wand logo in the top right corner to open the Wand bar. An empty query page should open in Create mode and you can toggle between Create and Edit modes using the buttons in the top right corner of the query editor.\n \n ", "url": "https://docs.dune.com/web-app/dune-ai#wand-create"}
{"content": "\u200b Wand Edit \n The Wand Edit feature allows you to edit an existing SQL query based on a natural language question. Similar to query generation, any additional tables required should be explicitly included in the natural language edit request to make use of schemas. This feature simplifies the process of refining and fine-tuning SQL queries generated by the system or existing queries in your application. \n You can find this feature in the query editor and click the wand logo in the top right corner to open the Wand bar. A non-empty query page should open in Edit mode and you can toggle between Create and Edit modes using the buttons in the top right corner of the query editor. \n \n Below are some examples of use cases for the Wand Edit feature: \n \u200b  (#adding-statistics-to-a-query) Adding statistics to a query \n Add the remaining components of a five point summary. \n Original query: \n      SELECT   \n         date_trunc ( \\' day \\' ,  block_time )   AS   time \n          ,   ( PERCENTILE_CONT ( 0.5 )   WITHIN   GROUP   ( ORDER   BY  gas_price ) ) / 1 e9   AS  median_gas \n          ,   COUNT ( * )   AS  daily_tx \n      FROM  ethereum . transactions \n      GROUP   BY   time \n \n Edited query: \n SELECT   \n     date_trunc ( 'day' ,  block_time )   AS   time \n      ,   MIN ( gas_price ) / 1 e9  AS  min_gas \n      ,   ( PERCENTILE_CONT ( 0.25 )   WITHIN   GROUP   ( ORDER   BY  gas_price ) ) / 1 e9  AS  lower_quartile_gas \n      ,   ( PERCENTILE_CONT ( 0.5 )   WITHIN   GROUP   ( ORDER   BY  gas_price ) ) / 1 e9   AS  median_gas \n      ,   ( PERCENTILE_CONT ( 0.75 )   WITHIN   GROUP   ( ORDER   BY  gas_price ) ) / 1 e9  AS  upper_quartile_gas \n      ,   MAX ( gas_price ) / 1 e9  AS  max_gas \n      ,   COUNT ( * )   AS  daily_tx \n FROM  ethereum . transactions \n GROUP   BY   time \n \n \u200b  (#adding-a-join-to-a-query) Adding a join to a query \n Join nft.wash_trades to nft.trades to get the percentage of sellers who have been involved in wash trading. \n Original query: \n SELECT   date_trunc ( 'day' ,  block_time )   as   day ,   COUNT ( distinct  seller )   as  sellers \n FROM  nft . trades \n WHERE  project  =   'blur' \n GROUP   BY   1 \n \n Edited query: \n SELECT    \n     date_trunc ( 'day' ,  t . block_time )   as   day ,   \n      COUNT ( distinct  t . seller )   as  sellers ,   \n      COUNT ( distinct  wt . seller )   as  wash_traders ,   \n      ( COUNT ( distinct  wt . seller )   *   100.0   /   COUNT ( distinct  t . seller ) )   as  wash_traders_percentage \n FROM   \n     nft . trades t \n LEFT   JOIN   \n     nft . wash_trades wt  ON  t . seller  =  wt . seller \n WHERE   \n     t . project  =   'blur' \n GROUP   BY   \n      1 \n \n \u200b  (#reformat-output) Reformat Output \n Return monthly volume with each year from 2023 to 2019 as a separate column \n Original query: \n SELECT \n  DATE_TRUNC ( 'month' ,  block_time ) , \n   SUM ( CAST ( amount_usd  AS   DOUBLE ) )   AS  usd_volume \n FROM \n  dex . trades  AS  t \n WHERE \n block_time  >  CAST ( '2019-01-01'   AS   TIMESTAMP ) \n GROUP   BY \n   1 \n \n Edited query: \n SELECT \n   DATE_TRUNC ( 'month' ,  block_time )   AS   month , \n    SUM ( CASE   WHEN  EXTRACT ( YEAR   FROM  block_time )   =   2019   THEN  CAST ( amount_usd  AS   DOUBLE )   ELSE   0   END )   AS  usd_volume_2019 , \n    SUM ( CASE   WHEN  EXTRACT ( YEAR   FROM  block_time )   =   2020   THEN  CAST ( amount_usd  AS   DOUBLE )   ELSE   0   END )   AS  usd_volume_2020 , \n    SUM ( CASE   WHEN  EXTRACT ( YEAR   FROM  block_time )   =   2021   THEN  CAST ( amount_usd  AS   DOUBLE )   ELSE   0   END )   AS  usd_volume_2021 , \n    SUM ( CASE   WHEN  EXTRACT ( YEAR   FROM  block_time )   =   2022   THEN  CAST ( amount_usd  AS   DOUBLE )   ELSE   0   END )   AS  usd_volume_2022 , \n    SUM ( CASE   WHEN  EXTRACT ( YEAR   FROM  block_time )   =   2023   THEN  CAST ( amount_usd  AS   DOUBLE )   ELSE   0   END )   AS  usd_volume_2023 \n FROM \n   dex . trades  AS  t \n WHERE \n  block_time  >=  CAST ( '2019-01-01'   AS   TIMESTAMP ) \n GROUP   BY \n    1 \n \n \u200b  (#adding-a-cte) Adding a CTE \n Add a CTE to calculate the number of mints with nft.mints by day and then return the average number of mints per day and join it to the existing query \n Original query: \n select \n  date_trunc ( 'day' ,  block_time )   as  dt \n   , count ( hash )   as  num_transactions \n   , count ( distinct   \"from\" )   as  users \n   , sum ( gas_used )   as  gas_used \n   , avg ( gas_used )   as  avg_gas_used \n   , avg ( gas_price ) / 1 e9  as  avg_gas_price \n from  ethereum . transactions \n where \n  success \n   and  block_time  >=  cast ( '2022-01-01'   as   date ) \n   and  date_trunc ( 'day' ,  block_time )   <  date_trunc ( 'day' ,   current_timestamp ) \n group   by   1 \n \n Updated query: \n WITH  daily_mints  AS   ( \n      SELECT   \n         date_trunc ( 'day' ,  block_time )   as  dt , \n          count ( * )   as  num_mints \n      FROM  nft . mints \n      WHERE   \n         block_time  >=  cast ( '2022-01-01'   as   date )   \n          and  date_trunc ( 'day' ,  block_time )   <  date_trunc ( 'day' ,   current_timestamp ) \n      GROUP   BY   1 \n ) \n \n SELECT   \n     et . dt , \n     et . num_transactions , \n     et . users , \n     et . gas_used , \n     et . avg_gas_used , \n     et . avg_gas_price , \n     dm . num_mints , \n      avg ( dm . num_mints )   over   ( )   as  avg_daily_mints \n FROM   ( \n      SELECT   \n         date_trunc ( 'day' ,  block_time )   as  dt , \n          count ( hash )   as  num_transactions , \n          count ( distinct   \"from\" )   as  users , \n          sum ( gas_used )   as  gas_used , \n          avg ( gas_used )   as  avg_gas_used , \n          avg ( gas_price ) / 1 e9  as  avg_gas_price \n      FROM  ethereum . transactions \n      WHERE   \n         success \n          and  block_time  >=  cast ( '2022-01-01'   as   date )   \n          and  date_trunc ( 'day' ,  block_time )   <  date_trunc ( 'day' ,   current_timestamp ) \n      GROUP   BY   1 \n )  et \n LEFT   JOIN  daily_mints dm  ON  et . dt  =  dm . dt \n \n ", "url": "https://docs.dune.com/web-app/dune-ai#wand-edit"}
{"content": "\u200b Wand Debug \n The Wand Debug feature helps fix SQL queries that have syntax errors. When an executed query encounters a syntax error, the Fix Query button should appear in the results/visualization panel. Clicking this button collect your query and the error message and send it to the Wand Debug feature. The Wand Debug feature will then attempt to fix the query and return the fixed query to you. If the Wand Debug feature is unable to fix the query, it will return the updated query with message indicating it is not fully debugged. The query submitted for debugging will be saved in your query history, so you can also recover it. \n You can find this feature in the results/visualization panel if you\u2019ve executed a query that failed on a syntax error. \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /web-app/dune-ai) Teams on Dune  (/web-app/teams) Upload Data  (/web-app/upload-data) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Wand Create  (#wand-create) Wand Edit  (#wand-edit) Adding statistics to a query  (#adding-statistics-to-a-query) Adding a join to a query  (#adding-a-join-to-a-query) Reformat Output  (#reformat-output) Adding a CTE  (#adding-a-cte) Wand Debug  (#wand-debug)", "url": "https://docs.dune.com/web-app/dune-ai#wand-debug"}
{"content": "\u200b Bounty Sizes \n Bounty sizes are determined at Dune\u2019s sole discretion. We consider the severity and impact of the vulnerability as well as the quality of the submission. The rubric we use to determine bug bounties is as follows: \n Level Example Maximum Bug Bounty 6. Severe Unauthorized access to any part of the platform - Ability to delete or manipulate user data or analytics Let\u2019s talk 5. Critical Unauthorized ability to execute arbitrary code on the server- Exploiting API endpoints to access restricted data Up to $5,000 4. High SQL injection leading to data exfiltration- Bypassing authentication mechanisms Up to $2,500 3. Medium Cross-site scripting (XSS)- CSRF that affects user accounts Up to $1,000 2. Low Security misconfigurations- Information leakage (server info, stack traces) Up to $250 1. Info Suggestions for improvements or best practices \n ", "url": "https://docs.dune.com/web-app/bug-bounty#bounty-sizes"}
{"content": "\u200b Duplicate Submissions Policy \n We value all security research, but we do not provide rewards for submissions that cover known issues already reported by other researchers or internally identified by our team. If your report is a duplicate, we will notify you of the status and appreciate your effort, but no bounty will be issued. \n ", "url": "https://docs.dune.com/web-app/bug-bounty#duplicate-submissions-policy"}
{"content": "\u200b Misuse of Stolen Credentials \n We value all security research, but issues stemming from stolen or compromised credentials (e.g., through malware or phishing attacks on user browsers) do not qualify as vulnerabilities in our systems and are therefore not eligible for a bounty. \n While these reports highlight potential risks, the security of user credentials lies outside the scope of this program. \n ", "url": "https://docs.dune.com/web-app/bug-bounty#misuse-of-stolen-credentials"}
{"content": "\u200b Bug Bounty Rules and Safe Harbor \n By participating in this program, you agree to abide by the following rules to help us maintain a secure environment for all users. \n \n Safe Harbor:  We authorize participants to test and report vulnerabilities in our systems, provided they act with due care and in good faith to minimize harm or disruption to our users and services. Actions conducted in compliance with the rules and within the scope of this program are considered authorized, and we will not pursue legal action or report you for such activities. If a third party challenges your research, we will confirm that it was authorized under this program. This protection applies only to our systems and does not extend to third-party property. If you are unsure about the scope or your actions, please contact us for clarification. \n Ethical Conduct:  Participants must adhere to the highest standards of ethical, good-faith behavior. We reserve the right to disqualify submissions from researchers who do not follow these rules or engage in unethical behavior. \n Responsible Reporting:  Report findings directly to us via the designated form and provide sufficient details to reproduce and address the issue. Do not publicly disclose vulnerabilities before we have resolved them. \n No Social Engineering:  Do not engage in social engineering or phishing attack on our users or employees. \n No Unauthorized Access to Data:  Do not access, modify, or delete data that does not belong to you. Use separate test accounts. \n Original Work Only:  All submissions must be the original work of the researcher. Submissions generated by AI or automation tools, or identical to previously submitted reports, will be disqualified. Researchers are responsible for thoroughly verifying their findings before submission to ensure their validity and uniqueness. \n No Partnership:  Participation in this program does not create an employment or partnership relationship. Rewards are discretionary and provided without further obligations or benefits. \n Legal Compliance:  Participation must not violate any applicable laws or regulations. Participants are responsible for reporting and paying any taxes owed on rewards received under this program. We do not withhold taxes or provide tax advice, but upon request, we may provide basic information about payments to assist with tax obligations. \n Sanctions:  Rewards will not be issued to participants located in or associated with countries or regions subject to U.S., EU, or UN sanctions. \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /web-app/bug-bounty) Alerts  (/web-app/alerts) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Bounty Sizes  (#bounty-sizes) Duplicate Submissions Policy  (#duplicate-submissions-policy) Misuse of Stolen Credentials  (#misuse-of-stolen-credentials) Bug Bounty Rules and Safe Harbor  (#bug-bounty-rules-and-safe-harbor)", "url": "https://docs.dune.com/web-app/bug-bounty#bug-bounty-rules-and-safe-harbor"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functions and Operators Quantile digest functions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators Quantile digest functions ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/qdigest"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functionality Query Views Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functionality Query Views The \u201cQuery View\u201d feature in DuneSQL allows you to use an existing query as a view in another query. This powerful functionality enables you to create reusable queries, build complex queries, and take advantage of existing queries as views. ", "url": "https://docs.dune.com/query-engine/query-a-query"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators Varchar utility functions ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/varchar-utility-functions"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functionality Materialized Views Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functionality Materialized Views Materialized tables are a way to store the results of a query in a table that can be queried like any other table. This is useful when you have a query that takes a long time to run, or when you want to use the results of a query in another query. ", "url": "https://docs.dune.com/query-engine/materialized-views"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Web App Mint Dashboards Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Web App Overview  (/web-app/overview) Create Queries Create Visualizations Decoding Contracts Create Dashboards  (/web-app/dashboards) Mint Dashboards  (/web-app/dashboard-minting) Teams on Dune  (/web-app/teams) Dune AI  (/web-app/dune-ai) Upload Data  (/web-app/upload-data) Share your work  (/web-app/embeds) Search content  (/web-app/search) Alerts  (/web-app/alerts) Bug Bounty  (/web-app/bug-bounty) Web App Mint Dashboards Mint Dashboards on Dune to Support Wizards The best way to support wizards is to mint their dashboards on Dune. We\u2019ve built an integration with Zora to mint any \u201cmoment\u201d from a Dashboard. Mints cost 0.000777 ETH (roughly $2). \n You can mint by going to any dashboard and clicking the blue \u201cmint\u201d button in the top right. \n \n If you\u2019re a creator looking to enable minting on your dashboards, you must link your wallet to your Dune account  by going to account settings  (https://dune.com/settings/wallets) . \n ", "url": "https://docs.dune.com/web-app/dashboard-minting"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functions and Operators Window functions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators Window functions ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/window"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functions and Operators URL functions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators URL functions ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/url"}
{"content": "\u200b Data structures \n A quantile digest is a data sketch which stores approximate percentile\ninformation. The Trino type for this data structure is called  qdigest ,\nand it takes a parameter which must be one of  bigint ,  double  or\n real  which represent the set of numbers that may be ingested by the\n qdigest . They may be merged without losing precision, and for storage\nand retrieval they may be cast to/from  VARBINARY . \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/qdigest#data-structures"}
{"content": "\u200b Functions \n \u200b  (#merge) merge() \n merge(qdigest)  \u2192 qdigest \n Merges all input  qdigest s into a single  qdigest . \n \u200b  (#quantile-at-value) quantile_at_value() \n quantile_at_value(qdigest(T), T)  \u2192 quantile \n Returns the approximate  quantile  number between 0 and 1 from the quantile digest given an input value. Null is returned if the quantile digest is empty or the input value is outside of the range of the quantile digest. \n \u200b  (#values-at-quantile) values_at_quantile() \n value_at_quantile(qdigest(T), quantile)  \u2192 T \n Returns the approximate percentile value from the quantile digest given\nthe number  quantile  between 0 and 1. \n \u200b  (#values-at-quantiles) values_at_quantiles() \n values_at_quantiles(qdigest(T), quantiles)  \u2192 array(T) \n Returns the approximate percentile values as an array given the input\nquantile digest and array of values between 0 and 1 which represent the\nquantiles to return. \n \u200b  (#qdigest-agg) qdigest_agg() \n qdigest_agg(x)  \u2192 qdigest(same as x) \n Returns the  qdigest  which is composed of all input values of  x . \n \u200b  (#qdigest-agg-2) qdigest_agg() \n qdigest_agg(x, w)  \u2192 qdigest(same as x) \n Returns the  qdigest  which is composed of all input values of  x  using\nthe per-item weight  w . \n \u200b  (#qdigest-agg-3) qdigest_agg() \n qdigest_agg(x, w, accuracy)  \u2192 qdigest(same as x) \n Returns the  qdigest  which is composed of all input values of  x  using\nthe per-item weight  w  and maximum error of  accuracy .  accuracy  must\nbe a value greater than zero and less than one, and it must be constant\nfor all input rows. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/qdigest) Machine learning functions  (/query-engine/Functions-and-operators/ml) Regular expression functions  (/query-engine/Functions-and-operators/regexp) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Data structures  (#data-structures) Functions  (#functions) merge()  (#merge) quantile_at_value()  (#quantile-at-value) values_at_quantile()  (#values-at-quantile) values_at_quantiles()  (#values-at-quantiles) qdigest_agg()  (#qdigest-agg) qdigest_agg()  (#qdigest-agg-2) qdigest_agg()  (#qdigest-agg-3)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/qdigest#functions"}
{"content": "\u200b Overview \n The \u201cQuery View\u201d feature in DuneSQL allows you to use an existing query as a view in another query. This powerful functionality enables you to create reusable queries, build complex queries, and take advantage of existing queries as views. \n You can also pass on parameters when querying a query view. \n All upstream queries are executed as functional SQL views, which means that they will be executed every time they are queried. This means there currently is no performance benefit to using the \u201cQuery a Query\u201d feature. If you are looking for a performance benefit, consider using  materialized views  (/query-engine/materialized-views)  instead. \n ", "url": "https://docs.dune.com/query-engine/query-a-query#overview"}
{"content": "\u200b Using Query View \n To use the \u201cQuery View\u201d feature, you will need the queryID of the query you want to use as a view. The queryID can be found in the URL of a query. For example, if the URL of a query is  https://dune.com/queries/1746191  (https://dune.com/queries/1746191) , the queryID would be  1746191 . \n Once you have the queryID, you can use it in your new query using the following syntax: \n select   *   from  query_ < queryID > \n \n For example, if you want to use the query with queryID 1746191 as a view in your new query, you would write: \n select   *   from  query_1746191  \n \n ", "url": "https://docs.dune.com/query-engine/query-a-query#using-query-view"}
{"content": "\u200b Adding Parameters When Using Query Views \n You can also pass on parameters when querying a query view. This allows you to use the same query view with different parameters in different queries. \n To pass on parameters when querying a query view, you need to use the following syntax: \n \n Select   *   from   \"query_<queryID>(<parameter1>='<value1>', <parameter2>='<value2>', ...)\" \n \n For example, if you want to use the query with queryID 3256410 as a view in your new query and pass on the parameter  blockchain  with the value  ethereum , the setup would look like this: \n --query_3256410, our query to be invoked \n Select   \n     project , \n     block_date , \n      sum ( amount_usd )   as  amount_usd \n from  dex . trades \n where  blockchain  =   '{{blockchain}}' \n and  block_time  >   now ( )   -   interval   '7'   day   \n \n link to query  (https://dune.com/queries/3256410) \n --query_3256401, our query that invokes the query_3256410 \n Select   \n     project , \n     block_date , \n     amount_usd  \n from   \"query_3256410(blockchain='ethereum')\" \n \n link to query  (https://dune.com/queries/3256401) \n Parameters in the query view are passed on as strings and therefore always need to be wrapped in single quotes. Since we sometimes want to pass a  string  including the single quotes, we need to escape the single quotes in the query view. We can do that by adding a backslash in front of the single quote. Escaping single quotes means that the single quote will be treated as a literal character and not as a string delimiter. \n For example: \n --query to be invoked \n Select   \n     project , \n     block_date , \n      sum ( amount_usd )   as  volume_in_usd \n from  dex . trades \n where  blockchain  =  {{blockchain}} \n -- we want to pass a string including the single quotes to this query \n \n --query that invokes the query above \n Select   \n     project , \n     block_date , \n     volume_in_usd \n from   \"query_3256410(blockchain='\\'ethereum\\'')\" \n --note the escaped single quotes \n --this will pass the parameter blockchain with the value 'ethereum' \n \n The backslash is not needed when passing on a parameter that doesn\u2019t need to be wrapped in single quotes on the receiving side, like  integers  or  booleans .\nYou can choose to handle this on the query view side or on the query that invokes the query view side. If you wrap your parameter in single quotes on the receiving side, you don\u2019t need to escape the single quotes on the query view side. \n For example: \n --query_3256410, our query to be invoked \n Select   \n     project , \n     block_date , \n      sum ( amount_usd )   as  amount_usd \n from  dex . trades \n where  blockchain  =   '{{blockchain}}' \n and  block_time  >   now ( )   -   interval   '7'   day   \n --note the single quotes around the parameter blockchain \n \n Select   \n     project , \n     block_date , \n     amount_usd  \n from   \"query_3256410(blockchain='ethereum')\" \n --since we wrap the parameter blockchain in single quotes on the receiving side, we don't need to escape the single quotes on the query view side \n \n The table below shows how different parameter types are passed on when using the \u201cQuery view\u201d feature: \n Parameter Type Syntax Example Literal query(tableName='labels.all', whateverKey='lala') Original Query : select * from  {{tableName}}     Macro : select * from \u201cquery_123(tableName=\u2018labels.all\u2019)\u201c Integer, Bigint query(integerKey='1') Original Query : select  {{integerKey}}     Macro : select * from \u201cquery_123(integerKey=\u20181\u2019)\u201c Decimal, Double query(decimalKey='1.2')     query(realKey='1.2F')     query(doubleKey='1.2E0') Original Query : select  {{realKey}}     Macro : select * from \u201cquery_123(realKey=\u20181.2F\u2019)\u201c Varchar query(varcharKey='\\'ethereum\\'') Original Query : select * from labels.all where name =  {{varcharKey}}     Macro : select * from \u201cquery_123(varcharKey=\u201dDEX Trader\u201d)\u201c Char query(charKey='\\'a\\'') Original Query : select  {{charKey}}     Macro : select * from \u201cquery_123(charKey=\u201da\u201d)\u201c Varbinary query(varbinaryKey='0xabcd') Original Query : select * from labels.all where address =  {{varbinaryKey}}     Macro : select * from \u201cquery_123(varbinaryKey=\u20180xabcd\u2019)\u201c UINT256 query(uint256Key='UINT256 \\'1\\'') Original Query : select * from arbitrum.transactions where gas_price =  {{uint256Key}}     Macro : select * from \u201cquery_123(uint256Key=\u2018uint256 \u20181\u201d)\u201d    Original Query : select * from arbitrum.transactions where gas_price = uint256 \u2018 {{uint256Key}} \u2019    Macro : select * from \u201cquery_123(uint256Key=\u20181\u2019)\u201c INT256 query(int256Key='INT256 \\'-1\\'') Original Query : select * from arbitrum.transactions where gas_price =  {{int256Key}}     Macro : select * from \u201cquery_123(int256Key=\u2018int256 \u2018-1\u201d)\u201d    Original Query : select * from arbitrum.transactions where gas_price = int256 \u2018 {{int256Key}} \u2019    Macro : select * from \u201cquery_123(int256Key=\u20181\u2019)\u201c Date, Time, Timestamp query(dateKey='2023-01-02')     query(dateKey='date \\'2023-01-02\\'')     query(dateKey='13:45:30 +05:00')     query(dateKey='time \\'13:45:30 +05:00\\'')     query(dateKey='2023-08-24 13:45:30 UTC')     query(dateKey='timestamp \\'2023-08-24 13:45:30 UTC\\'') Original Query : select * from ethereum.blocks where time >  {{dateKey}}     Macro : select * from \u201cquery_123(dateKey=\u2018timestamp \u20182023-08-24\u201d)\u201d    Original Query : select * from ethereum.blocks where time > timestamp \u2018 {{dateKey}} \u2019    Macro : select * from \u201cquery_123(dateKey=\u20182023-08-24\u2019)\u201c Array query(arrayKey='array[1,2,3]')     query(arrayKey='array[uint256 \\'1\\', uint256 \\'2\\']')     query(arrayKey='array[\\'these\\', \\'are\\, \\'varchar\\]') Original Query : select * from dex_aggregator.trades where trace_address =  {{arrayKey}}     Macro : select * from \u201cquery_123(arrayKey=\u2018array[1, 2]\u2019)\u201c Boolean query(booleanKey='true') Original Query : select * from bitcoin.inputs where is_coinbase =  {{booleanKey}}     Macro : select * from \u201cquery_123(booleanKey=\u2018false\u2019)\u201c Row query(rowKey='row(1, uint256 \\'1\\', \\'hi\\')') Original Query : select  {{rowKey}}     Macro : select * from \u201cquery_123(rowKey=\u2018row(false, 1, uint256 \u20181\u2019, \u2018hi\u2019)\u2019)\u201c Map query(mapKey='map(array[\\'key1\\', \\'key2\\'], array[\\'value1\\', \\'value2\\'])') Original Query : select  {{mapKey}}     Macro : select * from \u201cquery_123(mapKey=\u2018map(array[\u2018key1\u2019, \u2018key2\u2019], array[\u2018value1\u2019, \u2018value2\u2019])\u2019)\u201c \n ", "url": "https://docs.dune.com/query-engine/query-a-query#adding-parameters-when-using-query-views"}
{"content": "\u200b Limitations \n There are some important limitations and requirements to consider when using the \u201cQuery a Query\u201d feature: \n \n Named output columns : All output columns of the query being queried must be named. For example, you cannot query  select 1  or  select count(*) from ethereum.transactions , but you can query  select 1 as v  and  select count(*) as total from ethereum.transactions . \n Saved queries : Only saved queries can be used with the \u201cQuery a Query\u201d feature. \n Archived queries : Archived queries cannot be queried. \n Dune SQL : Only queries written in Dune SQL can be queried. \n Mixed cases on parameters:  If you pass parameters when querying a query, the parameter key and its values should be lower case (i.e.:  select \"query_123(Key=\\'VaLue\\')\"  will not work). \n List parameters:  the query you\u2019re querying cannot have parameters that use list options from the results of a separate query. \n \n Querying private queries is a  premium feature  (https://dune.com/pricing)  only. You can\u2019t query private queries with a free or plus account. \n ", "url": "https://docs.dune.com/query-engine/query-a-query#limitations"}
{"content": "\u200b Best Practices \n When using the \u201cQuery View\u201d feature, consider the following best practices: \n \n Naming conventions : Ensure that your queries follow a consistent naming convention for output columns. This will make it easier to understand and reuse queries as views. \n Documentation : Provide clear documentation and comments for your queries, especially when they are intended to be used as views in other queries. \n Modularity : Break down complex queries into smaller, reusable components. This will make your queries more maintainable and easier to understand. \n Version control : If you need to update a query that is being used as a view in other queries, consider creating a new version of the query instead of modifying the existing one. This will help prevent unexpected changes in dependent queries. \n Forking  If you use the query of another user as a view in your query, consider forking the query instead of querying it. That way, you will not be affected by changes made to the  Original Query . On the other hand, you will also not be able to benefit from any improvements made to the  Original Query . \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/query-a-query) Executions  (/query-engine/query-executions) Materialized Views  (/query-engine/materialized-views) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Overview  (#overview) Using Query View  (#using-query-view) Adding Parameters When Using Query Views  (#adding-parameters-when-using-query-views) Limitations  (#limitations) Best Practices  (#best-practices)", "url": "https://docs.dune.com/query-engine/query-a-query#best-practices"}
{"content": "\u200b Varchar Utility Functions \n Dune SQL offers a series of functions designed to ease some common tasks when working with varchar data. \n \u200b  (#left) left() \n left(varchar, bigint)  \u2192 varchar \n This function returns the leftmost  x  characters from a string, if  x  is less than or equal to 0 the result is an empty string. The first argument is the original string, and the second argument is  x , the length of the resulting string. \n SELECT   \n      \"left\" ( '123456' ,   2 ) \n \n will return  12 \n \u200b  (#right) right() \n right(varchar, bigint)  \u2192 varchar \n This function returns the rightmost  x  characters from a string, if  x  is less than or equal to 0 the result is an empty string. The first argument is the original string, and the second argument is  x , the length of the resulting string. \n SELECT   \n      \"right\" ( '123456' ,   2 ) \n \n will return  56 \n \u200b  (#initcap) initcap() \n initcap(varchar)  \u2192 varchar \n This function returns a string with the first letter of each word in uppercase and all other letters in lowercase. Words are delimited by white space or characters that are not alphanumeric. The only argument is the original string. \n SELECT   \n      \"initcap\" ( 'hellO woRld' ) \n \n will return  Hello World \n \u200b  (#address-32-from-hex) address_32_from_hex() \n address_32_from_hex(varchar)  \u2192 varbinary \n This function converts a hexadecimal-formatted input string to varbinary, always producing an output of 32 bytes in length by left-padding with the 0x00 byte. The input string needs to be hexadecimal formatted, allowing characters from  [a-fA-F0-9] ; otherwise, an error is returned. While the input can be prefixed with \u20180x\u2019, this is not mandatory. The function accommodates the hexadecimal representation of any decimal number, provided it fits within 32 bytes. \n This function proves useful in scenarios where addresses in the Aptos chain are utilized. In the Aptos chain, addresses serve as 32-byte identifiers for accounts or objects. All addresses in Aptos chain are represented as just that, using a 32-byte varbinary. However, it\u2019s quite common to represent addresses in their short-formed representation, having leading zeros trimmed. For example, a valid aptos account can have a 0x1 address. Additionally, it\u2019s typical to encounter the short format without the \u20180x\u2019 prefix. Therefore, this function serves to transform a short-form address into the internal representation format used for addresses \n -- The following query will return: true, true, true \n SELECT \n     address_32_from_hex ( '0x1' )   =  address_32_from_hex ( '0x01' ) , \n     address_32_from_hex ( '0x1' )   =  address_32_from_hex ( '1' ) , \n     address_32_from_hex ( '0x1' )   =   0x0000000000000000000000000000000000000000000000000000000000000001 \n \n In the aptos context, we can use the function to find transactions with the entry function address being 0x1. \n SELECT   *   FROM  aptos . user_transactions  WHERE  entry_function_module_address  =  address_32_from_hex ( '0x1' )   LIMIT   10 \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/varchar-utility-functions) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Window functions  (/query-engine/Functions-and-operators/window) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Varchar Utility Functions  (#varchar-utility-functions) left()  (#left) right()  (#right) initcap()  (#initcap) address_32_from_hex()  (#address-32-from-hex)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/varchar-utility-functions#varchar-utility-functions"}
{"content": "\u200b Overview \n The  \u201cMaterialized View\u201d  feature on Dune allows you to use an existing query\u2019s results as table in another query. This functionality enables you to build your own simple data pipeline inside of Dune. This feature is especially useful when you have a query that takes a long time to run, or when you want to use the results of a query in another query. Instead of running the same query pattern over and over again, you can run it once and then use the results in other queries. \n You should think of using this feature any time you run into: \n \n You use the same query pattern across multiple queries \n Query timeouts (running longer than 30 mintes) \n Execution Error: Stage limits (exceeding stage limits in the planning stage, can happen when joining many tables) \n Execution Error: Memory limits (exceeding the memory limits, can happen when you use too many large tables like  solana.transactions  or  ethereum.traces ) \n \n This feature will help you to avoid these issues and save time and credits. \n This feature will contribute to your storage quota, on the free tier you can only create a 1MB materialized view. Learn more  here  (https://dune.com/pricing) \n ", "url": "https://docs.dune.com/query-engine/materialized-views#overview"}
{"content": "\u200b Create a materialized view \n Write a new query or go to an existing query. (We suggest creating via team context on a plan with sufficient credits) \n \n Make sure all columns are explicitly named (i.e.  SELECT count(*)  will not work) \n Save the query \n After saving a \u201cmaterialize\u201d button will appear below the run button. \n Click the materialize button, and set a refresh schedule and execution tier. Each refresh uses up credits based on cluster used. \n \n \n You can find the example query  here  (https://dune.com/queries/3468697) , and it can be queried with just: \n SELECT \n * \n FROM  dune . dune . result_staking_rate_daily_mat \n \n ", "url": "https://docs.dune.com/query-engine/materialized-views#create-a-materialized-view"}
{"content": "\u200b Query a materialized view \n Wait for a materialized view to finish creation first. It should be roughly similar to the time the query normally takes to execute - maybe a bit longer due to time it takes to write the new table. \n Query the materialized view via  dune.<username>.result_<given_name> . \n If your username starts with a number, you\u2019ll need to wrap the <username> in quotes i.e.  dune.\"21co\".result_stablecoin_total_supply_on_ethereum \n When you query a materialized view in another query, it does not rerun the materialized view (unlike  query views  (../query-engine/query-a-query.mdx) ). \n You can find your matviews either  in the data explorer  (https://dune.com/queries?category=materialized_views) , or in your library. The table name can always be found on the query if you click into the query and then open the matview settings. \n ", "url": "https://docs.dune.com/query-engine/materialized-views#query-a-materialized-view"}
{"content": "\u200b Things to keep in mind \n \n A query result has a 200MB limit in the editor but a materialized view doesn\u2019t have storage limits. Even though the results will look truncated in the editor. \n This materialized view refresh schedule is DIFFERENT from the query scheduler. Results from running the query or the normal query scheduler will NOT update the materialized view. \n Plans have total monthly storage limits (for premium plans, it\u2019s 50GB, plus it\u2019s 15GB, free is 1MB). \n You can delete your materialized in the same dialouge where you created it. \n If your team or account name starts with a number, you\u2019ll need to wrap the  name  in quotes i.e.  dune.\"21co\".result_stablecoin_total_supply_on_ethereum \n There currently is no way to nicely ensure sequential execution of materialized views. If you have a materialized view that depends on another materialized view, you\u2019ll need to ensure that the upstream materialized view is updated first. This can be done by setting the refresh schedule to be more frequent than the downstream materialized view. \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/materialized-views) Query Views  (/query-engine/query-a-query) Writing Efficient Queries  (/query-engine/writing-efficient-queries) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Overview  (#overview) Create a materialized view  (#create-a-materialized-view) Query a materialized view  (#query-a-materialized-view) Things to keep in mind  (#things-to-keep-in-mind)", "url": "https://docs.dune.com/query-engine/materialized-views#things-to-keep-in-mind"}
{"content": "\u200b Minting a Moment \n When you click mint, you\u2019ll see this modal popup. The key interactions are labeled below: \n \n You\u2019ll have to connect your Ethereum wallet, if you don\u2019t have one yet you can install  Metamask  (https://chromewebstore.google.com/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn?hl=en)  and then fill it with ETH from Coinbase or some other onramp.  Minting occurs on Base, so make sure to  transfer your ETH to Base to mint  (https://help.coinbase.com/en/coinbase/other-topics/other/base) . \n After you select an amount and click mint, Dune will take a screenshot and create the token on Zora for you to mint. This may take 5-10 seconds, but you will then see a prompt in your wallet that looks like this: \n \n This is showing you the number of tokens you will receive, and how much ETH you are spending + gas fees. After you confirm, it should only take a second before you see a successful mint screen: \n \n Congrats - you\u2019ve now saved an onchain moment in an onchain momento forever! Thank you for supporting the community at Dune. \n ", "url": "https://docs.dune.com/web-app/dashboard-minting#minting-a-moment"}
{"content": "\u200b Claiming Rewards as a Creator \n If your dashboard gets minted, log into  zora.co/manage  (https://zora.co/manage)  with the wallet that is connected to the dashboard owner\u2019s dune account to claim your rewards. \n Dune takes the creator referral fee, and the first minter referral is not set/taken -  learn about Zora rewards structure here  (https://support.zora.co/en/articles/2509953) . \n Each time someone mints off a dashboard, a unique token id is created on the Dune  zora collection on Base chain  (https://basescan.org/address/0xdc6b3687d5d9ada19faad9e782e3ece41e1da7ba) . The ipfs URI contains the details about the Dune dashboard and creator. Anyone can mint more of a specific moment (token id) by going to that tokens page on Zora, but we don\u2019t currently support minting other people\u2019s moments in the dune UI. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /web-app/dashboard-minting) Create Dashboards  (/web-app/dashboards) Teams on Dune  (/web-app/teams) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Minting a Moment  (#minting-a-moment) Claiming Rewards as a Creator  (#claiming-rewards-as-a-creator)", "url": "https://docs.dune.com/web-app/dashboard-minting#claiming-rewards-as-a-creator"}
{"content": "\u200b Window functions \n Window functions perform calculations across rows of the query result.\nThey run after the  HAVING  clause but before the  ORDER BY  clause.\nInvoking a window function requires special syntax using the  OVER \nclause to specify the window. For example, the following query ranks\norders for each clerk by price: \n      SELECT  orderkey ,  clerk ,  totalprice , \n            rank ( )   OVER   ( PARTITION   BY  clerk \n                          ORDER   BY  totalprice  DESC )   AS  rnk \n      FROM  orders \n      ORDER   BY  clerk ,  rnk \n \n The window can be specified in two ways (see\n window_clause ): \n \n By a reference to a named window specification defined in the\n WINDOW  clause, \n By an in-line window specification which allows to define window\ncomponents as well as refer to the window components pre-defined in\nthe  WINDOW  clause. \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/window#window-functions"}
{"content": "\u200b Aggregate functions \n All  aggregate  can be used as window functions by adding the  OVER  clause. The aggregate function is\ncomputed for each row over the rows within the current row\u2019s window\nframe. \n For example, the following query produces a rolling sum of order prices\nby day for each clerk: \n      SELECT  clerk ,  orderdate ,  orderkey ,  totalprice , \n             sum ( totalprice )   OVER   ( PARTITION   BY  clerk \n                                   ORDER   BY  orderdate )   AS  rolling_sum \n      FROM  orders \n      ORDER   BY  clerk ,  orderdate ,  orderkey \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/window#aggregate-functions"}
{"content": "\u200b Ranking functions \n \u200b  (#cume-dist) cume_dist() \n cume_dist()  \u2192 bigint \n Returns the cumulative distribution of a value in a group of values. The\nresult is the number of rows preceding or peer with the row in the\nwindow ordering of the window partition divided by the total number of\nrows in the window partition. Thus, any tie values in the ordering will\nevaluate to the same distribution value. \n \u200b  (#dense-rank) dense_rank() \n dense_rank()  \u2192 bigint \n Returns the rank of a value in a group of values. This is similar to  rank , except that tie values do not produce gaps in the sequence. \n \u200b  (#ntile) ntile() \n ntile(n)  \u2192 bigint \n Divides the rows for each window partition into  n  buckets ranging from  1  to at most  n . Bucket values will differ by at most  1 . If the number of rows in the partition does not divide evenly into the number of buckets, then the remainder values are distributed one per bucket, starting with the first bucket. \n For example, with  6  rows and  4  buckets, the bucket values would be as follows:  1   1   2   2   3   4 \n \u200b  (#percent-rank) percent_rank() \n percent_rank()  \u2192 double \n Returns the percentage ranking of a value in group of values. The result is  (r - 1) / (n - 1)  where  r  is the  rank  of the row and  n  is the total number of rows in the window partition. \n \u200b  (#rank) rank() \n rank()  \u2192 bigint \n Returns the rank of a value in a group of values. The rank is one plus the number of rows preceding the row that are not peer with the row. Thus, tie values in the ordering will produce gaps in the sequence. The ranking is performed for each window partition. \n \u200b  (#row-number) row_number() \n row_number()  \u2192 bigint \n Returns a unique, sequential number for each row, starting with one, according to the ordering of rows within the window partition. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/window#ranking-functions"}
{"content": "\u200b Value functions \n By default, null values are respected. If  IGNORE NULLS  is specified,\nall rows where  x  is null are excluded from the calculation. If\n IGNORE NULLS  is specified and  x  is null for all rows, the\n default_value  is returned, or if it is not specified,  null  is\nreturned. \n \u200b  (#first-value) first_value() \n first_value(x)  \u2192 [same as input] \n Returns the first value of the window. \n \u200b  (#last-value) last_value() \n last_value(x)  \u2192 [same as input] \n Returns the last value of the window. \n \u200b  (#nth-value) nth_value() \n nth_value(x, offset)  \u2192 [same as input] \n Returns the value at the specified offset from the beginning of the window. Offsets start at  1 . The offset can be any scalar expression. If the offset is null or greater than the number of values in the window,  null  is returned. It is an error for the offset to be zero or negative. \n \u200b  (#lead) lead() \n lead(x, offset , default_value)  \u2192 [same as input] \n Returns the value at  offset  rows after the current row in the window partition. Offsets start at  0 , which is the current row. The offset can be any scalar expression. The default  offset  is  1 . If the offset is null,  null  is returned. If the offset refers to a row that is not within the partition, the  default_value  is returned, or if it is not specified  null  is returned. The  lead  function requires that the window ordering be specified. Window frame must not be specified. \n \u200b  (#lag) lag() \n lag(x, offset , default_value)  \u2192 [same as input] \n Returns the value at  offset  rows before the current row in the window partition. Offsets start at  0 , which is the current row. The offset can be any scalar expression. The default  offset  is  1 . If the offset is null,  null  is returned. If the offset refers to a row that is not within the partition, the  default_value  is returned, or if it is not specified  null  is returned. The  lag  function requires that the window ordering be specified. Window frame must not be specified. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/window) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Window functions  (#window-functions) Aggregate functions  (#aggregate-functions) Ranking functions  (#ranking-functions) cume_dist()  (#cume-dist) dense_rank()  (#dense-rank) ntile()  (#ntile) percent_rank()  (#percent-rank) rank()  (#rank) row_number()  (#row-number) Value functions  (#value-functions) first_value()  (#first-value) last_value()  (#last-value) nth_value()  (#nth-value) lead()  (#lead) lag()  (#lag)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/window#value-functions"}
{"content": "\u200b Extraction functions \n The URL extraction functions extract components from HTTP URLs (or any\nvalid URIs conforming to  2396 ). The following syntax is supported: \n [protocol:][//host[:port]][path][?query][#fragment] \n \n The extracted components do not contain URI syntax separators such as\n :  or  ? . \n \u200b  (#url-extract-fragment) url_extract_fragment() \n url_extract_fragment(url)  \u2192 varchar \n Returns the fragment identifier from  url . \n \u200b  (#url-extract-host) url_extract_host() \n url_extract_host(url)  \u2192 varchar \n Returns the host from  url . \n \u200b  (#url-extract-parameter) url_extract_parameter() \n url_extract_parameter(url, name)  \u2192 varchar \n Returns the value of the f query string parameter named  name  from  url . Parameter extraction is handled in the typical manner as specified by RFC 1866#section-8.2.1. \n \u200b  (#url-extract-path) url_extract_path() \n url_extract_path(url)  \u2192 varchar \n Returns the path from  url . \n \u200b  (#url-extract-port) url_extract_port() \n url_extract_port(url)  \u2192 bigint \n Returns the port number from  url . \n \u200b  (#url-extract-protocol) url_extract_protocol() \n url_extract_protocol(url)  \u2192 varchar \n Returns the protocol from  url . \n \u200b  (#url-extract-query) url_extract_query() \n url_extract_query(url)  \u2192 varchar \n Returns the query string from  url . \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/url#extraction-functions"}
{"content": "\u200b Encoding functions \n \u200b  (#url-encode) url_encode() \n url_encode(value)  \u2192 varchar \n Escapes  value  by encoding it so that it can be safely included in URL query parameter names and values. \n \u200b  (#url-decode) url_decode() \n url_decode(value)  \u2192 varchar \n Unescapes the URL encoded  value . This function is the inverse of  url_encode . Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/url) Teradata functions  (/query-engine/Functions-and-operators/teradata) UUID functions  (/query-engine/Functions-and-operators/uuid) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Extraction functions  (#extraction-functions) url_extract_fragment()  (#url-extract-fragment) url_extract_host()  (#url-extract-host) url_extract_parameter()  (#url-extract-parameter) url_extract_path()  (#url-extract-path) url_extract_port()  (#url-extract-port) url_extract_protocol()  (#url-extract-protocol) url_extract_query()  (#url-extract-query) Encoding functions  (#encoding-functions) url_encode()  (#url-encode) url_decode()  (#url-decode)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/url#encoding-functions"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functions and Operators Teradata functions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators Teradata functions These functions provide compatibility with Teradata SQL. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/teradata"}
{"content": "\u200b String functions \n \u200b  (#char2) char2() \n char2hexint(string)  \u2192 varchar \n Returns the hexadecimal representation of the UTF-16BE encoding of the string. \n \u200b  (#index) index() \n index(string, substring)  \u2192 bigint \n Alias for  strpos  function. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/teradata#string-functions"}
{"content": "\u200b Date functions \n The functions in this section use a format string that is compatible\nwith the Teradata datetime functions. The following table, based on the\nTeradata reference manual, describes the supported format specifiers: \n Specifier Description - / , . ; : Punctuation characters are ignored dd Day of month (1-31) hh Hour of day (1-12) hh24 Hour of the day (0-23) mi Minute (0-59) mm Month (01-12) ss Second (0-59) yyyy 4-digit year yy 2-digit year \n \n \u200b  (#to-char) to_char() \n to_char(timestamp, format)  \u2192 varchar \n Formats  timestamp  as a string using  format . \n \u200b  (#to-timestamp) to_timestamp() \n to_timestamp(string, format)  \u2192 timestamp \n Parses  string  into a  TIMESTAMP  using  format . \n \u200b  (#to-date) to_date() \n to_date(string, format)  \u2192 date \n Parses  string  into a  DATE  using  format . Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/teradata) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) URL functions  (/query-engine/Functions-and-operators/url) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page String functions  (#string-functions) char2()  (#char2) index()  (#index) Date functions  (#date-functions) to_char()  (#to-char) to_timestamp()  (#to-timestamp) to_date()  (#to-date)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/teradata#date-functions"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functions and Operators Logical operators Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators Logical operators ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/logical"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators Chain utility functions ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/chain-utility-functions"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functions and Operators Set Digest functions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators Set Digest functions ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/setdigest"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functions and Operators Comparisons Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators Comparisons ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/comparison"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functions and Operators Lambda expressions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators Lambda expressions Lambda expressions are anonymous functions which are passed as arguments to higher-order SQL functions. Lambda expressions are written with  -> : \n     x -> x + 1 \n     (x, y) -> x + y \n     x -> regexp_like(x, 'a+') \n     x -> x[1] / x[2] \n     x -> IF(x > 0, x, -x) \n     x -> COALESCE(x, 0) \n     x -> CAST(x AS JSON) \n     x -> x + TRY(1 / 0) \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/lambda"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functions and Operators String functions and operators Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators String functions and operators ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/string"}
{"content": "\u200b Logical operators \n Operator Description Example AND True if both values are true a AND b OR True if either value is true a OR b NOT True if the value is false NOT a \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/logical#logical-operators"}
{"content": "\u200b Effect of NULL on logical operators \n The result of an  AND  comparison may be  NULL  if one or both sides of\nthe expression are  NULL . If at least one side of an  AND  operator is\n FALSE  the expression evaluates to  FALSE : \n      SELECT  CAST ( null   AS   boolean )   AND   true ;   -- null \n \n      SELECT  CAST ( null   AS   boolean )   AND   false ;   -- false \n \n      SELECT  CAST ( null   AS   boolean )   AND  CAST ( null   AS   boolean ) ;   -- null \n \n The result of an  OR  comparison may be  NULL  if one or both sides of\nthe expression are  NULL . If at least one side of an  OR  operator is\n TRUE  the expression evaluates to  TRUE : \n      SELECT  CAST ( null   AS   boolean )   OR  CAST ( null   AS   boolean ) ;   -- null \n \n      SELECT  CAST ( null   AS   boolean )   OR   false ;   -- null \n \n      SELECT  CAST ( null   AS   boolean )   OR   true ;   -- true \n \n The following truth table demonstrates the handling of  NULL  in  AND \nand  OR : \n a b a AND b a OR b TRUE TRUE TRUE TRUE TRUE FALSE FALSE TRUE TRUE NULL NULL TRUE FALSE TRUE FALSE TRUE FALSE FALSE FALSE FALSE FALSE NULL FALSE NULL NULL TRUE NULL TRUE NULL FALSE FALSE NULL NULL NULL NULL NULL \n The logical complement of  NULL  is  NULL  as shown in the following\nexample: \n      SELECT   NOT  CAST ( null   AS   boolean ) ;   -- null \n \n The following truth table demonstrates the handling of  NULL  in  NOT : \n a NOT a TRUE FALSE FALSE TRUE NULL NULL Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/logical) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Map functions and operators  (/query-engine/Functions-and-operators/map) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Logical operators  (#logical-operators) Effect of NULL on logical operators  (#effect-of-null-on-logical-operators)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/logical#effect-of-null-on-logical-operators"}
{"content": "\u200b Chain Utility Functions \n Dune SQL offers a series of functions designed to ease some common tasks when working with blockchain data. \n These functions are helpful to generate links to the explorer of a chain, to specific addresses, or to specific transactions.\nMost of the time you\u2019ll want to use  get_href()  in combination with one of the other functions to generate a clickable link to a specific address or transaction. \n Select \n     get_href ( get_chain_explorer_address ( 'ethereum' ,   to ) ,  cast ( to   as   varchar ) ) \n FROM  ethereum . transactions \n limit   100 \n \n This sql code will generate a clickable link pointing to the explorer of the Ethereum chain for each address in the  to  column. The displayed link will be the address itself. \n You can find all the functions in action on this dashboard:  Chain Utility Functions  (https://dune.com/dune/chain-utility-functions) \n \u200b  (#get-href) get_href() \n get_href(varchar, varchar)  \u2192 varchar \n This function converts a link and associated text into a clickable hyperlink. The first argument is the link, and the second argument is the text to be displayed. \n SELECT   \n     get_href ( 'https://dune.com' ,   'Dune' ) \n \n \u200b  (#get-chain-explorer-address) get_chain_explorer_address() \n get_chain_explorer_address(varchar, varchar)  \u2192 varchar \n This function generates a URL for the explorer of a specified chain (provided as a varchar) for a given address (also provided as a varchar). \n SELECT   \n     get_chain_explorer_address ( 'ethereum' ,  cast ( to   as   varchar ) )   \n FROM  ethereum . transactions   \n limit   100 \n \n \u200b  (#get-chain-explorer-address-2) get_chain_explorer_address() \n get_chain_explorer_address(varchar, varbinary)  \u2192 varchar \n This function generates a URL for the explorer of a specified chain (provided as a varchar) for a given address (provided as a varbinary). \n SELECT   \n     get_chain_explorer_address ( 'ethereum' ,   to )   \n FROM  ethereum . transactions   \n limit   100 \n \n \u200b  (#get-chain-explorer-tx-hash) get_chain_explorer_tx_hash() \n get_chain_explorer_tx_hash(varchar, varchar)  \u2192 varchar \n This function generates a URL for the explorer of a specified chain (provided as a varchar) for a given transaction hash (also provided as a varchar). \n SELECT   \n     get_chain_explorer_tx_hash ( 'ethereum' ,  cast ( hash   as   varchar ) )   \n FROM  ethereum . transactions   \n limit   100 \n \n \u200b  (#get-chain-explorer-tx-hash-2) get_chain_explorer_tx_hash() \n get_chain_explorer_tx_hash(varchar, varbinary)  \u2192 varchar \n This function generates a URL for the explorer of a specified chain (provided as a varchar) for a given transaction hash (provided as a varbinary). \n SELECT   \n     get_chain_explorer_tx_hash ( 'ethereum' ,   hash )   \n FROM  ethereum . transactions   \n limit   100 \n \n \u200b  (#get-chain-explorer) get_chain_explorer() \n get_chain_explorer(varchar)  \u2192 varchar \n This function returns the URL of the explorer for a specified chain (provided as a varchar). \n SELECT   \n     get_chain_explorer ( 'ethereum' ) \n \n \u200b  (#get-balancer-link) get_balancer_link() \n get_balancer_link(varchar, varchar)  \u2192 varchar \n This function returns a link to access a specific pool on the Balancer app. The first argument is the chain, and the second argument is the pool Id (provided as varchar). \n SELECT   \n     get_balancer_link ( blockchain ,  cast ( pool_id  as   varchar ) ) \n FROM  balancer . trades \n limit   100 \n \n \u200b  (#get-balancer-link-2) get_balancer_link() \n get_balancer_link(varchar, varbinary)  \u2192 varchar \n This function returns a link to access a specific pool on the Balancer app. The first argument is the chain, and the second argument is the pool Id (provided as varbinary). \n SELECT   \n     get_balancer_link ( blockchain ,  pool_id ) \n FROM  balancer . trades \n limit   100 \n \n \u200b  (#all-evm-chains) all_evm_chains() \n all_evm_chains()  \u2192 array(varchar) \n SELECT   \n     all_evm_chains ( ) \n \n This function returns an array listing all the EVM chains available on Dune. \n \u200b  (#all-op-chains) all_op_chains() \n all_op_chains()  \u2192 array(varchar) \n SELECT   \n     all_op_chains ( ) \n \n This function returns an array listing all the Optimism chains available on Dune. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/chain-utility-functions) Bitwise  (/query-engine/Functions-and-operators/bitwise) Comparisons  (/query-engine/Functions-and-operators/comparison) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Chain Utility Functions  (#chain-utility-functions) get_href()  (#get-href) get_chain_explorer_address()  (#get-chain-explorer-address) get_chain_explorer_address()  (#get-chain-explorer-address-2) get_chain_explorer_tx_hash()  (#get-chain-explorer-tx-hash) get_chain_explorer_tx_hash()  (#get-chain-explorer-tx-hash-2) get_chain_explorer()  (#get-chain-explorer) get_balancer_link()  (#get-balancer-link) get_balancer_link()  (#get-balancer-link-2) all_evm_chains()  (#all-evm-chains) all_op_chains()  (#all-op-chains)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/chain-utility-functions#chain-utility-functions"}
{"content": "\u200b Set Digest functions \n Trino offers several functions that deal with the\n MinHash  (https://en.wikipedia.org/wiki/MinHash)  technique. \n MinHash is used to quickly estimate the  Jaccard similarity\ncoefficient  (https://en.wikipedia.org/wiki/Jaccard_index)  between two\nsets. \n It is commonly used in data mining to detect near-duplicate web pages at\nscale. By using this information, the search engines efficiently avoid\nshowing within the search results two pages that are nearly identical. \n The following example showcases how the Set Digest functions can be used\nto naively estimate the similarity between texts. The input texts are\nsplit by using the function  ngrams  to\n 4-shingles  (https://en.wikipedia.org/wiki/W-shingling)  which are used\nas input for creating a set digest of each initial text. The set digests\nare compared to each other to get an approximation of the similarity of\ntheir corresponding initial texts: \n WITH  text_input ( id ,   text )   AS   ( \n           VALUES \n               ( 1 ,   'The quick brown fox jumps over the lazy dog' ) , \n               ( 2 ,   'The quick and the lazy' ) , \n               ( 3 ,   'The quick brown fox jumps over the dog' ) \n       ) , \n      text_ngrams ( id ,  ngrams )   AS   ( \n           SELECT  id , \n                 transform ( \n                   ngrams ( \n                     split ( text ,   ' ' ) , \n                      4 \n                    ) , \n                   token  - >  array_join ( token ,   ' ' ) \n                  ) \n           FROM  text_input \n       ) , \n      minhash_digest ( id ,  digest )   AS   ( \n           SELECT  id , \n                  ( SELECT  make_set_digest ( v )   FROM  unnest ( ngrams )  u ( v ) ) \n           FROM  text_ngrams \n       ) , \n      setdigest_side_by_side ( id1 ,  digest1 ,  id2 ,  digest2 )   AS   ( \n           SELECT  m1 . id  as  id1 , \n                 m1 . digest  as  digest1 , \n                 m2 . id  as  id2 , \n                 m2 . digest  as  digest2 \n           FROM   ( SELECT  id ,  digest  FROM  minhash_digest )  m1 \n           JOIN   ( SELECT  id ,  digest  FROM  minhash_digest )  m2 \n             ON  m1 . id  !=  m2 . id  AND  m1 . id  <  m2 . id \n       ) \n SELECT  id1 , \n        id2 , \n        intersection_cardinality ( digest1 ,  digest2 )   AS  intersection_cardinality , \n        jaccard_index ( digest1 ,  digest2 )              AS  jaccard_index \n FROM  setdigest_side_by_side \n ORDER   BY  id1 ,  id2 ; \n \n Results: \n id1 id2 intersection_cardinality jaccard_index 1 2 0 0.0 1 3 4 0.6 2 3 0 0.0 \n The above result listing points out, as expected, that the texts with\nthe id 1 and 3 are quite similar. \n One may argue that the text with the id 2 is somewhat similar to the\ntexts with the id 1 and 3. Due to the fact in the example above\n4-shingles are taken into account for measuring the similarity of the\ntexts, there are no intersections found for the text pairs 1 and 2,\nrespectively 3 and 2 and therefore there the similarity index for\nthese text pairs is 0. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/setdigest#set-digest-functions"}
{"content": "\u200b Data structures \n Trino implements Set Digest data sketches by encapsulating the following\ncomponents: \n \n HyperLogLog  (https://en.wikipedia.org/wiki/HyperLogLog) \n MinHash with a single hash\nfunction  (http://en.wikipedia.org/wiki/MinHash#Variant_with_a_single_hash_function) \n \n The HyperLogLog structure is used for the approximation of the distinct\nelements in the original set. \n The MinHash structure is used to store a low memory footprint signature\nof the original set. The similarity of any two sets is estimated by\ncomparing their signatures. \n The Trino type for this data structure is called  setdigest . Trino\noffers the ability to merge multiple Set Digest data sketches. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/setdigest#data-structures"}
{"content": "\u200b Serialization \n Data sketches can be serialized to and deserialized from  varbinary .\nThis allows them to be stored for later use. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/setdigest#serialization"}
{"content": "\u200b Functions \n \u200b  (#make-set-digest) make_set_digest() \n make_set_digest(x)  \u2192 setdigest \n Composes all input values of  x  into a  setdigest . \n Create a  setdigest  corresponding to a  bigint  array: \n      SELECT  make_set_digest ( value ) \n      FROM   ( VALUES   1 ,   2 ,   3 )  T ( value ) ; \n \n Create a  setdigest  corresponding to a  varchar  array: \n SELECT make_set_digest(value)\nFROM (VALUES \u2018Trino\u2019, \u2018SQL\u2019, \u2018on\u2019, \u2018everything\u2019) T(value); \n \u200b  (#merge-set-digest) merge_set_digest() \n merge_set_digest(setdigest, setdigest)  \u2192 setdigest \n Returns the  setdigest  of the aggregate union of the individual\n setdigest  Set Digest structures. \n Returns the cardinality of the set digest from its internal\n HyperLogLog  component. \n Examples: \n      SELECT  cardinality ( make_set_digest ( value ) ) \n      FROM   ( VALUES   1 ,   2 ,   2 ,   3 ,   3 ,   3 ,   4 ,   4 ,   4 ,   4 ,   5 )  T ( value ) ; \n      -- 5 \n \n \u200b  (#intersection-cardinality) intersection_cardinality() \n intersection_cardinality(x,y)  \u2192 long \n Returns the estimation for the cardinality of the intersection of the\ntwo set digests. \n x  and  y  must be of type  setdigest \n Examples: \n      SELECT  intersection_cardinality ( make_set_digest ( v1 ) ,  make_set_digest ( v2 ) ) \n      FROM   ( VALUES   ( 1 ,   1 ) ,   ( NULL ,   2 ) ,   ( 2 ,   3 ) ,   ( 3 ,   4 ) )  T ( v1 ,  v2 ) ; \n      -- 3 \n \n \u200b  (#jaccard-index) jaccard_index() \n jaccard_index(x, y)  \u2192 double \n Returns the estimation of  Jaccard\nindex  (https://en.wikipedia.org/wiki/Jaccard_index)  for the two set\ndigests. \n x  and  y  must be of type  setdigest . \n Examples: \n      SELECT  jaccard_index ( make_set_digest ( v1 ) ,  make_set_digest ( v2 ) ) \n      FROM   ( VALUES   ( 1 ,   1 ) ,   ( NULL , 2 ) ,   ( 2 ,   3 ) ,   ( NULL ,   4 ) )  T ( v1 ,  v2 ) ; \n      -- 0.5 \n \n \u200b  (#hash-counts) hash_counts() \n hash_counts(x)  \u2192 map(bigint, bigint) \n Returns a map containing the\n Murmur3Hash128  (https://en.wikipedia.org/wiki/MurmurHash#MurmurHash3) \nhashed values and the count of their occurrences within the internal\n MinHash  structure belonging to  x . \n x  must be of type  setdigest . \n Examples: \n      SELECT  hash_counts ( make_set_digest ( value ) ) \n      FROM   ( VALUES   1 ,   1 ,   1 ,   2 ,   2 )  T ( value ) ; \n      -- {19144387141682250=3, -2447670524089286488=2} \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/setdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) SS58 functions  (/query-engine/Functions-and-operators/ss58) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Set Digest functions  (#set-digest-functions) Data structures  (#data-structures) Serialization  (#serialization) Functions  (#functions) make_set_digest()  (#make-set-digest) merge_set_digest()  (#merge-set-digest) intersection_cardinality()  (#intersection-cardinality) jaccard_index()  (#jaccard-index) hash_counts()  (#hash-counts)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/setdigest#functions"}
{"content": "\u200b Comparison operators {#comparison_operators} \n Operator Description < Less than > Greater than <= Less than or equal to >= Greater than or equal to = Equal <> Not equal != Not equal (non-standard but popular syntax) \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/comparison#comparison-operators-comparison-operators"}
{"content": "\u200b Range operator: BETWEEN \n The  BETWEEN  operator tests if a value is within a specified range. It\nuses the syntax  value BETWEEN min AND max : \n      SELECT   3   BETWEEN   2   AND   6 ; \n \n The statement shown above is equivalent to the following statement: \n      SELECT   3   >=   2   AND   3   <=   6 ; \n \n To test if a value does not fall within the specified range use\n NOT BETWEEN : \n      SELECT   3   NOT   BETWEEN   2   AND   6 ; \n \n The statement shown above is equivalent to the following statement: \n      SELECT   3   <   2   OR   3   >   6 ; \n \n A  NULL  in a  BETWEEN  or  NOT BETWEEN  statement is evaluated using\nthe standard  NULL  evaluation rules applied to the equivalent\nexpression above: \n      SELECT   NULL   BETWEEN   2   AND   4 ;   -- null \n \n      SELECT   2   BETWEEN   NULL   AND   6 ;   -- null \n \n      SELECT   2   BETWEEN   3   AND   NULL ;   -- false \n \n      SELECT   8   BETWEEN   NULL   AND   6 ;   -- false \n \n The  BETWEEN  and  NOT BETWEEN  operators can also be used to evaluate\nany orderable type. For example, a  VARCHAR : \n      SELECT   'Paul'   BETWEEN   'John'   AND   'Ringo' ;   -- true \n \n Note that the value, min, and max parameters to  BETWEEN  and\n NOT BETWEEN  must be the same type. For example, Trino will produce an\nerror if you ask it if John is between 2.3 and 35.2. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/comparison#range-operator-between"}
{"content": "\u200b IS NULL and IS NOT NULL \n The  IS NULL  and  IS NOT NULL  operators test whether a value is null\n(undefined). Both operators work for all data types. \n Using  NULL  with  IS NULL  evaluates to true: \n      select   NULL   IS   NULL ;   -- true \n \n But any other constant does not: \n      SELECT   3.0   IS   NULL ;   -- false \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/comparison#is-null-and-is-not-null"}
{"content": "\u200b IS DISTINCT FROM and IS NOT DISTINCT FROM {#is_distinct_operator} \n In SQL a  NULL  value signifies an unknown value, so any comparison\ninvolving a  NULL  will produce  NULL . The  IS DISTINCT FROM  and\n IS NOT DISTINCT FROM  operators treat  NULL  as a known value and both\noperators guarantee either a true or false outcome even in the presence\nof  NULL  input: \n      SELECT   NULL   IS   DISTINCT   FROM   NULL ;   -- false \n \n      SELECT   NULL   IS   NOT   DISTINCT   FROM   NULL ;   -- true \n \n In the example shown above, a  NULL  value is not considered distinct\nfrom  NULL . When you are comparing values which may include  NULL  use\nthese operators to guarantee either a  TRUE  or  FALSE  result. \n The following truth table demonstrate the handling of  NULL  in\n IS DISTINCT FROM  and  IS NOT DISTINCT FROM : \n a b a = b a <> b a DISTINCT b a NOT DISTINCT b 1 1 TRUE FALSE FALSE >  TRUE 1 2 FALSE TRUE TRUE >  FALSE 1 NULL NULL NULL TRUE >  FALSE NULL NULL NULL NULL FALSE >  TRUE \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/comparison#is-distinct-from-and-is-not-distinct-from-is-distinct-operator"}
{"content": "\u200b GREATEST and LEAST \n These functions are not in the SQL standard, but are a common extension.\nLike most other functions in Trino, they return null if any argument is\nnull. Note that in some other databases, such as PostgreSQL, they only\nreturn null if all arguments are null. \n The following types are supported:  DOUBLE ,  BIGINT ,  VARCHAR ,\n TIMESTAMP ,  TIMESTAMP WITH TIME ZONE ,  DATE \n \u200b  (#greatest) greatest () \n greatest(value1, value2, ..., valueN)  \u2192  [same as input] \n Returns the largest of the provided values. \n \u200b  (#least) least () \n least(value1, value2, ..., valueN)  \u2192  [same as input] \n Returns the smallest of the provided values. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/comparison#greatest-and-least"}
{"content": "\u200b Quantified comparison predicates: ALL, ANY and SOME {#quantified_comparison_predicates} \n The  ALL ,  ANY  and  SOME  quantifiers can be used together with\ncomparison operators in the following way: \n expression operator quantifier ( subquery ) \n \n For example: \n \n      SELECT   'hello'   =   ANY   ( VALUES   'hello' ,   'world' ) ;   -- true \n \n      SELECT   21   <   ALL   ( VALUES   19 ,   20 ,   21 ) ;   -- false \n \n      SELECT   42   >=   SOME   ( SELECT   41   UNION   ALL   SELECT   42   UNION   ALL   SELECT   43 ) ;   -- true \n \n Here are the meanings of some quantifier and comparison operator\ncombinations: \n Expression Meaning A = ALL (...) Evaluates to  true  when  A  is equal to all values. A <> ALL (...) Evaluates to  true  when  A  doesn\u2019t match any value. A < ALL (...) Evaluates to  true  when  A  is smaller than the smallest value. A = ANY (...) Evaluates to  true  when  A  is equal to any of the values. This form is equivalent to  A IN (...) . A <> ANY (...) Evaluates to  true  when  A  doesn\u2019t match one or more values. A < ANY (...) Evaluates to  true  when  A  is smaller than the biggest value. \n ANY  and  SOME  have the same meaning and can be used interchangeably. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/comparison#quantified-comparison-predicates-all-any-and-some-quantified-comparison-predicates"}
{"content": "\u200b Pattern comparison: LIKE \n The  LIKE  operator can be used to compare values with a pattern: \n     ... column [NOT] LIKE 'pattern' ESCAPE 'character'; \n \n Matching characters is case sensitive, and the pattern supports two\nsymbols for matching: \n \n _  matches any single character \n %  matches zero or more characters \n \n Typically it is often used as a condition in  WHERE  statements. An\nexample is a query to find all continents starting with  E , which\nreturns  Europe : \n      SELECT   *   FROM   ( VALUES   'America' ,   'Asia' ,   'Africa' ,   'Europe' ,   'Australia' ,   'Antarctica' )   AS  t  ( continent ) \n      WHERE  continent  LIKE   'E%' ; \n \n You can negate the result by adding  NOT , and get all other continents,\nall not starting with  E : \n      SELECT   *   FROM   ( VALUES   'America' ,   'Asia' ,   'Africa' ,   'Europe' ,   'Australia' ,   'Antarctica' )   AS  t  ( continent ) \n      WHERE  continent  NOT   LIKE   'E%' ; \n \n If you only have one specific character to match, you can use the  _ \nsymbol for each character. The following query uses two underscores and\nproduces only  Asia  as result: \n      SELECT   *   FROM   ( VALUES   'America' ,   'Asia' ,   'Africa' ,   'Europe' ,   'Australia' ,   'Antarctica' )   AS  t  ( continent ) \n      WHERE  continent  LIKE   'A__A' ; \n \n The wildcard characters  _  and  %  must be escaped to allow you to\nmatch them as literals. This can be achieved by specifying the  ESCAPE \ncharacter to use: \n      SELECT   'South_America'   LIKE   'South\\_America'   ESCAPE  '\\' ; \n \n The above query returns  true  since the escaped underscore symbol\nmatches. If you need to match the used escape character as well, you can\nescape it. \n If you want to match for the chosen escape character, you simply escape\nitself. For example, you can use  \\\\  to match for  '''' . Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/comparison) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Conditional expressions  (/query-engine/Functions-and-operators/conditional) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Comparison operators {#comparison_operators}  (#comparison-operators-comparison-operators) Range operator: BETWEEN  (#range-operator-between) IS NULL and IS NOT NULL  (#is-null-and-is-not-null) IS DISTINCT FROM and IS NOT DISTINCT FROM {#is_distinct_operator}  (#is-distinct-from-and-is-not-distinct-from-is-distinct-operator) GREATEST and LEAST  (#greatest-and-least) greatest ()  (#greatest) least ()  (#least) Quantified comparison predicates: ALL, ANY and SOME {#quantified_comparison_predicates}  (#quantified-comparison-predicates-all-any-and-some-quantified-comparison-predicates) Pattern comparison: LIKE  (#pattern-comparison-like)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/comparison#pattern-comparison-like"}
{"content": "\u200b Limitations \n Most SQL expressions can be used in a lambda body, with a few\nexceptions: \n \n Subqueries are not supported:  x -> 2 + (SELECT 3) \n Aggregations are not supported:  x -> max(y) \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/lambda#limitations"}
{"content": "\u200b Examples \n Obtain the squared elements of an array column with\n transform : \n      SELECT  numbers , \n            transform ( numbers ,  n  - >  n  *  n )   as  squared_numbers \n      FROM   ( \n          VALUES \n              ( ARRAY [ 1 ,   2 ] ) , \n              ( ARRAY [ 3 ,   4 ] ) , \n              ( ARRAY [ 5 ,   6 ,   7 ] ) \n      )   AS  t ( numbers ) ; \n \n Results : \n numbers squared_numbers [1, 2] [1, 4] [3, 4] [9, 16] [5, 6, 7] [25, 36, 49] \n The function  transform  can be also\nemployed to safely cast the elements of an array to strings: \n      SELECT  transform ( prices ,  n  - >  TRY_CAST ( n  AS   VARCHAR )   ||   '$' )   as  price_tags \n      FROM   ( \n          VALUES \n              ( ARRAY [ 100 ,   200 ] ) , \n              ( ARRAY [ 30 ,   4 ] ) \n      )   AS  t ( prices ) ; \n \n Results : \n price_tags [100 , 200 , 200 , 200 ] [30 , 4 , 4 , 4 ] \n Besides the array column being manipulated, other columns can be\ncaptured as well within the lambda expression. The following statement\nprovides a showcase of this feature for calculating the value of the\nlinear function  f(x) = ax + b  with  transform : \n      SELECT  xvalues , \n            a , \n            b , \n            transform ( xvalues ,  x  - >  a  *  x  +  b )   as  linear_function_values \n      FROM   ( \n          VALUES \n              ( ARRAY [ 1 ,   2 ] ,   10 ,   5 ) , \n              ( ARRAY [ 3 ,   4 ] ,   4 ,   2 ) \n      )   AS  t ( xvalues ,  a ,  b ) ; \n \n Results : \n xvalues a b linear_function_values [1, 2] 10 5 [15, 25] [3, 4] 4 2 [14, 18] \n Find the array elements containing at least one value greater than  100 \nwith  any_match : \n      SELECT  numbers \n      FROM   ( \n          VALUES \n              ( ARRAY [ 1 , NULL , 3 ] ) , \n              ( ARRAY [ 10 , 20 , 30 ] ) , \n              ( ARRAY [ 100 , 200 , 300 ] ) \n      )   AS  t ( numbers ) \n      WHERE  any_match ( numbers ,  n  - >    COALESCE ( n ,   0 )   >   100 ) ; \n      -- [100, 200, 300] \n \n Capitalize the f word in a string via  regexp_replace : \n      SELECT  regexp_replace ( 'once upon a time ...' ,   '^(\\w)(\\w*)(\\s+.*)$' , x  - >  upper ( x [ 1 ] )   ||  x [ 2 ]   ||  x [ 3 ] ) ; \n      -- Once upon a time ... \n \n Lambda expressions can be also applied in aggregation functions.\nFollowing statement is a sample the overly complex calculation of the\nsum of all elements of a column by making use of  reduce_agg : \n      SELECT  reduce_agg ( value ,   0 ,   ( a ,  b )   - >  a  +  b ,   ( a ,  b )   - >  a  +  b )  sum_values \n      FROM   ( \n          VALUES   ( 1 ) ,   ( 2 ) ,   ( 3 ) ,   ( 4 ) ,   ( 5 ) \n      )   AS  t ( value ) ; \n      -- 15 \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/lambda) JSON functions  (/query-engine/Functions-and-operators/json) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Limitations  (#limitations) Examples  (#examples)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/lambda#examples"}
{"content": "\u200b String operators \n The  ||  operator performs concatenation. \n The  LIKE  statement can be used for pattern matching and is documented\nin  like_operator . \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/string#string-operators"}
{"content": "\u200b String functions \n \n \u200b  (#chr) chr() \n chr(n)  \u2192 varchar \n Returns the Unicode code point  n  as a single character string. \n \u200b  (#codepoint) codepoint() \n codepoint(string)  \u2192 integer \n Returns the Unicode code point of the only character of  string . \n \u200b  (#concat) concat() \n concat(string1, ..., stringN)  \u2192 varchar \n Returns the concatenation of  string1 ,  string2 ,  ... ,  stringN . This function provides the same functionality as the SQL-standard concatenation operator ( || ). \n \u200b  (#concat-ws) concat_ws() \n concat_ws(string0, string1, ..., stringN)  \u2192 varchar \n Returns the concatenation of  string1 ,  string2 ,  ... ,  stringN  using  string0  as a separator. If  string0  is null, then the return value is null. Any null values provided in the arguments after the separator are skipped. \n \u200b  (#concat-ws-2) concat_ws() \n concat_ws(string0, array(varchar))  \u2192 varchar \n Returns the concatenation of elements in the array using  string0  as a separator. If  string0  is null, then the return value is null. Any null values in the array are skipped. \n \u200b  (#format) format() \n format(format, args...)  \u2192 varchar \n See  format . \n \u200b  (#hamming-distance) hamming_distance() \n hamming_distance(string1, string2)  \u2192 bigint \n Returns the Hamming distance of  string1  and  string2 , i.e. the number of positions at which the corresponding characters are different. Note that the two strings must have the same length. \n \u200b  (#length) length() \n length(string)  \u2192 bigint \n Returns the length of  string  in characters. \n \u200b  (#levenshtein-distance) levenshtein_distance() \n levenshtein_distance(string1, string2)  \u2192 bigint \n Returns the Levenshtein edit distance of  string1  and  string2 , i.e. the minimum number of single-character edits (insertions, deletions or substitutions) needed to change  string1  into  string2 . \n \u200b  (#lower) lower() \n lower(string)  \u2192 varchar \n Converts  string  to lowercase. \n \u200b  (#lpad) lpad() \n lpad(string, size, padstring)  \u2192 varchar \n Left pads  string  to  size  characters with  padstring . If  size  is less than the length of  string , the result is truncated to  size  characters.  size  must not be negative and  padstring  must be non-empty. \n \u200b  (#ltrim) ltrim() \n ltrim(string)  \u2192 varchar \n Removes leading whitespace from  string . \n \u200b  (#luhn-check) luhn_check() \n luhn_check(string)  \u2192 boolean \n Tests whether a  string  of digits is valid according to the  Luhn algorithm  (https://en.wikipedia.org/wiki/Luhn_algorithm) .\nThis checksum function, also known as  modulo 10  or  mod 10 , is widely applied on credit card numbers and government identification numbers to distinguish valid numbers from mistyped, incorrect numbers. \n Valid identification number: \n select luhn_check(\u201879927398713\u2019);\n\u2014 true \n Invalid identification number: \n select luhn_check(\u201879927398714\u2019);\n\u2014 false \n \u200b  (#position) position() \n position(substring IN string)  \u2192 bigint \n Returns the starting position of the first instance of  substring  in  string . Positions start with  1 . If not found,  0  is returned. \n Note: This SQL-standard function has special syntax and uses the  IN  keyword for the arguments. See also  strpos . \n \u200b  (#replace) replace() \n replace(string, search)  \u2192 varchar \n Removes all instances of  search  from  string . \n replace(string, search, replace)  \u2192 varchar \n Replaces all instances of  search  with  replace  in  string . \n \u200b  (#reverse) reverse() \n reverse(string)  \u2192 varchar \n Returns  string  with the characters \n \u200b  (#rpad) rpad() \n rpad(string, size, padstring)  \u2192 varchar \n Right pads  string  to  size  characters with  padstring . If  size  is less than the length of  string , the result is truncated to  size  characters.  size  must not be negative and  padstring  must be non-empty. \n \u200b  (#rtrim) rtrim() \n rtrim(string)  \u2192 varchar \n Removes trailing whitespace from  string . \n \u200b  (#soundex) soundex() \n soundex(char)  \u2192 string \n soundex  returns a character string containing the phonetic representation of  char . \n It is typically used to evaluate the similarity of two expressions phonetically, that is how the string sounds when spoken: \n      SELECT  name \n      FROM  nation \n      WHERE  SOUNDEX ( name )    =  SOUNDEX ( 'CHYNA' ) ; \n \n      name  | \n     -------+---- \n      CHINA | \n     (1 row) \n \n \u200b  (#split) split() \n split(string, delimiter)  \u2192 array(varchar) \n Splits  string  on  delimiter  and returns an array. \n \u200b  (#split-2) split() \n split(string, delimiter, limit)  \u2192 array(varchar) \n Splits  string  on  delimiter  and returns an array of size at most  limit . The last element in the array always contain everything left in the  string .  limit  must be a positive number. \n \u200b  (#split-part) split_part() \n split_part(string, delimiter, index)  \u2192 varchar \n Splits  string  on  delimiter  and returns the field  index . Field indexes start with  1 . If the index is larger than the number of fields, then null is returned. \n \u200b  (#split-to-map) split_to_map() \n split_to_map(string, entryDelimiter, keyValueDelimiter)  \u2192 map(varchar, varchar) \n Splits  string  by  entryDelimiter  and  keyValueDelimiter  and returns a map.  entryDelimiter  splits  string  into key-value pairs.  keyValueDelimiter  splits each pair into key and value. \n \u200b  (#split-to-multimap) split_to_multimap() \n split_to_multimap(string, entryDelimiter, keyValueDelimiter)  \u2192 map(varchar, array(varchar)) \n Splits  string  by  entryDelimiter  and  keyValueDelimiter  and returns a map containing an array of values for each unique key.  entryDelimiter  splits  string  into key-value pairs.  keyValueDelimiter  splits each pair into key and value. The values for each key will be in the same order as they appeared in  string . \n \u200b  (#strpos) strpos() \n strpos(string, substring)  \u2192 bigint \n Returns the starting position of the first instance of  substring  in  string . Positions start with  1 . If not found,  0  is returned. \n strpos(string, substring, instance)  \u2192 bigint \n Returns the position of the N-th  instance  of  substring  in  string . When  instance  is a negative number the search will start from the end of  string . Positions start with  1 . If not found,  0  is returned. \n \u200b  (#starts-with) starts_with() \n starts_with(string, substring)  \u2192 boolean \n Tests whether  substring  is a prefix of  string . \n \u200b  (#substring) substring() \n substr(string, start)  \u2192 varchar \n This is an alias for  substring . \n substring(string, start)  \u2192 varchar \n Returns the rest of  string  from the starting position  start . Positions start with  1 . A negative starting position is interpreted as being relative to the end of the string. \n substr(string, start, length)  \u2192 varchar \n This is an alias for  substring . \n substring(string, start, length)  \u2192 varchar \n Returns a substring from  string  of length  length  from the starting position  start . Positions start with  1 . A negative starting position is interpreted as being relative to the end of the string. \n \u200b  (#translate) translate() \n translate(source, from, to)  \u2192 varchar \n Returns the  source  string translated by replacing characters found in the \n translate(source, from, to)  \u2192 varchar \n Returns the  source  string translated by replacing characters found in the  from  string with the corresponding characters in the  to  string. If the  from  string contains duplicates, only the first is used. If the  source  character does not exist in the  from  string, the  source  character will be copied without translation. If the index of the matching character in the  from  string is beyond the length of the  to  string, the  source  character will be omitted from the resulting string. \n Here are some examples illustrating the translate function: \n      SELECT  translate ( 'abcd' ,   '' ,   '' ) ;   -- 'abcd' \n      SELECT  translate ( 'abcd' ,   'a' ,   'z' ) ;   -- 'zbcd' \n      SELECT  translate ( 'abcda' ,   'a' ,   'z' ) ;   -- 'zbcdz' \n      SELECT  translate ( 'Palho\u00e7a' ,   '\u00e7' , 'c' ) ;   -- 'Palhoca' \n      SELECT  translate ( 'abcd' ,   'b' ,  U & '\\+01F600' ) ;   -- a\ud83d\ude00cd \n      SELECT  translate ( 'abcd' ,   'a' ,   '' ) ;   -- 'bcd' \n      SELECT  translate ( 'abcd' ,   'a' ,   'zy' ) ;   -- 'zbcd' \n      SELECT  translate ( 'abcd' ,   'ac' ,   'z' ) ;   -- 'zbd' \n      SELECT  translate ( 'abcd' ,   'aac' ,   'zq' ) ;   -- 'zbd' \n \n \u200b  (#trim) trim() \n trim(string)  \u2192 varchar \n Removes leading and trailing whitespace from  string . \n trim( \\[ \\[ specification \\] \\[ string \\] FROM \\] source )  \u2192 varchar \n Removes any leading and/or trailing characters as specified up to and including  string  from  source : \n      SELECT  trim ( '!'   FROM   '!foo!' ) ;   -- 'foo' \n      SELECT  trim ( LEADING  FROM   '  abcd' ) ;    -- 'abcd' \n      SELECT  trim ( BOTH  '$'   FROM   '$var$' ) ;   -- 'var' \n      SELECT  trim ( TRAILING  'ER'   FROM  upper ( 'worker' ) ) ;   -- 'WORK' \n \n \u200b  (#upper) upper() \n upper(string)  \u2192 varchar \n Converts  string  to uppercase. \n \u200b  (#word-stem) word_stem() \n word_stem(word)  \u2192 varchar \n Returns the stem of  word  in the English language. \n word_stem(word, lang)  \u2192 varchar \n Returns the stem of  word  in the  lang  language. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/string#string-functions"}
{"content": "\u200b Unicode functions \n \u200b  (#keccak) keccak() \n keccak(varbinary)  \u2192 varbinary \n Returns the Keccak-256 hash of  varbinary . \n      SELECT  keccak ( to_utf8 ( 'Transfer(address,address,uint256)' ) )   --0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef \n \n \u200b  (#normalize) normalize() \n normalize(string)  \u2192 varchar \n Transforms  string  with NFC normalization form. \n normalize(string, form)  \u2192 varchar \n Transforms  string  with the specified normalization form.  form  must be one of the following keywords: \n Form Description NFD Canonical Decomposition NFC Canonical Decomposition, followed by Canonical Composition NFKD Compatibility Decomposition NFKC Compatibility Decomposition, followed by Canonical Composition \n \n \u200b  (#to-utf8) to_utf8() \n to_utf8(string)  \u2192 varbinary \n Encodes  string  into a UTF-8 varbinary representation. \n      SELECT  to_utf8 ( 'Hello, world!' ) ;   -- 0x48656C6C6F2C20776F726C6421 \n      Select  keccak ( to_utf8 ( 'Transfer(address,address,uint256)' ) )   --0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef  \n \n \u200b  (#from-utf8) from_utf8() \n from_utf8(binary)  \u2192 varchar \n Decodes a UTF-8 encoded string from  binary . Invalid UTF-8 sequences are replaced with the Unicode replacement character  U+FFFD . \n from_utf8(binary, replace)  \u2192 varchar \n Decodes a UTF-8 encoded string from  binary . Invalid UTF-8 sequences are replaced with  replace . The replacement string  replace  must either be a single character or empty (in which case invalid characters are removed). Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/string) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) System information  (/query-engine/Functions-and-operators/system) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page String operators  (#string-operators) String functions  (#string-functions) chr()  (#chr) codepoint()  (#codepoint) concat()  (#concat) concat_ws()  (#concat-ws) concat_ws()  (#concat-ws-2) format()  (#format) hamming_distance()  (#hamming-distance) length()  (#length) levenshtein_distance()  (#levenshtein-distance) lower()  (#lower) lpad()  (#lpad) ltrim()  (#ltrim) luhn_check()  (#luhn-check) position()  (#position) replace()  (#replace) reverse()  (#reverse) rpad()  (#rpad) rtrim()  (#rtrim) soundex()  (#soundex) split()  (#split) split()  (#split-2) split_part()  (#split-part) split_to_map()  (#split-to-map) split_to_multimap()  (#split-to-multimap) strpos()  (#strpos) starts_with()  (#starts-with) substring()  (#substring) translate()  (#translate) trim()  (#trim) upper()  (#upper) word_stem()  (#word-stem) Unicode functions  (#unicode-functions) keccak()  (#keccak) normalize()  (#normalize) to_utf8()  (#to-utf8) from_utf8()  (#from-utf8)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/string#unicode-functions"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functions and Operators System information Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators System information ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/system"}
{"content": "\u200b System information \n Functions providing information about the Trino cluster system environment. More information is available by querying the various schemas and tables exposed by the  /connector/system . \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/system#system-information"}
{"content": "\u200b Function \n version()  -> varchar \n Returns the Trino version used on the cluster. Equivalent to the value of the  node_version  column in the  system.runtime.nodes  table. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/system) String functions and operators  (/query-engine/Functions-and-operators/string) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page System information  (#system-information) Function  (#function)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/system#function"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation DuneSQL Writing Efficient Queries Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) DuneSQL Writing Efficient Queries Get the most out of DuneSQL by writing efficient queries. Writing efficient queries is essential for getting the most out of Dune. This guide will help you understand how to write efficient queries on DuneSQL. \n In order to write efficient queries on DuneSQL, it\u2019s important to understand the underlying architecture of the system. This guide will help you understand how DuneSQL works under the hood so you can write more efficient queries and get the most out of Dune. Sadly there is no magic bullet that will make all your queries run faster, but understanding the underlying architecture of DuneSQL will help you write more efficient queries and get the most out of the system. \n ", "url": "https://docs.dune.com/query-engine/writing-efficient-queries"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functions and Operators Overview Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators Overview DuneSQL supports a wide range of built-in functions and operators. This chapter describes the built-in SQL functions and operators supported by Trino. They allow you to implement complex functionality and behavior of the SQL executed by Trino operating on the underlying data sources. \n Using  SHOW FUNCTIONS  in the query editor returns a list of all available functions, including custom functions, with all supported arguments and a short description. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/index"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functions and Operators Aggregate functions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators Aggregate functions Aggregate functions operate on a set of values to compute a single\nresult. \n Except for  count ,  count_if ,  max_by ,  min_by  and  approx_distinct , all of these aggregate functions ignore null values and return null for no input rows or when all values are null. For example,  sum  returns null rather than zero and  avg  does not include null values in the count. The  coalesce  function can be used to convert null into zero. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/aggregate"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functions and Operators Map functions and operators Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators Map functions and operators ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/map"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functions and Operators Regular expression functions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators Regular expression functions All of the regular expression functions use the  Java pattern  ()  syntax,\nwith a few notable exceptions: \n \n When using multi-line mode (enabled via the  (?m)  flag), only  \\n \nis recognized as a line terminator. Additionally, the  (?d)  flag is\nnot supported and must not be used. \n Case-insensitive matching (enabled via the  (?i)  flag) is always\nperformed in a Unicode-aware manner. However, context-sensitive and\nlocal-sensitive matching is not supported. Additionally, the  (?u) \nflag is not supported and must not be used. \n Surrogate pairs are not supported. For example,  \\uD800\\uDC00  is\nnot treated as  U+10000  and must be specified as  \\x{10000} . \n Boundaries ( \\b ) are incorrectly handled for a non-spacing mark\nwithout a base character. \n \\Q  and  \\E  are not supported in character classes (such as\n [A-Z123] ) and are instead treated as literals. \n Unicode character classes ( \\p{prop} ) are supported with the\nfollowing differences: \n \n All underscores in names must be removed. For example, use\n OldItalic  instead of  Old_Italic . \n Scripts must be specified directly, without the  Is ,  script= \nor  sc=  prefixes. Example:  \\p{Hiragana} \n Blocks must be specified with the  In  prefix. The  block=  and\n blk=  prefixes are not supported. Example:  \\p{Mongolian} \n Categories must be specified directly, without the  Is ,\n general_category=  or  gc=  prefixes. Example:  \\p{L} \n Binary properties must be specified directly, without the  Is .\nExample:  \\p{NoncharacterCodePoint} \n \n \n \n \u200b  (#regexp-count) regexp_count() \n regexp_count(string, pattern)  \u2192 bigint \n Returns the number of occurrence of  pattern  in  string : \n      SELECT  regexp_count ( '1a 2b 14m' ,   '\\s*[a-z]+\\s*' ) ;   -- 3 \n \n \u200b  (#regexp-extract-all) regexp_extract_all() \n regexp_extract_all(string, pattern)  \u2192 array(varchar) \n Returns the substring(s) matched by the regular expression  pattern  in\n string : \n      SELECT  regexp_extract_all ( '1a 2b 14m' ,   '\\d+' ) ;   -- [1, 2, 14] \n \n regexp_extract_all(string, pattern, group)  \u2192 array(varchar) \n Finds all occurrences of the regular expression  pattern  in  string \nand returns the  capturing group number  ()   group : \n      SELECT  regexp_extract_all ( '1a 2b 14m' ,   '(\\d+)([a-z]+)' ,   2 ) ;   -- ['a', 'b', 'm'] \n \n \u200b  (#regexp-extract) regexp_extract() \n regexp_extract(string, pattern)  \u2192 varchar \n Returns the f substring matched by the regular expression  pattern \nin  string : \n      SELECT  regexp_extract ( '1a 2b 14m' ,   '\\d+' ) ;   -- 1 \n \n regexp_extract(string, pattern, group)  \u2192 varchar \n Finds the f occurrence of the regular expression  pattern  in\n string  and returns the  capturing group number  ()   group : \n      SELECT  regexp_extract ( '1a 2b 14m' ,   '(\\d+)([a-z]+)' ,   2 ) ;   -- 'a' \n \n \u200b  (#regexp-like) regexp_like() \n regexp_like(string, pattern)  \u2192 boolean \n Evaluates the regular expression  pattern  and determines if it is\ncontained within  string . \n The  pattern  only needs to be contained within  string , rather than\nneeding to match all of  string . In other words, this performs a\n contains  operation rather than a  match  operation. You can match the\nentire string by anchoring the pattern using  ^  and  $ : \n      SELECT  regexp_like ( '1a 2b 14m' ,   '\\d+b' ) ;   -- true \n \n \u200b  (#regexp-position) regexp_position() \n regexp_position(string, pattern)  \u2192 integer \n Returns the index of the f occurrence (counting from 1) of  pattern \nin  string . Returns -1 if not found: \n      SELECT  regexp_position ( 'I have 23 apples, 5 pears and 13 oranges' ,   '\\b\\d+\\b' ) ;   -- 8 \n \n regexp_position(string, pattern, start)  \u2192 integer \n Returns the index of the f occurrence of  pattern  in  string ,\nstarting from  start  (include  start ). Returns -1 if not found: \n      SELECT  regexp_position ( 'I have 23 apples, 5 pears and 13 oranges' ,   '\\b\\d+\\b' ,   5 ) ;   -- 8 \n      SELECT  regexp_position ( 'I have 23 apples, 5 pears and 13 oranges' ,   '\\b\\d+\\b' ,   12 ) ;   -- 19 \n \n regexp_position(string, pattern, start, occurrence)  \u2192 integer \n Returns the index of the nth  occurrence  of  pattern  in  string ,\nstarting from  start  (include  start ). Returns -1 if not found: \n      SELECT  regexp_position ( 'I have 23 apples, 5 pears and 13 oranges' ,   '\\b\\d+\\b' ,   12 ,   1 ) ;   -- 19 \n      SELECT  regexp_position ( 'I have 23 apples, 5 pears and 13 oranges' ,   '\\b\\d+\\b' ,   12 ,   2 ) ;   -- 31 \n      SELECT  regexp_position ( 'I have 23 apples, 5 pears and 13 oranges' ,   '\\b\\d+\\b' ,   12 ,   3 ) ; \n \n \u200b  (#regexp-replace) regexp_replace() \n regexp_replace(string, pattern)  \u2192 varchar \n Removes every instance of the substring matched by the regular\nexpression  pattern  from  string : \n SELECT regexp_replace(\u20181a 2b 14m\u2019, \u2018\\d+[ab] \u2019); \u2014 \u201814m\u2019 \n regexp_replace(string, pattern, replacement)  \u2192 varchar \n Replaces every instance of the substring matched by the regular\nexpression  pattern  in  string  with  replacement .  Capturing\ngroups  ()  can be referenced in  replacement  using  $g  for a numbered\ngroup or  ${name}  for a named group. A dollar sign ( $ ) may be\nincluded in the replacement by escaping it with a backslash ( \\$ ): \n      SELECT  regexp_replace ( '1a 2b 14m' ,   '(\\d+)([ab]) ' ,   '3c$2 ' ) ;   -- '3ca 3cb 14m' \n \n regexp_replace(string, pattern, function)  \u2192 varchar \n Replaces every instance of the substring matched by the regular\nexpression  pattern  in  string  using  function . The\n lambda expression <lambda>  function is\ninvoked for each match with the  capturing groups  ()  passed as an array.\nCapturing group numbers start at one; there is no group for the entire\nmatch (if you need this, surround the entire expression with\nparenthesis). : \n SELECT regexp_replace(\u2018new york\u2019, \u2019(\\w)(\\w*)\u2019, x -> upper(x[1]) || lower(x[2])); \u2014\u2018New York\u2019 \n \u200b  (#regexp-split) regexp_split() \n regexp_split(string, pattern)  \u2192 array(varchar) \n Splits  string  using the regular expression  pattern  and returns an\narray. Trailing empty strings are preserved: \n      SELECT  regexp_split ( '1a 2b 14m' ,   '\\s*[a-z]+\\s*' ) ;   -- [1, 2, 14, ] \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/regexp) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page regexp_count()  (#regexp-count) regexp_extract_all()  (#regexp-extract-all) regexp_extract()  (#regexp-extract) regexp_like()  (#regexp-like) regexp_position()  (#regexp-position) regexp_replace()  (#regexp-replace) regexp_split()  (#regexp-split)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/regexp"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functions and Operators Decimal functions and operators Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators Decimal functions and operators ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/decimal"}
{"content": "\u200b DuneSQL Architecture \n DuneSQL is a Trino-based query engine designed for handling data stored in a columnar format. More specifically, we use Parquet files as the underlying storage format. This allows for efficient data access and query processing, as well as fast data loading and data compression. In order to understand how to write efficient queries on DuneSQL, it\u2019s important to understand how data is stored and accessed in DuneSQL. Therefore this guide will start with a short introduction to databases and then move on to how DuneSQL works under the hood. \n ", "url": "https://docs.dune.com/query-engine/writing-efficient-queries#dunesql-architecture"}
{"content": "\u200b Short Introduction to Databases \n Let\u2019s start with a short introduction into databases so we can understand what we need to optimize for when writing queries on DuneSQL. \n At their core, databases are sophisticated systems designed to store, retrieve, and manage data. Their primary goal is to provide fast, efficient, and reliable access to vast amounts of structured information. You can think of a database as a collection of tables, where each table is a collection of rows and columns. Conceptually, these tables exist in two ways: \n \n Logical : The logical view of a table is the way the data is organized and presented to the user. This is the view you see when you query a table. \n Physical : The physical view of a table is the way the data is stored on disk. This is the view you see when you look at the underlying files that make up the table. \n \n Databases are designed to optimize for the logical view of a table, which is the view that users interact with. However, the physical view of a table is also important, as it determines how the data is stored and accessed. In order to optimize the usability of the logical view of a table, databases use a variety of techniques to optimize the physical view of a table. These techniques include: \n \n Data partitioning : Data partitioning is a technique that divides data into smaller chunks called partitions. This reduces the amount of data that needs to be stored and accessed, which improves performance. \n Data indexing : Data indexing is a technique that creates a data structure called an index. This data structure contains information about the data in a table, which allows the database to quickly find the data it needs. \n Data storage layout : Data storage layout relates to how the data is stored on disk. This includes the file format, how the data is physically stored on disk, and how the data is organized in memory. The right data storage layout can significantly improve performance. \n Data compression : Data compression is a technique that reduces the size of data by removing redundant information. This reduces the amount of data that needs to be stored and accessed, which improves performance. \n Data caching : Data caching is a technique that stores frequently accessed data in memory. This reduces the amount of data that needs to be stored and accessed, which improves performance. \n \n For the most part, these techniques are employed in the background and are not visible to the user. However, understanding how  data partitioning ,  data indexing  and the  data storage layout  work is essential for writing efficient queries on DuneSQL. \n Databases employ these techniques to combat their most significant challenge:  the I/O bound nature of data storage . I/O bound refers to the fact that the speed of data access is limited by the speed of the storage device. Read speed, the time it takes to load data from storage to memory, is an essential constraint of databases. \n Every time you query a table, the database needs to read the data from disk into memory. This happens in a unit called a page. Pages are the smallest unit of data that can be read from disk into memory. Since reading pages from disk is slow, databases try to minimize the number of pages that need to be read into memory when querying a table. This is where data partitioning and data indexing come into play. In the next section, we\u2019ll take a closer look at how DuneSQL works and how you can write queries that minimize the number of pages that need to be read into memory. \n To quickly summarize:  The goal of a database is to provide fast, efficient, and reliable access to vast amounts of structured information. In the end, we want to access the logical view of a table as quickly as possible. To do this, database administrators use a variety of techniques to optimize the physical view of a table. These techniques include data partitioning, data indexing, data compression, and data caching. The goal of these techniques is to minimize the number of pages that need to be read into memory when querying a table. \n ", "url": "https://docs.dune.com/query-engine/writing-efficient-queries#short-introduction-to-databases"}
{"content": "\u200b DuneSQL Architecture \n Now that we understand how databases work, let\u2019s take a look at how DuneSQL works under the hood. Specifically, let\u2019s look at how data is stored and accessed in DuneSQL. \n Dune stores data in parquet files, which are first and foremost columnar storage files, but also utilize some of the advantages of row-oriented storage. Data in parquet systems is partitioned by rows into multiple parquet files, and within each file, the data is further partitioned into row groups. However, the pages inside of row groups store data in columns rather than rows. As a result, the database appears row-oriented at a higher level, but it reads data from column-oriented pages when accessing specific values. Additionally, each parquet file contains metadata about the data it stores, mainly  min/max  column statistics for each column. This allows the database to efficiently skip entire parquet files or row groups within files while scanning through a table, provided that the column contains values that are not random and can be ordered.  Writing queries that take advantage of this is essential for writing efficient queries on DuneSQL. \n In a very simplified schematic view, our  ethereum.transactions  table is stored in a parquet file that looks like this: \n very simplified contents of a parquet file \n Schematic view of a parquet file \n What\u2019s important to understand here is that the traditional index structure of a database is not needed in DuneSQL. Instead, the  min/max  values of each column are used to efficiently skip entire parquet files or row groups within files while scanning through a table, provided that the column contains values that are not random and can be ordered. This is a key difference between DuneSQL and e.g. Snowflake. \n If you query a table in DuneSQL, the system will access the data in the following order: \n \n \n File Level:  At the foundational level, the query engine locates the specific parquet files associated with the table or a portion of the table being queried. It reads the metadata contained in the footer of each parquet file to determine whether it might contain the data needed for the query. It will skip any files that do not contain the data needed for the query. \n \n \n Row Group Level:  Once the appropriate Parquet file is identified, the engine will access the relevant row groups within the file, based on the query conditions. Again, it will first read the metadata of each row group to determine whether it might contain the data needed for the query. If the row group does not contain the data needed for the query, it will skip the row group and move on to the next one. \n \n \n Column Chunk Level:  Once the appropriate row group is identified, the system will access the relevant column chunks within the row group, based on the query conditions. The column chunks contain the actual data that is needed for the query. The database will only read the column chunks that contain the data needed for the query. It will not read the logical row - saving time and resources. \n \n \n Page Level:  Within the column chunk, the data is further segmented into pages. The database reads these pages into memory, benefiting from any compression or encoding optimizations. \n \n \n During this process the engine starts stream processing from the first chunks of data it has read. It will optimize on the flight: based on the data it has already read, it can resign from reading other data if that data is recognized as irrelevant. This is called dynamic filtering and will usually save a lot of resources. \n If the query is too large to be processed in memory, the data will \u201cspill\u201d from memory to disk. This is called \u201cspill to disk\u201d and is a common occurrence in databases. This will negatively impact query performance, as reading data from disk is much slower than reading data from memory. To avoid this issue, it\u2019s important to write efficient queries that minimize the amount of data that needs to be read into memory. \n ", "url": "https://docs.dune.com/query-engine/writing-efficient-queries#dunesql-architecture-2"}
{"content": "\u200b Tips for Writing Efficient Queries on DuneSQL \n To write efficient queries on DuneSQL, it\u2019s crucial to use filter conditions based on columns that are not random and can be ordered. Columns like  block_time ,  block_date  and  block_number  are the best candidates for this, as they are sequentially ordered and can be used to efficiently skip entire parquet files or row groups within files while scanning through a table. \n Let\u2019s take a look at an example. Say you want to query the  ethereum.transactions  table for a specific transaction hash. The query would usually look like this: \n SELECT   *   FROM  ethereum . transactions \n WHERE   hash   =   0xce1f1a2dd0c10fcf9385d14bc92c686c210e4accf00a3fe7ec2b5db7a5499cff \n \n using the steps above the query engine would do the following: \n \n File Level:  The query engine tries to locate the specific parquet files associated with the table or a portion of the table being queried. It reads the metadata contained in the footer of each parquet file to determine whether it might contain the data needed for the query. It will try to skip any files that do not contain the data needed for the query. However, since the query is based on a random hash, the engine will not be able to skip any files. It will have to read all the files associated with the table. \n \n We can stop going through the steps here, as the query engine will have to read almost all the files and row groups associated with the table. This will negatively impact query performance, as having to read all pages from all column chunks in all row groups in all parquet files is very inefficient. There might be some very unlikely edge cases where the engine can skip some files, but in general, the engine will have to read all the files associated with the table. An example of a row group or column chunk that can be skipped for this query is if the hash column for a row group or file miraculously contains only values from  0xd... - 0xz... . In that case, since our hash is  0xc... , there is no way that the row group or file contains the hash we are looking for, and the engine can skip it. However, this is very unlikely to happen, and most likely the engine will have to read all the files associated with the table. \n Now let\u2019s take a look at a query that uses a column that is not random and can be ordered, such as  block_number : \n SELECT   *   FROM  ethereum . transactions \n WHERE  block_number  =   14854616 \n AND   hash   =   0xce1f1a2dd0c10fcf9385d14bc92c686c210e4accf00a3fe7ec2b5db7a5499cff \n \n using the steps above the query engine would do the following: \n \n \n File Level:  The query engine tries to locate the specific parquet files associated with the table or a portion of the table being queried. It reads the metadata contained in the footer of each parquet file to determine whether it might contain the data needed for the query. In this case, the engine will check whether the  block_number  we are searching for is within the range of  min/max  values for the  block_number  column in the footer of each parquet file. For example, if the engine starts reading the first parquet file and sees that the  min/max  values for the  block_number  column are  14854600  and  14854620 , it will know that the file does not contain the data needed for the query. It will skip the file and move on to the next one. This will significantly reduce the amount of data that needs to be read into memory, which will improve query performance. \n \n \n Row Group Level:  Once the appropriate Parquet file is identified, the engine will access the relevant row groups within the file, based on the query conditions. Again, it will first read the metadata of each row group to determine whether it might contain the data needed for the query. If the row group does not contain the data needed for the query, it will skip the row group and move on to the next one. This will further reduce the amount of data that needs to be read into memory, which will improve query performance. \n \n \n Column Chunk Level:  Once the appropriate row group is identified, the system will access the relevant column chunks within the row group, based on the query conditions. The column chunks contain the actual data that is needed for the query. The database will only read the column chunks that contain the data needed for the query. It will not read the logical row - saving time and resources. \n \n \n Page Level:  Within the column chunk, the data is further segmented into pages. The database reads these pages into memory, benefiting from any compression or encoding optimizations. \n \n \n As you can see, the query engine can skip entire parquet files and row groups within files while scanning through a table, provided that the column contains values that are not random and can be ordered. This is why it\u2019s important to use filter conditions based on columns that are not random and can be ordered, such as  block_number , block_time  or  block_date . \n The above example is pretty theoretical, as you will most likely not be querying the  ethereum.transactions  table for a specific transaction hash. However, the same principle applies to other tables and queries. For example, if we want to query  ethereum.traces  for all calls to a specific smart contract, we can use  block_number , block_time  or  block_date  to skip entire parquet files and row groups within files while scanning through the table. \n Usually you would write a query like this: \n Select \n    * \n FROM  ethereum . traces \n WHERE   to   =   0x510100D5143e011Db24E2aa38abE85d73D5B2177 \n \n With our new knowledge, we can deduce that this query will be very inefficient, as the engine will have to read almost all the files and row groups associated with the table. Instead, we can optimize the query by helping the engine to skip files with a  block_number  greater than a specific value. For example, if we know that the smart contract was deployed in block  17580248 , we can write the query like this: \n Select \n    \"from\" \n    , to \n    , block_time \n    , tx_hash \n    , input \n FROM  ethereum . traces \n where  block_number  >   17580247 \n and   to   =   0x510100D5143e011Db24E2aa38abE85d73D5B2177 \n \n By including the  block_number  column in the query, the engine can quickly narrow down the search to files and row groups that have a  block_number  greater than  17580247 . This significantly reduces the amount of data that needs to be read, thereby improving query performance. Additionally, only querying the columns you absolutely need will also improve query performance. \n We can also apply the same principle to join tables. For example, if we want to join  ethereum.transactions  with  uniswap_v3_ethereum.Pair_evt_Swap , we can write the query like this: \n Select \n    to , \n    \"from\" , \n    value , \n   block_date , \n   sqrt_price_x96 , \n FROM \n   uniswap_v3_ethereum . Pair_evt_Swap swap \n    inner   join  ethereum . transactions  t \n      on  swap . evt_tx_hash  =  t . hash \n      and  swap . evt_block_number  =  t . block_number \n where \n   swap . contract_address  =   0x510100D5143e011Db24E2aa38abE85d73D5B2177 \n \n By including the  block_number  column in the join condition, the engine can quickly narrow down the search in  ethereum.transactions  to files and row groups that contain the  block_number  contained in a specific row in  uniswap_v3_ethereum.Pair_evt_Swap . This significantly reduces the amount of data that needs to be read, thereby improving query performance. \n It also makes a difference whether we join  ethereum.transactions  to  uniswap_v3_ethereum.Pair_evt_Swap  or the other way around. The following query will be even faster: \n Select \n    to , \n    \"from\" , \n    value , \n   block_time , \n   sqrt_price_x96 \n FROM  ethereum . transactions  t \n inner   join  uniswap_v3_ethereum . Pair_evt_Swap swap \n    on  t . hash   =  swap . evt_tx_hash \n    and  t . block_number  =  swap . evt_block_number \n where \n   swap . contract_address  =   0x510100D5143e011Db24E2aa38abE85d73D5B2177 \n \n \n This join order optimization is related to the size of the tables.  You should always join the smaller table on the bigger table . In this case,  ethereum.transactions  is much bigger than  uniswap_v3_ethereum.Pair_evt_Swap , so we should join  uniswap_v3_ethereum.Pair_evt_Swap  with  ethereum.transactions . \n Inner joins are generally faster than outer joins. If you can use an inner join instead of an outer join, it will improve query performance. \n ", "url": "https://docs.dune.com/query-engine/writing-efficient-queries#tips-for-writing-efficient-queries-on-dunesql"}
{"content": "\u200b Notable Exceptions \n A notable exception to the general rule of using sequentially ordered columns is the Solana dataset  account_activity , which is ordered by  account_keys  rather than  block_time . This allows for utilizing the min/max values for  account_keys  when building queries based on raw Solana data. \n ", "url": "https://docs.dune.com/query-engine/writing-efficient-queries#notable-exceptions"}
{"content": "\u200b Additional Tips for Writing Efficient Queries on DuneSQL \n In addition to leveraging the columnar storage format and using sequentially ordered columns, as discussed in the previous section, here are more tips to help you write efficient queries on DuneSQL: \n \n \n Limit the columns in the SELECT clause : Only request the columns you need, as it reduces the amount of data the query engine needs to process. \n \n \n Use the LIMIT clause : If you are only interested in a specific number of rows, use the LIMIT clause to avoid processing more data than necessary. \n \n \n Leverage partition pruning : If your data is partitioned, use partition keys in the WHERE clause to help the query engine prune unnecessary partitions and reduce the amount of data scanned. In Dune almost all tables are partitioned by time and/or block number. \n \n \n Filter early and use predicate pushdown : Apply filters as early as possible in the query to reduce the amount of data being processed. This takes advantage of predicate pushdown, which pushes filter conditions down to the storage layer, reducing the amount of data read from storage. \n \n \n Use window functions : Window functions can be more efficient than self-joins or subqueries for computing aggregations over a set of rows related to the current row. \n \n \n Avoid using DISTINCT when possible : DISTINCT can be computationally expensive, especially on large datasets. Trino has implemented a range of  approximate aggregate functions  (/query-engine/Functions-and-operators/aggregate#approximate-aggregate-functions)  functions that can be used to get a good estimate of the distinct values in a column with a much lower computational cost. \n \n \n Use  UNION ALL  instead of  UNION : If you\u2019re combining the results of multiple queries, use  UNION ALL  instead of  UNION  to avoid the overhead of removing duplicate rows. \n \n \n Careful with CTEs : CTEs are inlined in each place where they\u2019re referenced (they\u2019re not precomputed) \u2014 and so using CTEs multiple times, or combining CTEs in CTEs can lead to huge query plans. \n \n \n Optimize data types : Use appropriate data types for your columns, as it can improve query performance by reducing the amount of data processed. For example,  varbinary  operations are faster than  varchar  operations as the data is compressed and encoded. Always use the smallest possible data type for your columns. \n \n \n Only order when necessary : Ordering results can be computationally expensive. If you don\u2019t need ordered results, avoid using  ORDER BY . \n \n \n Always use the actual data while filtering. Do not use functions on the filter columns : For example, if you want to filter on a date, do not use  date_trunc('day', block_time) > '2022-01-01' . Instead, use  block_time > '2022-01-01' . The first example will not be able to use the min/max values of the  block_time  column to skip entire parquet files or row groups within files while scanning through a table, while the second example will. The same goes for other functions, such as  substr ,  lower ,  upper  etc. \n \n \n Use the  EXPLAIN  command : Use the  EXPLAIN  command to understand how the query engine processes your query. This can help you identify potential performance bottlenecks and optimize your queries accordingly. \n \n \n Check your execution statistics : Click on \u201clast run x seconds ago\u201d to see the execution statistics for your query. This can help you identify potential performance bottlenecks and optimize your queries accordingly. \n \n \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/writing-efficient-queries) Materialized Views  (/query-engine/materialized-views) Datatypes  (/query-engine/datatypes) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page DuneSQL Architecture  (#dunesql-architecture) Short Introduction to Databases  (#short-introduction-to-databases) DuneSQL Architecture  (#dunesql-architecture-2) Tips for Writing Efficient Queries on DuneSQL  (#tips-for-writing-efficient-queries-on-dunesql) Notable Exceptions  (#notable-exceptions) Additional Tips for Writing Efficient Queries on DuneSQL  (#additional-tips-for-writing-efficient-queries-on-dunesql)", "url": "https://docs.dune.com/query-engine/writing-efficient-queries#additional-tips-for-writing-efficient-queries-on-dunesql"}
{"content": "\u200b DuneSQL Added Functions: \n \n Varbinary datatypes for EVM data  (/query-engine/Functions-and-operators/varbinary) \n Base58 for Bitcoin&Solana data  (/query-engine/Functions-and-operators/base58) \n ss58 for Substrate data  (/query-engine/Functions-and-operators/ss58) \n Tron Address Functions  (/query-engine/Functions-and-operators/tronaddress) \n Chain Utility Functions  (/query-engine/Functions-and-operators/chain-utility-functions) \n Varchar Utility Functions  (/query-engine/Functions-and-operators/varchar-utility-functions) \n LiveFetch Functions  (/query-engine/Functions-and-operators/live-fetch) \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/index#dunesql-added-functions"}
{"content": "\u200b Trino Base Functions: \n \n Aggregate  (query-engine/Functions-and-operators/aggregate) \n Array  (/query-engine/Functions-and-operators/array) \n Binary  (/query-engine/Functions-and-operators/binary) \n Bitwise  (/query-engine/Functions-and-operators/bitwise) \n Comparison  (/query-engine/Functions-and-operators/comparison) \n Conditional  (/query-engine/Functions-and-operators/conditional) \n Conversion  (/query-engine/Functions-and-operators/conversion) \n Date and time  (/query-engine/Functions-and-operators/datetime) \n Decimal  (/query-engine/Functions-and-operators/decimal) \n HyperLogLog  (/query-engine/Functions-and-operators/hyperloglog) \n JSON  (/query-engine/Functions-and-operators/json) \n Lambda  (/query-engine/Functions-and-operators/lambda) \n Logical  (/query-engine/Functions-and-operators/logical) \n Map  (/query-engine/Functions-and-operators/map) \n Math  (/query-engine/Functions-and-operators/math) \n Quantile digest  (/query-engine/Functions-and-operators/qdigest) \n Regular expression  (/query-engine/Functions-and-operators/regexp) \n Set Digest  (/query-engine/Functions-and-operators/setdigest) \n String  (/query-engine/Functions-and-operators/string) \n System  (/query-engine/Functions-and-operators/system) \n Teradata  (/query-engine/Functions-and-operators/teradata) \n T-Digest  (/query-engine/Functions-and-operators/tdigest) \n URL  (/query-engine/Functions-and-operators/url) \n UUID  (/query-engine/Functions-and-operators/uuid) \n Window  (/query-engine/Functions-and-operators/window) \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/index) Reserved keywords  (/query-engine/reserved-keywords) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page DuneSQL Added Functions:  (#dunesql-added-functions) Trino Base Functions:  (#trino-base-functions)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/index#trino-base-functions"}
{"content": "\u200b Ordering during aggregation \n Some aggregate functions such as  array_agg  produce different results depending on the order of input values. This ordering can be specified by writing an  order-by-clause  within the aggregate function: \n     array_agg ( x  ORDER   BY  y  DESC ) \n     array_agg ( x  ORDER   BY  x ,  y ,  z ) \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/aggregate#ordering-during-aggregation"}
{"content": "\u200b Filtering during aggregation \n The  FILTER  keyword can be used to remove rows from aggregation\nprocessing with a condition expressed using a  WHERE  clause. This is\nevaluated for each row before it is used in the aggregation and is\nsupported for all aggregate functions. \n aggregate_function ( . . . )  FILTER  ( WHERE   < condition > ) \n \n A common and very useful example is to use  FILTER  to remove nulls from\nconsideration when using  array_agg : \n      SELECT  array_agg ( name )  FILTER  ( WHERE  name  IS   NOT   NULL ) \n      FROM  region ; \n \n As another example, imagine you want to add a condition on the count for\nIris flowers, modifying the following query: \n      SELECT  species , \n             count ( * )   AS  count \n      FROM  iris \n      GROUP   BY  species ; \n \n species    | count \n -----------+------- \n setosa     |   50 \n virginica  |   50 \n versicolor |   50 \n \n If you just use a normal  WHERE  statement you lose information: \n      SELECT  species , \n          count ( * )   AS  count \n      FROM  iris \n      WHERE  petal_length_cm  >   4 \n      GROUP   BY  species ; \n \n species    | count \n -----------+------- \n virginica  |   50 \n versicolor |   34 \n \n Using a filter you retain all information: \n      SELECT  species , \n             count ( * )  FILTER  ( where  petal_length_cm  >   4 )   AS  count \n      FROM  iris \n      GROUP   BY  species ; \n \n species    | count \n -----------+------- \n virginica  |   50 \n setosa     |    0 \n versicolor |   34 \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/aggregate#filtering-during-aggregation"}
{"content": "\u200b General aggregate functions \n \u200b  (#arbitrary) arbitrary() \n arbitrary(x)  \u2192 [same as input] \n Returns an arbitrary non-null value of  x , if one exists. \n \u200b  (#any-value) any_value() \n any_value(x)  \u2192 [same as input] \n Returns an arbitrary non-null value of  x , if one exists. This is an alias for  arbitrary . \n \u200b  (#array-agg) array_agg() \n array_agg(x)  \u2192 [same as input] \n Returns an array created from the input  x  elements. \n \u200b  (#avg) avg() \n avg(x)  \u2192 double \n Returns the average (arithmetic mean) of all input values. \n avg(time interval type)  \u2192 time interval type \n Returns the average interval length of all input values. \n \u200b  (#bool-and) bool_and() \n bool_and(boolean)  \u2192 boolean \n Returns  TRUE  if every input value is  TRUE , otherwise  FALSE . \n \u200b  (#bool-or) bool_or() \n bool_or(boolean)  \u2192 boolean \n Returns  TRUE  if any input value is  TRUE , otherwise  FALSE . \n \u200b  (#checksum) checksum() \n checksum(x)  \u2192 varbinary \n Returns an order-insensitive checksum of the given values. \n \u200b  (#count) count() \n count(*)  \u2192 bigint \n Returns the number of input rows. \n count(x)  \u2192 bigint \n Returns the number of non-null input values. \n \u200b  (#count-if) count_if() \n count_if(x)  \u2192 bigint \n Returns the number of  TRUE  input values. This function is equivalent to  count(CASE WHEN x THEN 1 END) . \n \u200b  (#every) every() \n every(boolean)  \u2192 boolean \n This is an alias for  bool_and . \n \u200b  (#geometric-mean) geometric_mean() \n geometric_mean(x)  \u2192 double \n Returns the geometric mean of all input values. \n \u200b  (#listagg) listagg() \n listagg(x, separator)  \u2192 varchar \n Returns the concatenated input values, separated by the  separator  string. \n Synopsis: \n     LISTAGG (  expression  [ ,  separator ]   [ ON  OVERFLOW overflow_behaviour ] ) \n          WITHIN   GROUP   ( ORDER   BY  sort_item ,   [ . . . ] ) \n \n If  separator  is not specified, the empty string will be used as\n separator . \n In its simplest form the function looks like: \n      SELECT  listagg ( value ,   ',' )   WITHIN   GROUP   ( ORDER   BY   value )  csv_value \n      FROM   ( VALUES   'a' ,   'c' ,   'b' )  t ( value ) ; \n \n and results in: \n     csv_value \n     ----------- \n     'a,b,c' \n \n The overflow behaviour is by default to throw an error in case that the\nlength of the output of the function exceeds  1048576  bytes: \n      SELECT  listagg ( value ,   ','   ON  OVERFLOW ERROR )   WITHIN   GROUP   ( ORDER \n      BY   value )  csv_value \n      FROM   ( VALUES   'a' ,   'c' ,   'b' )  t ( value ) ; \n \n and results in: \n     csv_value \n     ----------- \n     'a,c,b' \n \n The overflow behaviour can also be to truncate the output: \n      SELECT  listagg ( value ,   ','   ON  OVERFLOW  TRUNCATE )   WITHIN   GROUP   ( ORDER \n      BY   value )  csv_value \n      FROM   ( VALUES   'a' ,   'c' ,   'b' )  t ( value ) ; \n \n and results in: \n     csv_value \n     ----------- \n     'a,b' \n \n The overflow behaviour can also be to skip the overflowed values: \n      SELECT  listagg ( value ,   ','   ON  OVERFLOW SKIP )   WITHIN   GROUP   ( ORDER \n      BY   value )  csv_value \n \n The current implementation of  LISTAGG  function does not support window\nframes. \n \u200b  (#max) max() \n max(x)  \u2192 [same as input] \n Returns the maximum value of all input values. \n max(x, n)  \u2192 array<[same as x]> \n Returns  n  largest values of all input values of  x . \n \u200b  (#max-by) max_by() \n max_by(x, y)  \u2192 [same as x] \n Returns the value of  x  associated with the maximum value of  y  over all input values. \n max_by(x, y, n)  \u2192 array<[same as x]> \n Returns  n  values of  x  associated with the  n  largest of all input values of  y  in descending order of  y . \n \u200b  (#min) min() \n min(x)  \u2192 [same as input] \n Returns the minimum value of all input values. \n min(x, n)  \u2192 array<[same as x]> \n Returns  n  smallest values of all input values of  x . \n \u200b  (#min-by) min_by() \n min_by(x, y)  \u2192 [same as x] \n Returns the value of  x  associated with the minimum value of  y  over all input values. \n min_by(x, y, n)  \u2192 array<[same as x]> \n Returns  n  values of  x  associated with the  n  smallest of all input values of  y  in ascending order of  y . \n \u200b  (#sum) sum() \n sum(x)  \u2192 [same as input] \n Returns the sum of all input values. \n \u200b  (#try-sum) try_sum() \n try_sum(uint256)  \u2192 uint256 \n Returns the sum of all input values, or null if an addition overflow occurred. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/aggregate#general-aggregate-functions"}
{"content": "\u200b Bitwise aggregate functions \n \u200b  (#bitwise-and-agg) bitwise_and_agg() \n bitwise_and_agg(x)  \u2192 bigint \n Returns the bitwise AND of all input values in 2\u2019s complement representation. \n \u200b  (#bitwise-or-agg) bitwise_or_agg() \n bitwise_or_agg(x)  \u2192 bigint \n Returns the bitwise OR of all input values in 2\u2019s complement representation. \n \u200b  (#bitwise-xor-agg) bitwise_xor_agg() \n bitwise_xor_agg(x)  \u2192 bigint \n Returns the bitwise XOR of all input non-NULL values in 2\u2019s complement representation. If all records inside the group are NULL, or if the group is empty, the function returns NULL. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/aggregate#bitwise-aggregate-functions"}
{"content": "\u200b Map Aggregate Functions \n \u200b  (#histogram) histogram() \n histogram(x)  \u2192 map<K,bigint> \n Returns a map containing the count of the number of times each input value occurs. \n \u200b  (#map-agg) map_agg() \n map_agg(key, value)  \u2192 map<K,V> \n Returns a map created from the input key/value pairs. \n \u200b  (#map-union) map_union() \n map_union(x(K, V))  \u2192 map<K,V> \n Returns the union of all the input maps. If a key is found in multiple input maps, that key\u2019s value in the resulting map comes from an arbitrary input map. \n For example, take the following histogram function that creates multiple maps from the Iris dataset: \n SELECT  histogram ( floor ( petal_length_cm ) )  petal_data \n FROM  memory . default . iris \n GROUP   BY  species ; \n \n         petal_data \n -- {4.0=6, 5.0=33, 6.0=11} \n -- {4.0=37, 5.0=2, 3.0=11} \n -- {1.0=50} \n \n You can combine these maps using map_union: \n SELECT  map_union ( petal_data )  petal_data_union \n FROM   ( \n         SELECT  histogram ( floor ( petal_length_cm ) )  petal_data \n         FROM  memory . default . iris \n         GROUP   BY  species \n         ) ; \n \n              petal_data_union \n --{4.0=6, 5.0=2, 6.0=11, 1.0=50, 3.0=11} \n \n If you instead want to have the last value instead of an arbitrary value, use this snippet: \n map_concat ( map_filter ( m . chain_stats ,   ( k ,  v )   - >   NOT   contains ( map_keys ( n . chain_stats ) ,  k ) ) ,  n . chain_stats ) \n \n \u200b  (#multimap-agg) multimap_agg() \n multimap_agg(key, value)  \u2192 map<K,array(V)> \n Returns a multimap created from the input key / value pairs. Each key can be associated with multiple values. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/aggregate#map-aggregate-functions"}
{"content": "\u200b Approximate aggregate functions \n \u200b  (#approx-distinct) approx_distinct() \n approx_distinct(x)  \u2192 bigint \n Returns the approximate number of distinct input values. This function provides an approximation of  count(DISTINCT x) . Zero is returned if all input values are null. \n This function should produce a standard error of 2.3%, which is the standard deviation of the (approximately normal) error distribution over all possible sets. It does not guarantee an upper bound on the error for any specific input set. \n approx_distinct(x, e)  \u2192 bigint \n Returns the approximate number of distinct input values. This function provides an approximation of  count(DISTINCT x) . Zero is returned if all input values are null. \n This function should produce a standard error of no more than  e , which is the standard deviation of the (approximately normal) error distribution over all possible sets. It does not guarantee an upper bound on the error for any specific input set. The current implementation of this function requires that  e  be in the range of 0.0040625 to 0.26000. \n \u200b  (#approx-most-frequent) approx_most_frequent() \n approx_most_frequent(x, k)  \u2192 map<[same as x], bigint> \n Computes the top frequent values up to  buckets  elements approximately.\nApproximate estimation of the function enables us to pick up the\nfrequent values with less memory. Larger  capacity  improves the\naccuracy of underlying algorithm with sacrificing the memory capacity.\nThe returned value is a map containing the top elements with\ncorresponding estimated frequency. \n The error of the function depends on the permutation of the values and\nits cardinality. We can set the capacity same as the cardinality of the\nunderlying data to achieve the least error. \n buckets  and  capacity  must be  bigint .  value  can be numeric or\nstring type. \n The function uses the stream summary data structure proposed in the\npaper  Efficient Computation of Frequent and Top-k Elements in Data\nStreams  (https://www.cse.ust.hk/~raywong/comp5331/References/EfficientComputationOfFrequentAndTop-kElementsInDataStreams.pdf) \nby A. Metwalley, D. Agrawl and A. Abbadi. \n \u200b  (#approx-percentile) approx_percentile() \n approx_percentile(x, percentage)  \u2192 [same as x] \n Returns the approximate percentile for all input values of  x  at the given  percentage . The value of  percentage  must be between zero and one and must be constant for all input rows. \n approx_percentile(x, percentages)  \u2192 array<[same as x]> \n Returns the approximate percentile for all input values of  x  at each of the specified percentages. Each element of the  percentages  array must be between zero and one, and the array must be constant for all input rows. \n approx_percentile(x, w, percentage)  \u2192 [same as x] \n Returns the approximate weighed percentile for all input values of  x  using the per-item weight  w  at the percentage  percentage . Weights must be greater or equal to 1. Integer-value weights can be thought of as a replication count for the value  x  in the percentile set. The value of  percentage  must be between zero and one and must be constant for all input rows. \n approx_percentile(x, w, percentages)  \u2192 array<[same as x]> \n Returns the approximate weighed percentile for all input values of  x  using the per-item weight  w  at each of the given percentages specified in the array. Weights must be greater or equal to 1. Integer-value weights can be thought of as a replication count for the value  x  in the percentile set. Each element of the  percentages  array must be between zero and one, and the array must be constant for all input rows. \n \u200b  (#approx-set) approx_set() \n approx_set(x)  \u2192 HyperLogLog \n See  hyperloglog . \n \u200b  (#merge) merge() \n merge(x)  \u2192 HyperLogLog \n See  hyperloglog . \n merge(qdigest(T))  \u2192 qdigest(T) \n See  qdigest . \n merge(tdigest)  \u2192 tdigest \n See  tdigest . \n \u200b  (#numeric-histogram) numeric_histogram() \n numeric_histogram(buckets, value)  \u2192 map<double, double> \n Computes an approximate histogram with up to  buckets  number of buckets for all  value s. This function is equivalent to the variant of  numeric_histogram  that takes a  weight , with a per-item weight of  1 . \n numeric_histogram(buckets, value, weight)  \u2192 map<double, double> \n Computes an approximate histogram with up to  buckets  number of buckets for all  value s with a per-item weight of  weight . The algorithm is based loosely on: \n Yael Ben-Haim and Elad Tom-Tov, \"A streaming parallel decision tree algorithm\", J. Machine Learning Research 11 (2010), pp. 849--872. \n \n buckets  must be a  bigint .  value  and  weight  must be numeric. \n \u200b  (#qdigest-agg) qdigest_agg() \n qdigest_agg(x)  \u2192 qdigest \n See  Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) . \n \u200b  (#qdigest-agg-2) qdigest_agg() \n qdigest_agg(x, w)  \u2192 qdigest \n See  Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) . \n \u200b  (#tdigest-agg) tdigest_agg() \n tdigest_agg(x)  \u2192 tdigest \n See  T-Digest functions  (/query-engine/Functions-and-operators/tdigest) . \n \u200b  (#tdigest-agg-2) tdigest_agg() \n tdigest_agg(x, w)  \u2192 tdigest \n See  T-Digest functions  (/query-engine/Functions-and-operators/tdigest) . \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/aggregate#approximate-aggregate-functions"}
{"content": "\u200b Statistical aggregate functions \n \u200b  (#corr) corr() \n corr(x, y)  \u2192 double \n Returns correlation coefficient of input values. \n \u200b  (#covar-pop) covar_pop() \n covar_pop(y, x)  \u2192 double \n Returns the population covariance of input values. \n \u200b  (#covar-samp) covar_samp() \n covar_samp(y, x)  \u2192 double \n Returns the sample covariance of input values. \n \u200b  (#kurtosis) kurtosis() \n kurtosis(x)  \u2192 double \n Returns the excess kurtosis of all input values. Unbiased estimate using the following expression: \n kurtosis(x) = n(n+1)/((n-1)(n-2)(n-3))sum[(x_i-mean)^4]/stddev(x)^4-3(n-1)^2/((n-2)(n-3)) \n \n \u200b  (#regr-intercept) regr_intercept() \n regr_intercept(y, x)  \u2192 double \n Returns linear regression intercept of input values.  y  is the dependent value and  x  is the independent value. \n \u200b  (#regr-slope) regr_slope() \n regr_slope(y, x)  \u2192 double \n Returns linear regression slope of input values.  y  is the dependent value and  x  is the independent value. \n \u200b  (#skewness) skewness() \n skewness(x)  \u2192 double \n Returns the skewness of all input values. Returns the Fisher\u2019s moment coefficient of  skewness  (https://en.wikipedia.org/wiki/Skewness)  of all input values. \n \u200b  (#stddev) stddev() \n stddev(x)  \u2192 double \n Returns the standard deviation of all input values. \n \u200b  (#stddev-pop) stddev_pop() \n stddev_pop(x)  \u2192 double \n Returns the population standard deviation of all input values. \n \u200b  (#stddev-samp) stddev_samp() \n stddev_samp(x)  \u2192 double \n Returns the sample standard deviation of all input values. \n \u200b  (#variance) variance() \n variance(x)  \u2192 double \n Returns the variance of all input values. \n \u200b  (#var-pop) var_pop() \n var_pop(x)  \u2192 double \n Returns the population variance of all input values. \n \u200b  (#var-samp) var_samp() \n var_samp(x)  \u2192 double \n Returns the sample variance of all input values. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/aggregate#statistical-aggregate-functions"}
{"content": "\u200b Lambda aggregate functions \n \u200b  (#reduce-agg) reduce_agg() \n reduce_agg(inputValue T, initialState S, inputFunction(S, T, S), combineFunction(S, S, S))  \u2192 S \n Reduces all input values into a single value.  inputFunction  will be\ninvoked for each non-null input value. In addition to taking the input\nvalue,  inputFunction  takes the current state, initially\n initialState , and returns the new state.  combineFunction  will be\ninvoked to combine two states into a new state. The final state is\nreturned: \n      SELECT  id ,  reduce_agg ( value ,   0 ,   ( a ,  b )   - >  a  +  b ,   ( a ,  b )   - >  a  +  b ) \n      FROM   ( \n          VALUES \n              ( 1 ,   3 ) , \n              ( 1 ,   4 ) , \n              ( 1 ,   5 ) , \n              ( 2 ,   6 ) , \n              ( 2 ,   7 ) \n      )   AS  t ( id ,   value ) \n      GROUP   BY  id ; \n      -- (1, 12) \n      -- (2, 13) \n \n      SELECT  id ,  reduce_agg ( value ,   1 ,   ( a ,  b )   - >  a  *  b ,   ( a ,  b )   - >  a  *  b ) \n      FROM   ( \n          VALUES \n              ( 1 ,   3 ) , \n              ( 1 ,   4 ) , \n              ( 1 ,   5 ) , \n              ( 2 ,   6 ) , \n              ( 2 ,   7 ) \n      )   AS  t ( id ,   value ) \n      GROUP   BY  id ; \n      -- (1, 60) \n      -- (2, 42) \n \n The state type must be a boolean, integer, floating-point, or\ndate/time/interval. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/aggregate) Overview  (/query-engine/Functions-and-operators/index) Array functions and operators  (/query-engine/Functions-and-operators/array) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Ordering during aggregation  (#ordering-during-aggregation) Filtering during aggregation  (#filtering-during-aggregation) General aggregate functions  (#general-aggregate-functions) arbitrary()  (#arbitrary) any_value()  (#any-value) array_agg()  (#array-agg) avg()  (#avg) bool_and()  (#bool-and) bool_or()  (#bool-or) checksum()  (#checksum) count()  (#count) count_if()  (#count-if) every()  (#every) geometric_mean()  (#geometric-mean) listagg()  (#listagg) max()  (#max) max_by()  (#max-by) min()  (#min) min_by()  (#min-by) sum()  (#sum) try_sum()  (#try-sum) Bitwise aggregate functions  (#bitwise-aggregate-functions) bitwise_and_agg()  (#bitwise-and-agg) bitwise_or_agg()  (#bitwise-or-agg) bitwise_xor_agg()  (#bitwise-xor-agg) Map Aggregate Functions  (#map-aggregate-functions) histogram()  (#histogram) map_agg()  (#map-agg) map_union()  (#map-union) multimap_agg()  (#multimap-agg) Approximate aggregate functions  (#approximate-aggregate-functions) approx_distinct()  (#approx-distinct) approx_most_frequent()  (#approx-most-frequent) approx_percentile()  (#approx-percentile) approx_set()  (#approx-set) merge()  (#merge) numeric_histogram()  (#numeric-histogram) qdigest_agg()  (#qdigest-agg) qdigest_agg()  (#qdigest-agg-2) tdigest_agg()  (#tdigest-agg) tdigest_agg()  (#tdigest-agg-2) Statistical aggregate functions  (#statistical-aggregate-functions) corr()  (#corr) covar_pop()  (#covar-pop) covar_samp()  (#covar-samp) kurtosis()  (#kurtosis) regr_intercept()  (#regr-intercept) regr_slope()  (#regr-slope) skewness()  (#skewness) stddev()  (#stddev) stddev_pop()  (#stddev-pop) stddev_samp()  (#stddev-samp) variance()  (#variance) var_pop()  (#var-pop) var_samp()  (#var-samp) Lambda aggregate functions  (#lambda-aggregate-functions) reduce_agg()  (#reduce-agg)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/aggregate#lambda-aggregate-functions"}
{"content": "\u200b Subscript operator: [] \n The  []  operator is used to retrieve the value corresponding to a given\nkey from a map: \n      SELECT  name_to_age_map [ 'Bob' ]   AS  bob_age ; \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/map#subscript-operator"}
{"content": "\u200b Map functions \n \u200b  (#cardinality) cardinality() \n cardinality(x)  \u2192 bigint \n Returns the cardinality (size) of the map  x . \n \u200b  (#element-at) element_at() \n element_at(map(K,V), key)  \u2192 V \n Returns value for given  key , or  NULL  if the key is not contained in\nthe map. \n \u200b  (#map) map() \n map()  \u2192 map(unknown, unknown) \n Returns an empty map: \n      SELECT  map ( ) ; \n      -- {} \n \n map(array(K), array(V))  \u2192 map(K,V) \n Returns a map created using the given key/value arrays: \n      SELECT  map ( ARRAY [ 1 , 3 ] ,  ARRAY [ 2 , 4 ] ) ; \n      -- {1 -> 2, 3 -> 4} \n \n See also  map_agg  and  multimap_agg  for creating a map as an aggregation. \n \u200b  (#map-from-entries) map_from_entries() \n map_from_entries(array(row(K,V)))  \u2192 map(K,V) \n Returns a map created from the given array of entries: \n      SELECT  map_from_entries ( ARRAY [ ( 1 ,   'x' ) ,   ( 2 ,   'y' ) ] ) ; \n      -- {1 -> 'x', 2 -> 'y'} \n \n \u200b  (#multimap-from-entries) multimap_from_entries() \n multimap_from_entries(array(row(K,V)))  \u2192 map(K,array(V)) \n Returns a multimap created from the given array of entries. Each key can\nbe associated with multiple values: \n      SELECT  multimap_from_entries ( ARRAY [ ( 1 ,   'x' ) ,   ( 2 ,   'y' ) ,   ( 1 ,   'z' ) ] ) ; \n      -- {1 -> ['x', 'z'], 2 -> ['y']} \n \n \u200b  (#map-entries) map_entries() \n map_entries(map(K,V))  \u2192 array(row(K,V)) \n Returns an array of all entries in the given map: \n      SELECT  map_entries ( MAP ( ARRAY [ 1 ,   2 ] ,  ARRAY [ 'x' ,   'y' ] ) ) ; \n      -- [ROW(1, 'x'), ROW(2, 'y')] \n \n \u200b  (#map-concat) map_concat() \n map_concat(map1(K,V), map2(K,V), ..., mapN(K,V))  \u2192 map(K,V) \n Returns the union of all the given maps. If a key is found in multiple\ngiven maps, that key\u2019s value in the resulting map comes from the last\none of those maps. \n \u200b  (#map-filter) map_filter() \n map_filter(map(K,V), function(K,V,boolean))  \u2192 map(K,V) \n Constructs a map from those entries of  map  for which  function \nreturns true: \n      SELECT  map_filter ( MAP ( ARRAY [ ] ,  ARRAY [ ] ) ,   ( k ,  v )   - >   true ) ; \n      -- {} \n \n      SELECT  map_filter ( MAP ( ARRAY [ 10 ,   20 ,   30 ] ,  ARRAY [ 'a' ,   NULL ,   'c' ] ) , \n                        ( k ,  v )   - >  v  IS   NOT   NULL ) ; \n      -- {10 -> a, 30 -> c} \n \n      SELECT  map_filter ( MAP ( ARRAY [ 'k1' ,   'k2' ,   'k3' ] ,  ARRAY [ 20 ,   3 ,   15 ] ) , \n                        ( k ,  v )   - >  v  >   10 ) ; \n      -- {k1 -> 20, k3 -> 15} \n \n \u200b  (#map-keys) map_keys() \n map_keys(x(K,V))  \u2192 array(K) \n Returns all the keys in the map  x . \n \u200b  (#map-values) map_values() \n map_values(x(K,V))  \u2192 array(V) \n Returns all the values in the map  x . \n \u200b  (#map-zip-with) map_zip_with() \n map_zip_with(map(K,V1), map(K,V2), function(K,V1,V2,V3))  \u2192 map(K,V3) \n Merges the two given maps into a single map by applying  function  to\nthe pair of values with the same key. For keys only presented in one\nmap, NULL will be passed as the value for the missing key: \n      SELECT  map_zip_with ( MAP ( ARRAY [ 1 ,   2 ,   3 ] ,  ARRAY [ 'a' ,   'b' ,   'c' ] ) , \n                         MAP ( ARRAY [ 1 ,   2 ,   3 ] ,  ARRAY [ 'd' ,   'e' ,   'f' ] ) , \n                          ( k ,  v1 ,  v2 )   - >  concat ( v1 ,  v2 ) ) ; \n      -- {1 -> ad, 2 -> be, 3 -> cf} \n \n      SELECT  map_zip_with ( MAP ( ARRAY [ 'k1' ,   'k2' ] ,  ARRAY [ 1 ,   2 ] ) , \n                         MAP ( ARRAY [ 'k2' ,   'k3' ] ,  ARRAY [ 4 ,   9 ] ) , \n                          ( k ,  v1 ,  v2 )   - >   ( v1 ,  v2 ) ) ; \n      -- {k1 -> ROW(1, null), k2 -> ROW(2, 4), k3 -> ROW(null, 9)} \n \n      SELECT  map_zip_with ( MAP ( ARRAY [ 'a' ,   'b' ,   'c' ] ,  ARRAY [ 1 ,   8 ,   27 ] ) , \n                         MAP ( ARRAY [ 'a' ,   'b' ,   'c' ] ,  ARRAY [ 1 ,   2 ,   3 ] ) , \n                          ( k ,  v1 ,  v2 )   - >  k  ||  CAST ( v1  /  v2  AS   VARCHAR ) ) ; \n      -- {a -> a1, b -> b4, c -> c9} \n \n \u200b  (#transform-keys) transform_keys() \n transform_keys(map(K1,V), function(K1,V,K2))  \u2192 map(K2,V) \n Returns a map that applies  function  to each entry of  map  and\ntransforms the keys: \n      SELECT  transform_keys ( MAP ( ARRAY [ ] ,  ARRAY [ ] ) ,   ( k ,  v )   - >  k  +   1 ) ; \n      -- {} \n \n      SELECT  transform_keys ( MAP ( ARRAY  [ 1 ,   2 ,   3 ] ,  ARRAY  [ 'a' ,   'b' ,   'c' ] ) , \n                            ( k ,  v )   - >  k  +   1 ) ; \n      -- {2 -> a, 3 -> b, 4 -> c} \n \n      SELECT  transform_keys ( MAP ( ARRAY  [ 'a' ,   'b' ,   'c' ] ,  ARRAY  [ 1 ,   2 ,   3 ] ) , \n                            ( k ,  v )   - >  v  *  v ) ; \n      -- {1 -> 1, 4 -> 2, 9 -> 3} \n \n      SELECT  transform_keys ( MAP ( ARRAY  [ 'a' ,   'b' ] ,  ARRAY  [ 1 ,   2 ] ) , \n                            ( k ,  v )   - >  k  ||  CAST ( v  as   VARCHAR ) ) ; \n      -- {a1 -> 1, b2 -> 2} \n \n      SELECT  transform_keys ( MAP ( ARRAY  [ 1 ,   2 ] ,  ARRAY  [ 1.0 ,   1.4 ] ) , \n                            ( k ,  v )   - >  MAP ( ARRAY [ 1 ,   2 ] ,  ARRAY [ 'one' ,   'two' ] ) [ k ] ) ; \n      -- {one -> 1.0, two -> 1.4} \n \n \u200b  (#transform-values) transform_values() \n transform_values(map(K,V1), function(K,V1,V2))  \u2192 map(K,V2) \n Returns a map that applies  function  to each entry of  map  and\ntransforms the values: \n      SELECT  transform_values ( MAP ( ARRAY [ ] ,  ARRAY [ ] ) ,   ( k ,  v )   - >  v  +   1 ) ; \n      -- {} \n \n      SELECT  transform_values ( MAP ( ARRAY  [ 1 ,   2 ,   3 ] ,  ARRAY  [ 10 ,   20 ,   30 ] ) , \n                              ( k ,  v )   - >  v  +  k ) ; \n      -- {1 -> 11, 2 -> 22, 3 -> 33} \n \n      SELECT  transform_values ( MAP ( ARRAY  [ 1 ,   2 ,   3 ] ,  ARRAY  [ 'a' ,   'b' ,   'c' ] ) , \n                              ( k ,  v )   - >  k  *  k ) ; \n      -- {1 -> 1, 2 -> 4, 3 -> 9} \n \n      SELECT  transform_values ( MAP ( ARRAY  [ 'a' ,   'b' ] ,  ARRAY  [ 1 ,   2 ] ) , \n                              ( k ,  v )   - >  k  ||  CAST ( v  as   VARCHAR ) ) ; \n      -- {a -> a1, b -> b2} \n \n      SELECT  transform_values ( MAP ( ARRAY  [ 1 ,   2 ] ,  ARRAY  [ 1.0 ,   1.4 ] ) , \n                              ( k ,  v )   - >  MAP ( ARRAY [ 1 ,   2 ] ,  ARRAY [ 'one' ,   'two' ] ) [ k ] \n                                ||   '_'   ||  CAST ( v  AS   VARCHAR ) ) ; \n      -- {1 -> one_1.0, 2 -> two_1.4} \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/map) Logical operators  (/query-engine/Functions-and-operators/logical) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Subscript operator: []  (#subscript-operator) Map functions  (#map-functions) cardinality()  (#cardinality) element_at()  (#element-at) map()  (#map) map_from_entries()  (#map-from-entries) multimap_from_entries()  (#multimap-from-entries) map_entries()  (#map-entries) map_concat()  (#map-concat) map_filter()  (#map-filter) map_keys()  (#map-keys) map_values()  (#map-values) map_zip_with()  (#map-zip-with) transform_keys()  (#transform-keys) transform_values()  (#transform-values)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/map#map-functions"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functions and Operators JSON functions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators JSON functions ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json"}
{"content": "\u200b Decimal literals {#decimal_literal} \n Use the  DECIMAL 'xxxxxxx.yyyyyyy'  syntax to define a decimal literal. \n The precision of a decimal type for a literal will be equal to the\nnumber of digits in the literal (including trailing and leading zeros).\nThe scale will be equal to the number of digits in the fractional part\n(including trailing zeros). \n Example literal Data type DECIMAL '0' DECIMAL(1) DECIMAL '12345' DECIMAL(5) DECIMAL '0000012345.1234500000' DECIMAL(20, 10) \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/decimal#decimal-literals-decimal-literal"}
{"content": "\u200b Binary arithmetic decimal operators \n Standard mathematical operators are supported. The table below explains\nprecision and scale calculation rules for result. Assuming  x  is of\ntype  DECIMAL(xp, xs)  and  y  is of type  DECIMAL(yp, ys) . \n Operation Result type precision Result type scale x + y  and  x -y min(38,1 +max(xs, ys) + max(xp - xs, yp - ys)) max(xs, ys) x * y min(38, xp + yp) xs + ys x / y min(38, xp + ys + max(0, ys-xs)) max(xs, ys) x % y min(xp - xs, yp - ys) + max(xs, bs) max(xs, ys) \n If the mathematical result of the operation is not exactly representable\nwith the precision and scale of the result data type, then an exception\ncondition is raised:  Value is out of range . \n When operating on decimal types with different scale and precision, the\nvalues are first coerced to a common super type. For types near the\nlargest representable precision (38), this can result in \u201cValue is out of\nrange\u201d errors when one of the operands doesn\u2019t fit in the common super\ntype. For example, the common super type of decimal(38, 0) and\ndecimal(38, 1) is decimal(38, 1), but certain values that fit in\ndecimal(38, 0) cannot be represented as a decimal(38, 1). \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/decimal#binary-arithmetic-decimal-operators"}
{"content": "\u200b Comparison operators \n All standard  comparison  work for the\ndecimal type. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/decimal#comparison-operators"}
{"content": "\u200b Unary decimal operators \n The  -  operator performs negation. The type of result is same as type\nof argument. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/decimal) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Decimal literals {#decimal_literal}  (#decimal-literals-decimal-literal) Binary arithmetic decimal operators  (#binary-arithmetic-decimal-operators) Comparison operators  (#comparison-operators) Unary decimal operators  (#unary-decimal-operators)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/decimal#unary-decimal-operators"}
{"content": "\u200b JSON functions and operators \n The SQL standard describes functions and operators to process JSON data. They\nallow you to access JSON data according to its structure, generate JSON data,\nand store it persistently in SQL tables. \n Importantly, the SQL standard imposes that there is no dedicated data type to\nrepresent JSON data in SQL. Instead, JSON data is represented as character or\nbinary strings. Although Trino supports  JSON  type, it is not used or\nproduced by the following functions. \n Trino supports three functions for querying JSON data:\n json_exists<json-exists> ,\n json_query<json-query> , and  json_value<json-value> . Each of them\nis based on the same mechanism of exploring and processing JSON input using\nJSON path. \n Trino also supports two functions for generating JSON data \u2014\n json_array<json-array> , and  json_object<json-object> . \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json#json-functions-and-operators"}
{"content": "\u200b JSON path language \n The JSON path language is a special language, used exclusively by certain SQL\noperators to specify the query to perform on the JSON input. Although JSON path\nexpressions are embedded in SQL queries, their syntax significantly differs\nfrom SQL. The semantics of predicates, operators, etc. in JSON path expressions\ngenerally follow the semantics of SQL. The JSON path language is case-sensitive\nfor keywords and identifiers. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json#json-path-language"}
{"content": "\u200b JSON path syntax and semantics \n JSON path expressions are recursive structures. Although the name \u201cpath\u201d\nsuggests a linear sequence of operations going step by step deeper into the JSON\nstructure, a JSON path expression is a tree. It can access the input\nJSON item multiple times, in multiple ways, and combine the results. Moreover,\nthe result of a JSON path expression is not a single item, but an ordered\nsequence of items. Each of the sub-expressions takes one or more input\nsequences and returns a sequence as the result. \n In the lax mode, most path operations first unnest all JSON arrays in the\ninput sequence. Any divergence from this rule is mentioned in the following\nlisting. Path modes are explained in  json-path-modes . \n The JSON path language features are divided into: literals, variables,\narithmetic binary expressions, arithmetic unary expressions, and a group of\noperators collectively known as accessors. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json#json-path-syntax-and-semantics"}
{"content": "\u200b literals \n \u200b  (#numeric-literals) numeric literals \n They include exact and approximate numbers, and are interpreted as if they\nwere SQL values. \n -1, 1.2e3, NaN \n \n \u200b  (#string-literals) string literals \n They are enclosed in double quotes. \n \"Some text\" \n \n \u200b  (#boolean-literals) boolean literals \n true, false \n \n \u200b  (#null-literal) null literal \n It has the semantics of the JSON null, not of SQL null. See link json-comparison-rules . \n null \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json#literals"}
{"content": "\u200b variables \n \u200b  (#context-variable) context variable \n It refers to the currently processed input of the JSON\nfunction. \n $ \n \n \u200b  (#named-variable) named variable \n It refers to a named parameter by its name. \n $param \n \n \u200b  (#current-item-variable) current item variable \n It is used inside the filter expression to refer to the currently processed\nitem from the input sequence. \n @ \n \n \u200b  (#last-subscript-variable) last subscript variable \n It refers to the last index of the innermost enclosing array. Array indexes\nin JSON path expressions are zero-based. \n last \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json#variables"}
{"content": "\u200b arithmetic binary expressions \n The JSON path language supports five arithmetic binary operators: \n <path1> + <path2> \n <path1> - <path2> \n <path1> * <path2> \n <path1> / <path2> \n <path1> % <path2> \n \n Both operands,  <path1>  and  <path2> , are evaluated to sequences of\nitems. For arithmetic binary operators, each input sequence must contain a\nsingle numeric item. The arithmetic operation is performed according to SQL\nsemantics, and it returns a sequence containing a single element with the\nresult. \n The operators follow the same precedence rules as in SQL arithmetic operations,\nand parentheses can be used for grouping. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json#arithmetic-binary-expressions"}
{"content": "\u200b arithmetic unary expressions \n + <path> \n - <path> \n \n The operand  <path>  is evaluated to a sequence of items. Every item must be\na numeric value. The unary plus or minus is applied to every item in the\nsequence, following SQL semantics, and the results form the returned sequence. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json#arithmetic-unary-expressions"}
{"content": "\u200b member accessor \n The member accessor returns the value of the member with the specified key for\neach JSON object in the input sequence. \n <path>.key \n <path>.\"key\" \n \n The condition when a JSON object does not have such a member is called a\nstructural error. In the lax mode, it is suppressed, and the faulty object is\nexcluded from the result. \n Let  <path>  return a sequence of three JSON objects: \n {\"customer\" : 100, \"region\" : \"AFRICA\"}, \n {\"region\" : \"ASIA\"}, \n {\"customer\" : 300, \"region\" : \"AFRICA\", \"comment\" : null} \n \n the expression  <path>.customer  succeeds in the first and the third object,\nbut the second object lacks the required member. In strict mode, path\nevaluation fails. In lax mode, the second object is silently skipped, and the\nresulting sequence is  100, 300 . \n All items in the input sequence must be JSON objects. \n Trino does not support JSON objects with duplicate keys. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json#member-accessor"}
{"content": "\u200b wildcard member accessor \n Returns values from all key-value pairs for each JSON object in the input\nsequence. All the partial results are concatenated into the returned sequence. \n <path>.* \n \n Let  <path>  return a sequence of three JSON objects: \n {\"customer\" : 100, \"region\" : \"AFRICA\"}, \n {\"region\" : \"ASIA\"}, \n {\"customer\" : 300, \"region\" : \"AFRICA\", \"comment\" : null} \n \n The results is: \n 100, \"AFRICA\", \"ASIA\", 300, \"AFRICA\", null \n \n All items in the input sequence must be JSON objects. \n The order of values returned from a single JSON object is arbitrary. The\nsub-sequences from all JSON objects are concatenated in the same order in which\nthe JSON objects appear in the input sequence. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json#wildcard-member-accessor"}
{"content": "\u200b descendant member accessor \n Returns the values associated with the specified key in all JSON objects on all\nlevels of nesting in the input sequence. \n <path>..key \n <path>..\"key\" \n \n The order of returned values is that of preorder depth first search. First, the\nenclosing object is visited, and then all child nodes are visited. \n This method does not perform array unwrapping in the lax mode. The results\nare the same in the lax and strict modes. The method traverses into JSON\narrays and JSON objects. Non-structural JSON items are skipped. \n Let  <path>  be a sequence containing a JSON object: \n { \n     \"id\" : 1, \n     \"notes\" : [{\"type\" : 1, \"comment\" : \"foo\"}, {\"type\" : 2, \"comment\" : null}], \n     \"comment\" : [\"bar\", \"baz\"] \n } \n \n <path>..comment --> [\"bar\", \"baz\"], \"foo\", null \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json#descendant-member-accessor"}
{"content": "\u200b array accessor \n Returns the elements at the specified indexes for each JSON array in the input\nsequence. Indexes are zero-based. \n <path>[ <subscripts> ] \n \n The  <subscripts>  list contains one or more subscripts. Each subscript\nspecifies a single index or a range (ends inclusive): \n <path>[<path1>, <path2> to <path3>, <path4>,...] \n \n In lax mode, any non-array items resulting from the evaluation of the input\nsequence are wrapped into single-element arrays. Note that this is an exception\nto the rule of automatic array wrapping. \n Each array in the input sequence is processed in the following way: \n \n The variable  last  is set to the last index of the array. \n All subscript indexes are computed in order of declaration. For a singleton subscript  <path1> , the result must be a singleton numeric item. For a range subscript  <path2> to <path3> , two numeric items are expected. \n The specified array elements are added in order to the output sequence. \n \n Let  <path>  return a sequence of three JSON arrays: \n [0, 1, 2], [\"a\", \"b\", \"c\", \"d\"], [null, null] \n \n The following expression returns a sequence containing the last element from\nevery array: \n <path>[last] --> 2, \"d\", null \n \n The following expression returns the third and fourth element from every array: \n <path>[2 to 3] --> 2, \"c\", \"d\" \n \n Note that the first array does not have the fourth element, and the last array\ndoes not have the third or fourth element. Accessing non-existent elements is a\nstructural error. In strict mode, it causes the path expression to fail. In lax\nmode, such errors are suppressed, and only the existing elements are returned. \n Another example of a structural error is an improper range specification such\nas  5 to 3 . \n Note that the subscripts may overlap, and they do not need to follow the\nelement order. The order in the returned sequence follows the subscripts: \n <path>[1, 0, 0] --> 1, 0, 0, \"b\", \"a\", \"a\", null, null, null \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json#array-accessor"}
{"content": "\u200b wildcard array accessor \n Returns all elements of each JSON array in the input sequence. \n <path>[*] \n \n In lax mode, any non-array items resulting from the evaluation of the input\nsequence are wrapped into single-element arrays. Note that this is an exception\nto the rule of automatic array wrapping. \n The output order follows the order of the original JSON arrays. Also, the order\nof elements within the arrays is preserved. \n Let  <path>  return a sequence of three JSON arrays: \n [0, 1, 2], [\"a\", \"b\", \"c\", \"d\"], [null, null] \n <path>[*] --> 0, 1, 2, \"a\", \"b\", \"c\", \"d\", null, null \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json#wildcard-array-accessor"}
{"content": "\u200b filter \n Retrieves the items from the input sequence which satisfy the predicate. \n <path>?( <predicate> ) \n \n JSON path predicates are syntactically similar to boolean expressions in SQL.\nHowever, the semantics are different in many aspects: \n \n They operate on sequences of items. \n They have their own error handling (they never fail). \n They behave differently depending on the lax or strict mode. \n \n The predicate evaluates to  true ,  false , or  unknown . Note that some\npredicate expressions involve nested JSON path expressions. When evaluating the\nnested path, the variable  @  refers to the currently examined item from the\ninput sequence. \n The following predicate expressions are supported: \n Conjunction \n <predicate1> && <predicate2> \n \n Disjunction \n <predicate1> || <predicate2> \n \n Negation \n ! <predicate> \n \n exists  predicate \n exists( <path> ) \n \n Returns  true  if the nested path evaluates to a non-empty sequence, and\n false  when the nested path evaluates to an empty sequence. If the path\nevaluation throws an error, returns  unknown . \n starts with  predicate \n <path> starts with \"Some text\" \n <path> starts with $variable \n \n The nested  <path>  must evaluate to a sequence of textual items, and the\nother operand must evaluate to a single textual item. If evaluating of either\noperand throws an error, the result is  unknown . All items from the sequence\nare checked for starting with the right operand. The result is  true  if a\nmatch is found, otherwise  false . However, if any of the comparisons throws\nan error, the result in the strict mode is  unknown . The result in the lax\nmode depends on whether the match or the error was found first. \n is unknown  predicate \n ( <predicate> ) is unknown \n \n Returns  true  if the nested predicate evaluates to  unknown , and\n false  otherwise. \n \u200b  (#comparisons) Comparisons \n <path1> == <path2> \n <path1> <> <path2> \n <path1> != <path2> \n <path1> < <path2> \n <path1> > <path2> \n <path1> <= <path2> \n <path1> >= <path2> \n \n Both operands of a comparison evaluate to sequences of items. If either\nevaluation throws an error, the result is  unknown . Items from the left and\nright sequence are then compared pairwise. Similarly to the  starts with \npredicate, the result is  true  if any of the comparisons returns  true ,\notherwise  false . However, if any of the comparisons throws an error, for\nexample because the compared types are not compatible, the result in the strict\nmode is  unknown . The result in the lax mode depends on whether the  true \ncomparison or the error was found first. \n \u200b  (#comparison-rules) Comparison rules \n Null values in the context of comparison behave differently than SQL null: \n \n null == null \u2014>  true \n null != null, null < null, \u2026 \u2014>  false \n null compared to a scalar value \u2014>  false \n null compared to a JSON array or a JSON object \u2014>  false \n \n When comparing two scalar values,  true  or  false  is returned if the\ncomparison is successfully performed. The semantics of the comparison is the\nsame as in SQL. In case of an error, e.g. comparing text and number,\n unknown  is returned. \n Comparing a scalar value with a JSON array or a JSON object, and comparing JSON\narrays/objects is an error, so  unknown  is returned. \n Examples of filter \n Let  <path>  return a sequence of three JSON objects: \n {\"customer\" : 100, \"region\" : \"AFRICA\"}, \n {\"region\" : \"ASIA\"}, \n {\"customer\" : 300, \"region\" : \"AFRICA\", \"comment\" : null} \n \n <path>?(@.region != \"ASIA\") --> {\"customer\" : 100, \"region\" : \"AFRICA\"}, \n                                 {\"customer\" : 300, \"region\" : \"AFRICA\", \"comment\" : null} \n <path>?(!exists(@.customer)) --> {\"region\" : \"ASIA\"} \n \n The following accessors are collectively referred to as  item methods . \n \u200b  (#double) double() \n Converts numeric or text values into double values. \n <path>.double() \n \n Let  <path>  return a sequence  -1, 23e4, \"5.6\" : \n <path>.double() --> -1e0, 23e4, 5.6e0 \n \n \u200b  (#ceiling-floor-and-abs) ceiling(), floor(), and abs() \n Gets the ceiling, the floor or the absolute value for every numeric item in the\nsequence. The semantics of the operations is the same as in SQL. \n Let  <path>  return a sequence  -1.5, -1, 1.3 : \n <path>.ceiling() --> -1.0, -1, 2.0 \n <path>.floor() --> -2.0, -1, 1.0 \n <path>.abs() --> 1.5, 1, 1.3 \n \n \u200b  (#keyvalue) keyvalue() \n Returns a collection of JSON objects including one object per every member of\nthe original object for every JSON object in the sequence. \n <path>.keyvalue() \n \n The returned objects have three members: \n \n \u201cname\u201d, which is the original key, \n \u201cvalue\u201d, which is the original bound value, \n \u201cid\u201d, which is the unique number, specific to an input object. \n \n Let  <path>  be a sequence of three JSON objects: \n {\"customer\" : 100, \"region\" : \"AFRICA\"}, \n {\"region\" : \"ASIA\"}, \n {\"customer\" : 300, \"region\" : \"AFRICA\", \"comment\" : null} \n \n <path>.keyvalue() --> {\"name\" : \"customer\", \"value\" : 100, \"id\" : 0}, \n                       {\"name\" : \"region\", \"value\" : \"AFRICA\", \"id\" : 0}, \n                       {\"name\" : \"region\", \"value\" : \"ASIA\", \"id\" : 1}, \n                       {\"name\" : \"customer\", \"value\" : 300, \"id\" : 2}, \n                       {\"name\" : \"region\", \"value\" : \"AFRICA\", \"id\" : 2}, \n                       {\"name\" : \"comment\", \"value\" : null, \"id\" : 2} \n \n It is required that all items in the input sequence are JSON objects. \n The order of the returned values follows the order of the original JSON\nobjects. However, within objects, the order of returned entries is arbitrary. \n \u200b  (#type) type() \n Returns a textual value containing the type name for every item in the\nsequence. \n <path>.type() \n \n This method does not perform array unwrapping in the lax mode. \n The returned values are: \n \n \"null\"  for JSON null, \n \"number\"  for a numeric item, \n \"string\"  for a textual item, \n \"boolean\"  for a boolean item, \n \"date\"  for an item of type date, \n \"time without time zone\"  for an item of type time, \n \"time with time zone\"  for an item of type time with time zone, \n \"timestamp without time zone\"  for an item of type timestamp, \n \"timestamp with time zone\"  for an item of type timestamp with time zone, \n \"array\"  for JSON array, \n \"object\"  for JSON object, \n \n \u200b  (#size) size() \n Returns a numeric value containing the size for every JSON array in the\nsequence. \n <path>.size() \n \n This method does not perform array unwrapping in the lax mode. Instead, all\nnon-array items are wrapped in singleton JSON arrays, so their size is  1 . \n It is required that all items in the input sequence are JSON arrays. \n Let  <path>  return a sequence of three JSON arrays: \n [0, 1, 2], [\"a\", \"b\", \"c\", \"d\"], [null, null] \n <path>.size() --> 3, 4, 2 \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json#filter"}
{"content": "\u200b Limitations \n The SQL standard describes the  datetime()  JSON path item method and the\n like_regex()  JSON path predicate. Trino does not support them. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json#limitations"}
{"content": "\u200b JSON path modes \n The JSON path expression can be evaluated in two modes: strict and lax. In the\nstrict mode, it is required that the input JSON data strictly fits the schema\nrequired by the path expression. In the lax mode, the input JSON data can\ndiverge from the expected schema. \n The following table shows the differences between the two modes. \n Condition Strict Mode Lax Mode Performing an operation which requires a non-array on an array, e.g.:  $.key  requires a JSON object;  $.floor()  requires a numeric value ERROR The array is automatically unnested, and the operation is performed on each array element. Performing an operation which requires an array on a non-array, e.g.:  $[0] ,  $[*] ,  $.size() ERROR The non-array item is automatically wrapped in a singleton array, and the operation is performed on the array. A structural error: accessing a non-existent element of an array or a non-existent member of a JSON object, e.g.:  $[-1]  (array index out of bounds);  $.key , where the input JSON object does not have a member  key ERROR The error is suppressed, and the operation results in an empty sequence. \n \u200b  (#examples-of-the-lax-mode-behavior) Examples of the lax mode behavior \n Let  <path>  return a sequence of three items, a JSON array, a JSON object,\nand a scalar numeric value: \n [1, \"a\", null], {\"key1\" : 1.0, \"key2\" : true}, -2e3 \n \n The following example shows the wildcard array accessor in the lax mode. The\nJSON array returns all its elements, while the JSON object and the number are\nwrapped in singleton arrays and then unnested, so effectively they appear\nunchanged in the output sequence: \n <path>[*] --> 1, \"a\", null, {\"key1\" : 1.0, \"key2\" : true}, -2e3 \n \n When calling the  size()  method, the JSON object and the number are also\nwrapped in singleton arrays: \n <path>.size() --> 3, 1, 1 \n \n In some cases, the lax mode cannot prevent failure. In the following example,\neven though the JSON array is unwrapped prior to calling the  floor() \nmethod, the item  \"a\"  causes type mismatch. \n <path>.floor() --> ERROR \n \n (json-exists)= \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json#json-path-modes"}
{"content": "\u200b json_exists \n The  json_exists  function determines whether a JSON value satisfies a JSON\npath specification. \n JSON_EXISTS( \n     json_input [ FORMAT JSON [ ENCODING { UTF8 | UTF16 | UTF32 } ] ], \n     json_path \n     [ PASSING json_argument [, ...] ] \n     [ { TRUE | FALSE | UNKNOWN | ERROR } ON ERROR ] \n     ) \n \n The  json_path  is evaluated using the  json_input  as the context variable\n( $ ), and the passed arguments as the named variables ( $variable_name ).\nThe returned value is  true  if the path returns a non-empty sequence, and\n false  if the path returns an empty sequence. If an error occurs, the\nreturned value depends on the  ON ERROR  clause. The default value returned\n ON ERROR  is  FALSE . The  ON ERROR  clause is applied for the following\nkinds of errors: \n \n Input conversion errors, such as malformed JSON \n JSON path evaluation errors, e.g. division by zero \n \n json_input  is a character string or a binary string. It should contain\na single JSON item. For a binary string, you can specify encoding. \n json_path  is a string literal, containing the path mode specification, and\nthe path expression, following the syntax rules described in\nlink json-path-syntax-and-semantics . \n strict ($.price + $.tax)?(@ > 99.9) \n lax $[0 to 1].floor()?(@ > 10) \n \n In the  PASSING  clause you can pass arbitrary expressions to be used by the\npath expression. \n PASSING orders.totalprice AS O_PRICE, \n         orders.tax % 10 AS O_TAX \n \n The passed parameters can be referenced in the path expression by named\nvariables, prefixed with  $ . \n lax $?(@.price > $O_PRICE || @.tax > $O_TAX) \n \n Additionally to SQL values, you can pass JSON values, specifying the format and\noptional encoding: \n PASSING orders.json_desc FORMAT JSON AS o_desc, \n         orders.binary_record FORMAT JSON ENCODING UTF16 AS o_rec \n \n Note that the JSON path language is case-sensitive, while the unquoted SQL\nidentifiers are upper-cased. Therefore, it is recommended to use quoted\nidentifiers in the  PASSING  clause: \n lax $.$KeyName PASSING nation.name AS KeyName --> ERROR; no passed value found \n lax $.$KeyName PASSING nation.name AS \"KeyName\" --> correct \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json#json-exists"}
{"content": "\u200b Examples \n Let  customers  be a table containing two columns:  id:bigint ,\n description:varchar . \n id description 101 {\"comment\": \"nice\", \"children\": [10, 13, 16]} 102 {\"comment\": \"problematic\", \"children\" :[8, 11]} 103 {\"comment\": \"knows best\", \"children\": [2]} \n The following query checks which customers have children above the age of 10: \n SELECT \n       id , \n       json_exists ( \n                   description , \n                   lax $ . children [ * ] ? ( @  >   10 ) \n                   )   AS  children_above_ten \n FROM  customers \n \n id children_above_ten 101 true 102 true 103 false \n In the following query, the path mode is strict. We check the third child for\neach customer. This should cause a structural error for the customers who do\nnot have three or more children. This error is handled according to the  ON ERROR  clause. \n SELECT \n       id , \n       json_exists ( \n                   description , \n                   strict $ . children [ 2 ] ? ( @  >   10 ) \n                   UNKNOWN  ON  ERROR \n                   )   AS  child_3_above_ten \n FROM  customers \n \n id child_3_above_ten 101 true 102 NULL 103 NULL \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json#examples"}
{"content": "\u200b json_query \n The  json_query  function extracts a JSON value from a JSON value. \n JSON_QUERY( \n     json_input [ FORMAT JSON [ ENCODING { UTF8 | UTF16 | UTF32 } ] ], \n     json_path \n     [ PASSING json_argument [, ...] ] \n     [ RETURNING type [ FORMAT JSON [ ENCODING { UTF8 | UTF16 | UTF32 } ] ] ] \n     [ WITHOUT [ ARRAY ] WRAPPER | \n       WITH [ { CONDITIONAL | UNCONDITIONAL } ] [ ARRAY ] WRAPPER ] \n     [ { KEEP | OMIT } QUOTES [ ON SCALAR STRING ] ] \n     [ { ERROR | NULL | EMPTY ARRAY | EMPTY OBJECT } ON EMPTY ] \n     [ { ERROR | NULL | EMPTY ARRAY | EMPTY OBJECT } ON ERROR ] \n     ) \n \n The constant string  json_path  is evaluated using the  json_input  as the\ncontext variable ( $ ), and the passed arguments as the named variables\n( $variable_name ). \n The returned value is a JSON item returned by the path. By default, it is\nrepresented as a character string ( varchar ). In the  RETURNING  clause,\nyou can specify other character string type or  varbinary . With\n varbinary , you can also specify the desired encoding. \n json_input  is a character string or a binary string. It should contain\na single JSON item. For a binary string, you can specify encoding. \n json_path  is a string literal, containing the path mode specification, and\nthe path expression, following the syntax rules described in\nlink json-path-syntax-and-semantics . \n strict $.keyvalue()?(@.name == $cust_id) \n lax $[5 to last] \n \n In the  PASSING  clause you can pass arbitrary expressions to be used by the\npath expression. \n PASSING orders.custkey AS CUST_ID \n \n The passed parameters can be referenced in the path expression by named\nvariables, prefixed with  $ . \n strict $.keyvalue()?(@.value == $CUST_ID) \n \n Additionally to SQL values, you can pass JSON values, specifying the format and\noptional encoding: \n PASSING orders.json_desc FORMAT JSON AS o_desc, \n         orders.binary_record FORMAT JSON ENCODING UTF16 AS o_rec \n \n Note that the JSON path language is case-sensitive, while the unquoted SQL\nidentifiers are upper-cased. Therefore, it is recommended to use quoted\nidentifiers in the  PASSING  clause: \n lax $.$KeyName PASSING nation.name AS KeyName --> ERROR; no passed value found \n lax $.$KeyName PASSING nation.name AS \"KeyName\" --> correct \n \n The  ARRAY WRAPPER  clause lets you modify the output by wrapping the results\nin a JSON array.  WITHOUT ARRAY WRAPPER  is the default option.  WITH CONDITIONAL ARRAY WRAPPER  wraps every result which is not a singleton JSON\narray or JSON object.  WITH UNCONDITIONAL ARRAY WRAPPER  wraps every result. \n The  QUOTES  clause lets you modify the result for a scalar string by\nremoving the double quotes being part of the JSON string representation. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json#json-query"}
{"content": "\u200b Examples \n Let  customers  be a table containing two columns:  id:bigint ,\n description:varchar . \n id description 101 {\"comment\": \"nice\", \"children\": [10, 13, 16]} 102 {\"comment\": \"problematic\", \"children\": [8, 11]} 103 {\"comment\": \"knows best\", \"children\": [2]} \n The following query gets the  children  array for each customer: \n SELECT \n       id , \n       json_query ( \n                  description , \n                  lax $ . children \n                  )   AS  children \n FROM  customers \n \n id children 101 [10,13,16] 102 [8,11] 103 [2] \n The following query gets the collection of children for each customer.\nNote that the  json_query  function can only output a single JSON item. If\nyou dont use array wrapper, you get an error for every customer with multiple\nchildren. The error is handled according to the  ON ERROR  clause. \n SELECT \n       id , \n       json_query ( \n                  description , \n                  lax $ . children [ * ] \n                  WITHOUT ARRAY WRAPPER \n                   NULL   ON  ERROR \n                  )   AS  children \n FROM  customers \n \n id children 101 NULL 102 NULL 103 2 \n The following query gets the last child for each customer, wrapped in a JSON\narray: \n SELECT \n       id , \n       json_query ( \n                  description , \n                  lax $ . children [ last ] \n                   WITH  ARRAY WRAPPER \n                  )   AS  last_child \n FROM  customers \n \n id last_child 101 [16] 102 [11] 103 [2] \n The following query gets all children above the age of 12 for each customer,\nwrapped in a JSON array. The second and the third customer dont have children\nof this age. Such case is handled according to the  ON EMPTY  clause. The\ndefault value returned  ON EMPTY  is  NULL . In the following example,\n EMPTY ARRAY ON EMPTY  is specified. \n SELECT \n       id , \n       json_query ( \n                  description , \n                  strict $ . children [ * ] ? ( @  >   12 ) \n                   WITH  ARRAY WRAPPER \n                  EMPTY ARRAY  ON  EMPTY \n                  )   AS  children \n FROM  customers \n \n id children 101 [13,16] 102 [] 103 [] \n The following query shows the result of the  QUOTES  clause. Note that  KEEP QUOTES  is the default. \n SELECT \n       id , \n       json_query ( description ,  strict $ . comment  KEEP QUOTES )   AS  quoted_comment , \n       json_query ( description ,  strict $ . comment  OMIT QUOTES )   AS  unquoted_comment \n FROM  customers \n \n id quoted_comment unquoted_comment 101 \u201dnice\u201d nice 102 \u201dproblematic\u201d problematic 103 \u201dknows best\u201d knows best \n If an error occurs, the returned value depends on the  ON ERROR  clause. The\ndefault value returned  ON ERROR  is  NULL . One example of error is\nmultiple items returned by the path. Other errors caught and handled according\nto the  ON ERROR  clause are: \n \n Input conversion errors, such as malformed JSON \n JSON path evaluation errors, e.g. division by zero \n Output conversion errors \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json#examples-2"}
{"content": "\u200b json_value \n The  json_value  function extracts a scalar SQL value from a JSON value. \n JSON_VALUE( \n     json_input [ FORMAT JSON [ ENCODING { UTF8 | UTF16 | UTF32 } ] ], \n     json_path \n     [ PASSING json_argument [, ...] ] \n     [ RETURNING type ] \n     [ { ERROR | NULL | DEFAULT expression } ON EMPTY ] \n     [ { ERROR | NULL | DEFAULT expression } ON ERROR ] \n     ) \n \n The  json_path  is evaluated using the  json_input  as the context variable\n( $ ), and the passed arguments as the named variables ( $variable_name ). \n The returned value is the SQL scalar returned by the path. By default, it is\nconverted to string ( varchar ). In the  RETURNING  clause, you can specify\nother desired type: a character string type, numeric, boolean or datetime type. \n json_input  is a character string or a binary string. It should contain\na single JSON item. For a binary string, you can specify encoding. \n json_path  is a string literal, containing the path mode specification, and\nthe path expression, following the syntax rules described in\nlink json-path-syntax-and-semantics . \n strict $.price + $tax \n lax $[last].abs().floor() \n \n In the  PASSING  clause you can pass arbitrary expressions to be used by the\npath expression. \n PASSING orders.tax AS O_TAX \n \n The passed parameters can be referenced in the path expression by named\nvariables, prefixed with  $ . \n strict $[last].price + $O_TAX \n \n Additionally to SQL values, you can pass JSON values, specifying the format and\noptional encoding: \n PASSING orders.json_desc FORMAT JSON AS o_desc, \n         orders.binary_record FORMAT JSON ENCODING UTF16 AS o_rec \n \n Note that the JSON path language is case-sensitive, while the unquoted SQL\nidentifiers are upper-cased. Therefore, it is recommended to use quoted\nidentifiers in the  PASSING  clause: \n lax $.$KeyName PASSING nation.name AS KeyName --> ERROR; no passed value found \n lax $.$KeyName PASSING nation.name AS \"KeyName\" --> correct \n \n If the path returns an empty sequence, the  ON EMPTY  clause is applied. The\ndefault value returned  ON EMPTY  is  NULL . You can also specify the\ndefault value: \n DEFAULT -1 ON EMPTY \n \n If an error occurs, the returned value depends on the  ON ERROR  clause. The\ndefault value returned  ON ERROR  is  NULL . One example of error is\nmultiple items returned by the path. Other errors caught and handled according\nto the  ON ERROR  clause are: \n \n Input conversion errors, such as malformed JSON \n JSON path evaluation errors, e.g. division by zero \n Returned scalar not convertible to the desired type \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json#json-value"}
{"content": "\u200b Examples \n Let  customers  be a table containing two columns:  id:bigint ,\n description:varchar . \n id description 101 {\"comment\" : \"nice\", \"children\" : [10, 13, 16]} 102 {\"comment\" : \"problematic\", \"children\" : [8, 11]} 103 {\"comment\" : \"knows best\", \"children\" : [2]} \n The following query gets the  comment  for each customer as  char(12) : \n SELECT  id ,  json_value ( \n                       description , \n                       lax $ . comment \n                        RETURNING   char ( 12 ) \n                       )   AS   comment \n FROM  customers \n \n id comment 101 nice 102 problematic 103 knows best \n The following query gets the first childs age for each customer as\n tinyint : \n SELECT  id ,  json_value ( \n                       description , \n                       lax $ . children [ 0 ] \n                        RETURNING   tinyint \n                       )   AS  child \n FROM  customers \n \n id child 101 10 102 8 103 2 \n The following query gets the third childs age for each customer. In the strict\nmode, this should cause a structural error for the customers who do not have\nthe third child. This error is handled according to the  ON ERROR  clause. \n SELECT  id ,  json_value ( \n                       description , \n                       strict $ . children [ 2 ] \n                        DEFAULT  err  ON  ERROR \n                       )   AS  child \n FROM  customers \n \n id child 101 16 102 err 103 err \n After changing the mode to lax, the structural error is suppressed, and the\ncustomers without a third child produce empty sequence. This case is handled\naccording to the  ON EMPTY  clause. \n SELECT  id ,  json_value ( \n                       description , \n                       lax $ . children [ 2 ] \n                        DEFAULT  missing  ON  EMPTY \n                       )   AS  child \n FROM  customers \n \n id child 101 16 102 missing 103 missing \n (json-array)= \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json#examples-3"}
{"content": "\u200b json_array \n The  json_array  function creates a JSON array containing given elements. \n JSON_ARRAY( \n     [ array_element [, ...] \n       [ { NULL ON NULL | ABSENT ON NULL } ] ], \n     [ RETURNING type [ FORMAT JSON [ ENCODING { UTF8 | UTF16 | UTF32 } ] ] ] \n     ) \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json#json-array"}
{"content": "\u200b Argument types \n The array elements can be arbitrary expressions. Each passed value is converted\ninto a JSON item according to its type, and optional  FORMAT  and\n ENCODING  specification. \n You can pass SQL values of types boolean, numeric, and character string. They\nare converted to corresponding JSON literals: \n SELECT  json_array ( true ,   12 e - 1 ,   text ) \n --> [true,1.2,\"text\"] \n \n Additionally to SQL values, you can pass JSON values. They are character or\nbinary strings with a specified format and optional encoding: \n SELECT json_array( \n                   [  \"text\"  ]  FORMAT JSON, \n                   X5B0035005D00 FORMAT JSON ENCODING UTF16 \n                  ) \n --> [[\"text\"],[5]] \n \n You can also nest other JSON-returning functions. In that case, the  FORMAT \noption is implicit: \n SELECT  json_array ( \n                   json_query ( { \"key\"  :  [    \"value\"    ] } ,  lax $ . key ) \n                   ) \n --> [[\"value\"]] \n \n Other passed values are cast to varchar, and they become JSON text literals: \n SELECT  json_array ( \n                    DATE   2001 - 01 - 31 , \n                   UUID  12151 fd2 - 7586 - 11 e9 - 8 f9e - 2 a86e4085a59 \n                   ) \n --> [\"2001-01-31\",\"12151fd2-7586-11e9-8f9e-2a86e4085a59\"] \n \n You can omit the arguments altogether to get an empty array: \n SELECT  json_array ( )   --> [] \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json#argument-types"}
{"content": "\u200b Null handling \n If a value passed for an array element is  null , it is treated according to\nthe specified null treatment option. If  ABSENT ON NULL  is specified, the\nnull element is omitted in the result. If  NULL ON NULL  is specified, JSON\n null  is added to the result.  ABSENT ON NULL  is the default\nconfiguration: \n SELECT  json_array ( true ,   null ,   1 ) \n --> [true,1] \n \n SELECT  json_array ( true ,   null ,   1  ABSENT  ON   NULL ) \n --> [true,1] \n \n SELECT  json_array ( true ,   null ,   1   NULL   ON   NULL ) \n --> [true,null,1] \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json#null-handling"}
{"content": "\u200b Returned type \n The SQL standard imposes that there is no dedicated data type to represent JSON\ndata in SQL. Instead, JSON data is represented as character or binary strings.\nBy default, the  json_array  function returns varchar containing the textual\nrepresentation of the JSON array. With the  RETURNING  clause, you can\nspecify other character string type: \n SELECT  json_array ( true ,   1   RETURNING   VARCHAR ( 100 ) ) \n --> [true,1] \n \n You can also specify to use varbinary and the required encoding as return type.\nThe default encoding is UTF8: \n SELECT  json_array ( true ,   1   RETURNING   VARBINARY ) \n --> X5b 74 72 75 65 2c 31 5d \n \n SELECT  json_array ( true ,   1   RETURNING   VARBINARY  FORMAT JSON ENCODING UTF8 ) \n --> X5b 74 72 75 65 2c 31 5d \n \n SELECT  json_array ( true ,   1   RETURNING   VARBINARY  FORMAT JSON ENCODING UTF16 ) \n --> X5b 00 74 00 72 00 75 00 65 00 2c 00 31 00 5d 00 \n \n SELECT  json_array ( true ,   1   RETURNING   VARBINARY  FORMAT JSON ENCODING UTF32 ) \n --> X5b 00 00 00 74 00 00 00 72 00 00 00 75 00 00 00 65 00 00 00 2c 00 00 00 31 00 00 00 5d 00 00 00 \n \n (json-object)= \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json#returned-type"}
{"content": "\u200b json_object \n The  json_object  function creates a JSON object containing given key-value pairs. \n JSON_OBJECT( \n     [ key_value [, ...] \n       [ { NULL ON NULL | ABSENT ON NULL } ] ], \n       [ { WITH UNIQUE [ KEYS ] | WITHOUT UNIQUE [ KEYS ] } ] \n     [ RETURNING type [ FORMAT JSON [ ENCODING { UTF8 | UTF16 | UTF32 } ] ] ] \n     ) \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json#json-object"}
{"content": "\u200b Argument passing conventions \n There are two conventions for passing keys and values: \n SELECT  json_object ( 'key1'  :  1 ,   'key2'  :  true ) \n --> {\"key1\":1,\"key2\":true} \n \n SELECT  json_object ( KEY   'key1'   VALUE   1 ,   KEY   'key2'   VALUE   true ) \n --> {\"key1\":1,\"key2\":true} \n \n In the second convention, you can omit the  KEY  keyword: \n SELECT  json_object ( 'key1'   VALUE   1 ,   'key2'   VALUE   true ) \n --> {\"key1\":1,\"key2\":true} \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json#argument-passing-conventions"}
{"content": "\u200b Argument types \n The keys can be arbitrary expressions. They must be of character string type.\nEach key is converted into a JSON text item, and it becomes a key in the\ncreated JSON object. Keys must not be null. \n The values can be arbitrary expressions. Each passed value is converted\ninto a JSON item according to its type, and optional  FORMAT  and\n ENCODING  specification. \n You can pass SQL values of types boolean, numeric, and character string. They\nare converted to corresponding JSON literals: \n SELECT  json_object ( 'x'  :  true ,   'y'  :  12 e - 1 ,   'z'  :  'text' ) \n --> {\"x\":true,\"y\":1.2,\"z\":\"text\"} \n \n Additionally to SQL values, you can pass JSON values. They are character or\nbinary strings with a specified format and optional encoding: \n SELECT  json_object ( \n                     'x'  :  '[  \"text\"  ] '  FORMAT JSON , \n                     'y'  : X '5B0035005D00'  FORMAT JSON ENCODING UTF16 \n                    ) \n --> {\"x\":[\"text\"],\"y\":[5]} \n \n You can also nest other JSON-returning functions. In that case, the  FORMAT \noption is implicit: \n SELECT  json_object ( \n                     'x'  : json_query ( '{\"key\" : [  \"value\"  ]}' ,   'lax $.key' ) \n                    ) \n --> {\"x\":[\"value\"]} \n \n Other passed values are cast to varchar, and they become JSON text literals: \n SELECT  json_object ( \n                     'x'  :  DATE   '2001-01-31' , \n                     'y'  : UUID  '12151fd2-7586-11e9-8f9e-2a86e4085a59' \n                    ) \n --> {\"x\":\"2001-01-31\",\"y\":\"12151fd2-7586-11e9-8f9e-2a86e4085a59\"} \n \n You can omit the arguments altogether to get an empty object: \n SELECT  json_object ( )   --> {} \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json#argument-types-2"}
{"content": "\u200b Null handling \n The values passed for JSON object keys must not be null. It is allowed to pass\n null  for JSON object values. A null value is treated according to the\nspecified null treatment option. If  NULL ON NULL  is specified, a JSON\nobject entry with  null  value is added to the result. If  ABSENT ON NULL \nis specified, the entry is omitted in the result.  NULL ON NULL  is the\ndefault configuration.: \n SELECT  json_object ( 'x'  :  null ,   'y'  :  1 ) \n --> '{\"x\":null,\"y\":1}' \n \n SELECT  json_object ( 'x'  :  null ,   'y'  :  1   NULL   ON   NULL ) \n --> '{\"x\":null,\"y\":1}' \n \n SELECT  json_object ( 'x'  :  null ,   'y'  :  1  ABSENT  ON   NULL ) \n --> '{\"y\":1}' \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json#null-handling-2"}
{"content": "\u200b Key uniqueness \n If a duplicate key is encountered, it is handled according to the specified key\nuniqueness constraint. \n If  WITH UNIQUE KEYS  is specified, a duplicate key results in a query\nfailure: \n SELECT  json_object ( 'x'  :  null ,   'x'  :  1   WITH   UNIQUE   KEYS ) \n --> failure: \"duplicate key passed to JSON_OBJECT function\" \n \n Note that this option is not supported if any of the arguments has a\n FORMAT  specification. \n If  WITHOUT UNIQUE KEYS  is specified, duplicate keys are not supported due\nto implementation limitation.  WITHOUT UNIQUE KEYS  is the default\nconfiguration. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json#key-uniqueness"}
{"content": "\u200b Returned type \n The SQL standard imposes that there is no dedicated data type to represent JSON\ndata in SQL. Instead, JSON data is represented as character or binary strings.\nBy default, the  json_object  function returns varchar containing the textual\nrepresentation of the JSON object. With the  RETURNING  clause, you can\nspecify other character string type: \n SELECT  json_object ( 'x'  :  1   RETURNING   VARCHAR ( 100 ) ) \n --> '{\"x\":1}' \n \n You can also specify to use varbinary and the required encoding as return type.\nThe default encoding is UTF8: \n SELECT  json_object ( 'x'  :  1   RETURNING   VARBINARY ) \n --> X'7b 22 78 22 3a 31 7d' \n \n SELECT  json_object ( 'x'  :  1   RETURNING   VARBINARY  FORMAT JSON ENCODING UTF8 ) \n --> X'7b 22 78 22 3a 31 7d' \n \n SELECT  json_object ( 'x'  :  1   RETURNING   VARBINARY  FORMAT JSON ENCODING UTF16 ) \n --> X'7b 00 22 00 78 00 22 00 3a 00 31 00 7d 00' \n \n SELECT  json_object ( 'x'  :  1   RETURNING   VARBINARY  FORMAT JSON ENCODING UTF32 ) \n --> X'7b 00 00 00 22 00 00 00 78 00 00 00 22 00 00 00 3a 00 00 00 31 00 00 00 7d 00 00 00' \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json#returned-type-2"}
{"content": "\u200b Cast to JSON \n The following functions and operators are not compliant with the SQL\nstandard, and should be considered deprecated. According to the SQL\nstandard, there shall be no  JSON  data type. Instead, JSON values\nshould be represented as string values. The remaining functionality of the\nfollowing functions is covered by the functions described previously. \n The following types can be cast to JSON: \n \n BOOLEAN \n TINYINT \n SMALLINT \n INTEGER \n BIGINT \n REAL \n DOUBLE \n VARCHAR \n \n Additionally,  ARRAY ,  MAP , and  ROW  types can be cast to JSON when\nthe following requirements are met: \n \n ARRAY  types can be cast when the element type of the array is one\nof the supported types. \n MAP  types can be cast when the key type of the map is  VARCHAR  and\nthe value type of the map is a supported type, \n ROW  types can be cast when every field type of the row is a supported\ntype. \n \n Cast operations with supported link character string types <string-data-types>  treat the input as a string, not validated as JSON.\nThis means that a cast operation with a string-type input of invalid JSON\nresults in a successful cast to invalid JSON.\nInstead, consider using the  json_parse  function to\ncreate validated JSON from a string. \n The following examples show the behavior of casting to JSON with these types: \n SELECT  CAST ( NULL   AS  JSON ) ; \n -- NULL \n \n SELECT  CAST ( 1   AS  JSON ) ; \n -- JSON '1' \n \n SELECT  CAST ( 9223372036854775807   AS  JSON ) ; \n -- JSON '9223372036854775807' \n \n SELECT  CAST ( 'abc'   AS  JSON ) ; \n -- JSON '\"abc\"' \n \n SELECT  CAST ( true   AS  JSON ) ; \n -- JSON 'true' \n \n SELECT  CAST ( 1.234   AS  JSON ) ; \n -- JSON '1.234' \n \n SELECT  CAST ( ARRAY [ 1 ,   23 ,   456 ]   AS  JSON ) ; \n -- JSON '[1,23,456]' \n \n SELECT  CAST ( ARRAY [ 1 ,   NULL ,   456 ]   AS  JSON ) ; \n -- JSON '[1,null,456]' \n \n SELECT  CAST ( ARRAY [ ARRAY [ 1 ,   23 ] ,  ARRAY [ 456 ] ]   AS  JSON ) ; \n -- JSON '[[1,23],[456]]' \n \n SELECT  CAST ( MAP ( ARRAY [ 'k1' ,   'k2' ,   'k3' ] ,  ARRAY [ 1 ,   23 ,   456 ] )   AS  JSON ) ; \n -- JSON '{\"k1\":1,\"k2\":23,\"k3\":456}' \n \n SELECT  CAST ( CAST ( ROW ( 123 ,   'abc' ,   true )   AS \n              ROW ( v1  BIGINT ,  v2  VARCHAR ,  v3  BOOLEAN ) )   AS  JSON ) ; \n -- JSON '{\"v1\":123,\"v2\":\"abc\",\"v3\":true}' \n \n Casting from NULL to  JSON  is not straightforward. Casting\nfrom a standalone  NULL  will produce SQL  NULL  instead of\n JSON null . However, when casting from arrays or map containing\n NULL s, the produced  JSON  will have  null s in it. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json#cast-to-json"}
{"content": "\u200b Cast from JSON \n Casting to  BOOLEAN ,  TINYINT ,  SMALLINT ,  INTEGER ,\n BIGINT ,  REAL ,  DOUBLE  or  VARCHAR  is supported.\nCasting to  ARRAY  and  MAP  is supported when the element type of\nthe array is one of the supported types, or when the key type of the map\nis  VARCHAR  and value type of the map is one of the supported types.\nBehaviors of the casts are shown with the examples below: \n SELECT  CAST ( JSON  'null'   AS   VARCHAR ) ; \n -- NULL \n \n SELECT  CAST ( JSON  '1'   AS   INTEGER ) ; \n -- 1 \n \n SELECT  CAST ( JSON  '9223372036854775807'   AS   BIGINT ) ; \n -- 9223372036854775807 \n \n SELECT  CAST ( JSON  '\"abc\"'   AS   VARCHAR ) ; \n -- abc \n \n SELECT  CAST ( JSON  'true'   AS   BOOLEAN ) ; \n -- true \n \n SELECT  CAST ( JSON  '1.234'   AS   DOUBLE ) ; \n -- 1.234 \n \n SELECT  CAST ( JSON  '[1,23,456]'   AS  ARRAY ( INTEGER ) ) ; \n -- [1, 23, 456] \n \n SELECT  CAST ( JSON  '[1,null,456]'   AS  ARRAY ( INTEGER ) ) ; \n -- [1, NULL, 456] \n \n SELECT  CAST ( JSON  '[[1,23],[456]]'   AS  ARRAY ( ARRAY ( INTEGER ) ) ) ; \n -- [[1, 23], [456]] \n \n SELECT  CAST ( JSON  '{\"k1\":1,\"k2\":23,\"k3\":456}'   AS  MAP ( VARCHAR ,   INTEGER ) ) ; \n -- {k1=1, k2=23, k3=456} \n \n SELECT  CAST ( JSON  '{\"v1\":123,\"v2\":\"abc\",\"v3\":true}'   AS \n              ROW ( v1  BIGINT ,  v2  VARCHAR ,  v3  BOOLEAN ) ) ; \n -- {v1=123, v2=abc, v3=true} \n \n SELECT  CAST ( JSON  '[123,\"abc\",true]'   AS \n              ROW ( v1  BIGINT ,  v2  VARCHAR ,  v3  BOOLEAN ) ) ; \n -- {v1=123, v2=abc, v3=true} \n \n JSON arrays can have mixed element types and JSON maps can have mixed\nvalue types. This makes it impossible to cast them to SQL arrays and maps in\nsome cases. To address this, Trino supports partial casting of arrays and maps: \n SELECT  CAST ( JSON  '[[1, 23], 456]'   AS  ARRAY ( JSON ) ) ; \n -- [JSON '[1,23]', JSON '456'] \n \n SELECT  CAST ( JSON  '{\"k1\": [1, 23], \"k2\": 456}'   AS  MAP ( VARCHAR ,  JSON ) ) ; \n -- {k1 = JSON '[1,23]', k2 = JSON '456'} \n \n SELECT  CAST ( JSON  '[null]'   AS  ARRAY ( JSON ) ) ; \n -- [JSON 'null'] \n \n When casting from  JSON  to  ROW , both JSON array and JSON object are supported. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json#cast-from-json"}
{"content": "\u200b Other JSON functions \n In addition to the functions explained in more details in the preceding\nsections, the following functions are available: \n \u200b  (#is-json-scalar) is_json_scalar() \n is_json_scalar(json)  \u2192 boolean \n Determine if  json  is a scalar (i.e. a JSON number, a JSON string,  true ,  false  or  null ): \n SELECT  is_json_scalar ( '1' ) ;           -- true \n SELECT  is_json_scalar ( '[1, 2, 3]' ) ;   -- false \n \n \u200b  (#json-array-contains) json_array_contains() \n json_array_contains(json, value)  \u2192 boolean \n Determine if  value  exists in  json  (a string containing a JSON array): \n SELECT  json_array_contains ( '[1, 2, 3]' ,   2 ) ;   -- true \n \n \u200b  (#json-array-get) json_array_get() \n json_array_get(json_array, index)  \u2192 json \n The semantics of this function are broken. If the extracted element\nis a string, it will be converted into an invalid  JSON  value that\nis not properly quoted (the value will not be surrounded by quotes\nand any interior quotes will not be escaped). We recommend against using this function. It cannot be fixed without\nimpacting existing usages and may be removed in a future release. \n Returns the element at the specified index into the  json_array .\nThe index is zero-based: \n SELECT  json_array_get ( '[\"a\", [3, 9], \"c\"]' ,   0 ) ;   -- JSON 'a' (invalid JSON) \n SELECT  json_array_get ( '[\"a\", [3, 9], \"c\"]' ,   1 ) ;   -- JSON '[3,9]' \n \n This function also supports negative indexes for fetching element indexed\nfrom the end of an array: \n SELECT  json_array_get ( '[\"c\", [3, 9], \"a\"]' ,   - 1 ) ;   -- JSON 'a' (invalid JSON) \n SELECT  json_array_get ( '[\"c\", [3, 9], \"a\"]' ,   - 2 ) ;   -- JSON '[3,9]' \n \n If the element at the specified index doesn\u2019t exist, the function returns null: \n SELECT  json_array_get ( '[]' ,   0 ) ;                  -- NULL \n SELECT  json_array_get ( '[\"a\", \"b\", \"c\"]' ,   10 ) ;    -- NULL \n SELECT  json_array_get ( '[\"c\", \"b\", \"a\"]' ,   - 10 ) ;   -- NULL \n \n \u200b  (#json-array-length) json_array_length() \n json_array_length(json)  \u2192 bigint \n Returns the array length of  json  (a string containing a JSON array): \n SELECT  json_array_length ( '[1, 2, 3]' ) ;   -- 3 \n \n \u200b  (#json-extract) json_extract() \n json_extract(json, json_path)  \u2192 json \n Evaluates the [JSONPath]-like expression  json_path  on  json \n(a string containing JSON) and returns the result as a JSON string: \n SELECT  json_extract ( json ,   '$.store.book' ) ; \n SELECT  json_extract ( json ,   '$.store[book]' ) ; \n SELECT  json_extract ( json ,   '$.store[\"book name\"]' ) ; \n \n The  json_query  function provides a more powerful and\nfeature-rich alternative to parse and extract JSON data. \n \u200b  (#json-extract-scalar) json_extract_scalar() \n json_extract_scalar(json, json_path)  \u2192 varchar \n Like json_extract , but returns the result value as a string (as opposed to being encoded as JSON). The value referenced by  json_path` must be a\nscalar (boolean, number or string). \n SELECT  json_extract_scalar ( '[1, 2, 3]' ,   '$[2]' ) ; \n SELECT  json_extract_scalar ( json ,   '$.store.book[0].author' ) ; \n \n \u200b  (#json-format) json_format() \n json_format(json)  \u2192 varchar \n Returns the JSON text serialized from the input JSON value.\nThis is inverse function to  json_parse : \n SELECT  json_format ( JSON  '[1, 2, 3]' ) ;   -- '[1,2,3]' \n SELECT  json_format ( JSON  '\"a\"' ) ;         -- '\"a\"' \n \n json_format  and  CAST(json AS VARCHAR)  have completely different semantics. json_format  serializes the input JSON value to JSON text conforming to\nrfc 7159 . The JSON value can be a JSON object, a JSON array, a JSON string,\na JSON number,  true ,  false  or  null . SELECT  json_format ( JSON  '{\"a\": 1, \"b\": 2}' ) ;   -- '{\"a\":1,\"b\":2}' \n SELECT  json_format ( JSON  '[1, 2, 3]' ) ;          -- '[1,2,3]' \n SELECT  json_format ( JSON  '\"abc\"' ) ;              -- '\"abc\"' \n SELECT  json_format ( JSON  '42' ) ;                 -- '42' \n SELECT  json_format ( JSON  'true' ) ;               -- 'true' \n SELECT  json_format ( JSON  'null' ) ;               -- 'null' \n CAST(json AS VARCHAR)  casts the JSON value to the corresponding SQL VARCHAR value.\nFor JSON string, JSON number,  true ,  false  or  null , the cast\nbehavior is same as the corresponding SQL type. JSON object and JSON array\ncannot be cast to VARCHAR. SELECT  CAST ( JSON  '{\"a\": 1, \"b\": 2}'   AS   VARCHAR ) ;   -- ERROR! \n SELECT  CAST ( JSON  '[1, 2, 3]'   AS   VARCHAR ) ;          -- ERROR! \n SELECT  CAST ( JSON  '\"abc\"'   AS   VARCHAR ) ;              -- 'abc' (the double quote is gone) \n SELECT  CAST ( JSON  '42'   AS   VARCHAR ) ;                 -- '42' \n SELECT  CAST ( JSON  'true'   AS   VARCHAR ) ;               -- 'true' \n SELECT  CAST ( JSON  'null'   AS   VARCHAR ) ;               -- NULL \n \n \u200b  (#json-parse) json_parse() \n json_parse(string)  \u2192 json \n Returns the JSON value deserialized from the input JSON text.\nThis is inverse function to  json_format : \n SELECT  json_parse ( '[1, 2, 3]' ) ;     -- JSON '[1,2,3]' \n SELECT  json_parse ( '\"abc\"' ) ;         -- JSON '\"abc\"' \n \n json_parse  expects a JSON text conforming to rfc 7159 , and returns\nthe JSON value deserialized from the JSON text.\nThe JSON value can be a JSON object, a JSON array, a JSON string, a JSON number,\n true ,  false  or  null . \n SELECT  json_parse ( 'not_json' ) ;           -- ERROR! \n SELECT  json_parse ( '[\"a\": 1, \"b\": 2]' ) ;   -- JSON '[\"a\": 1, \"b\": 2]' \n SELECT  json_parse ( '[1, 2, 3]' ) ;          -- JSON '[1,2,3]' \n SELECT  json_parse ( '\"abc\"' ) ;              -- JSON '\"abc\"' \n SELECT  json_parse ( '42' ) ;                 -- JSON '42' \n SELECT  json_parse ( 'true' ) ;               -- JSON 'true' \n SELECT  json_parse ( 'null' ) ;               -- JSON 'null' \n \n CAST(string AS JSON)  takes any VARCHAR value as input, and returns\na JSON string with its value set to input string. \n SELECT CAST('not_json' AS JSON);         -- JSON '\"not_json\"' \n SELECT CAST('[\"a\": 1, \"b\": 2]' AS JSON); -- JSON '\"[\\\"a\\\": 1, \\\"b\\\": 2]\"' \n SELECT CAST('[1, 2, 3]' AS JSON);        -- JSON '\"[1, 2, 3]\"' \n SELECT CAST('\"abc\"' AS JSON);            -- JSON '\"\\\"abc\\\"\"' \n SELECT CAST('42' AS JSON);               -- JSON '\"42\"' \n SELECT CAST('true' AS JSON);             -- JSON '\"true\"' \n SELECT CAST('null' AS JSON);             -- JSON '\"null\"' \n \n \u200b  (#json-size) json_size() \n json_size(json, json_path)  \u2192 bigint \n Like  json_extract , but returns the size of the value.\nFor objects or arrays, the size is the number of members, and the size of a scalar value is zero. \n SELECT  json_size ( '{\"x\": {\"a\": 1, \"b\": 2}}' ,   '$.x' ) ;     -- 2 \n SELECT  json_size ( '{\"x\": [1, 2, 3]}' ,   '$.x' ) ;            -- 3 \n SELECT  json_size ( '{\"x\": {\"a\": 1, \"b\": 2}}' ,   '$.x.a' ) ;   -- 0 \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/json) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) Lambda expressions  (/query-engine/Functions-and-operators/lambda) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page JSON functions and operators  (#json-functions-and-operators) JSON path language  (#json-path-language) JSON path syntax and semantics  (#json-path-syntax-and-semantics) literals  (#literals) numeric literals  (#numeric-literals) string literals  (#string-literals) boolean literals  (#boolean-literals) null literal  (#null-literal) variables  (#variables) context variable  (#context-variable) named variable  (#named-variable) current item variable  (#current-item-variable) last subscript variable  (#last-subscript-variable) arithmetic binary expressions  (#arithmetic-binary-expressions) arithmetic unary expressions  (#arithmetic-unary-expressions) member accessor  (#member-accessor) wildcard member accessor  (#wildcard-member-accessor) descendant member accessor  (#descendant-member-accessor) array accessor  (#array-accessor) wildcard array accessor  (#wildcard-array-accessor) filter  (#filter) Comparisons  (#comparisons) Comparison rules  (#comparison-rules) double()  (#double) ceiling(), floor(), and abs()  (#ceiling-floor-and-abs) keyvalue()  (#keyvalue) type()  (#type) size()  (#size) Limitations  (#limitations) JSON path modes  (#json-path-modes) Examples of the lax mode behavior  (#examples-of-the-lax-mode-behavior) json_exists  (#json-exists) Examples  (#examples) json_query  (#json-query) Examples  (#examples-2) json_value  (#json-value) Examples  (#examples-3) json_array  (#json-array) Argument types  (#argument-types) Null handling  (#null-handling) Returned type  (#returned-type) json_object  (#json-object) Argument passing conventions  (#argument-passing-conventions) Argument types  (#argument-types-2) Null handling  (#null-handling-2) Key uniqueness  (#key-uniqueness) Returned type  (#returned-type-2) Cast to JSON  (#cast-to-json) Cast from JSON  (#cast-from-json) Other JSON functions  (#other-json-functions) is_json_scalar()  (#is-json-scalar) json_array_contains()  (#json-array-contains) json_array_get()  (#json-array-get) json_array_length()  (#json-array-length) json_extract()  (#json-extract) json_extract_scalar()  (#json-extract-scalar) json_format()  (#json-format) json_parse()  (#json-parse) json_size()  (#json-size)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/json#other-json-functions"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functions and Operators TON address functions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators TON address functions Smart contract addresses on the TON blockchain are composed of two key components: \n \n Workchain Identifier. A signed 8-bit number that identifies the workchain. Currently, only the masterchain (workchain_id = -1) and occasionally the basic workchain (workchain_id = 0) are active on the TON blockchain. \n Account Identifier. A 256-bit number unique to each account within a workchain. \n \n There are two different representation of contract addresses on TON blockchain: \n \n Raw addresses: Original full representation of smart contract addresses. Raw smart contract addresses consist of a workchain ID and account ID and are displayed in the following format:  <decimal workchain_id>:<64 hexadecimal digits with account_id> . Example:  -1:fcb91a3a3816d0f7b8c2c76108b8a9bc5a6b7a55bd79f8ab101c52db29232260 . \n User-friendly addresses: An enhanced version of raw address designed to improve security and usability. User-friendly addresses were developed to secure and simplify the experience for TON users who share addresses on the internet (for example, on public messaging platforms or via their email service providers), as well as in the real world. User-friendly addresses are made up of 36 bytes in total. \n \n We provide functions to translate between the two formats. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/tonaddress"}
{"content": "\u200b Functions \n \u200b  (#ton-address-raw-to-user-friendly) ton_address_raw_to_user_friendly() \n ton_address_raw_to_user_friendly(varchar, boolean)  \u2192  varchar \n Converts a raw address to its user-friendly equivalent. The second argument is a boolean flag that specifies whether the bounceable flag is enabled (true) or disabled (false). If omitted, the bounceable flag defaults to true. \n SELECT   \n     ton_address_raw_to_user_friendly ( '0:ca6e321c7cce9ecedf0a8ca2492ec8592494aa5fb5ce0387dff96ef6af982a3e' ,   true ) \n -- results 'EQDKbjIcfM6ezt8KjKJJLshZJJSqX7XOA4ff-W72r5gqPrHF' \n \n \u200b  (#ton-address-user-friendly-to-raw) ton_address_user_friendly_to_raw() \n ton_address_user_friendly_to_raw(varchar)  \u2192  varchar \n Converts a user-friendly address back to its raw representation. \n SELECT   \n     ton_address_user_friendly_to_raw ( 'UQDKbjIcfM6ezt8KjKJJLshZJJSqX7XOA4ff-W72r5gqPuwA' ) \n -- results '0:ca6e321c7cce9ecedf0a8ca2492ec8592494aa5fb5ce0387dff96ef6af982a3e' \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/tonaddress) SS58 functions  (/query-engine/Functions-and-operators/ss58) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Functions  (#functions) ton_address_raw_to_user_friendly()  (#ton-address-raw-to-user-friendly) ton_address_user_friendly_to_raw()  (#ton-address-user-friendly-to-raw)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/tonaddress#functions"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functions and Operators Bitwise Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators Bitwise \u200b  (#bit-count) bit_count() \n bit_count(x, bits)  \u2192 bigint\nCount the number of bits set in x (treated as bits-bit signed integer) in 2\u2019s complement representation: \n SELECT  bit_count ( 9 ,   64 ) ;   -- 2 \n SELECT  bit_count ( 9 ,   8 ) ;   -- 2 \n SELECT  bit_count ( - 7 ,   64 ) ;   -- 62 \n SELECT  bit_count ( - 7 ,   8 ) ;   -- 6 \n \n \u200b  (#bitwise-and) bitwise_and() \n bitwise_and(x, y)  \u2192 bigint\nReturns the bitwise AND of x and y in 2\u2019s complement representation. \n Bitwise AND of 19 (binary: 10011) and 25 (binary: 11001) results in 17 (binary: 10001): \n SELECT  bitwise_and ( 19 , 25 ) ;   -- 17 \n \n bitwise_not(x)  \u2192 bigint \n Returns the bitwise NOT of x in 2\u2019s complement representation (NOT x = -x - 1): \n SELECT  bitwise_not ( - 12 ) ;   --  11 \n SELECT  bitwise_not ( 19 ) ;    -- -20 \n SELECT  bitwise_not ( 25 ) ;    -- -26 \n \n \u200b  (#bitwise-or) bitwise_or() \n bitwise_or(x, y)  \u2192 bigint \n Returns the bitwise OR of x and y in 2\u2019s complement representation. \n Bitwise OR of 19 (binary: 10011) and 25 (binary: 11001) results in 27 (binary: 11011): \n SELECT  bitwise_or ( 19 , 25 ) ;   -- 27 \n \n \u200b  (#bitwise-xor) bitwise_xor() \n bitwise_xor(x, y)  \u2192 bigint \n Returns the bitwise XOR of x and y in 2\u2019s complement representation. \n Bitwise XOR of 19 (binary: 10011) and 25 (binary: 11001) results in 10 (binary: 01010): \n SELECT  bitwise_xor ( 19 , 25 ) ;   -- 10 \n \n \u200b  (#bitwise-left-shift) bitwise_left_shift() \n bitwise_left_shift(value, shift)  \u2192 [same as value]\nReturns the left shifted value of value. \n Shifting 1 (binary: 001) by two bits results in 4 (binary: 00100): \n SELECT  bitwise_left_shift ( 1 ,   2 ) ;   -- 4 \n \n Shifting 5 (binary: 0101) by two bits results in 20 (binary: 010100): \n SELECT  bitwise_left_shift ( 5 ,   2 ) ;   -- 20 \n \n Shifting a value by 0 always results in the original value: \n SELECT  bitwise_left_shift ( 20 ,   0 ) ;   -- 20 \n SELECT  bitwise_left_shift ( 42 ,   0 ) ;   -- 42 \n \n Shifting 0 by a shift always results in 0: \n SELECT  bitwise_left_shift ( 0 ,   1 ) ;   -- 0 \n SELECT  bitwise_left_shift ( 0 ,   2 ) ;   -- 0 \n \n \u200b  (#bitwise-right-shift) bitwise_right_shift() \n bitwise_right_shift(value, shift)  \u2192 [same as value] \n Returns the logical right shifted value of value. \n Shifting 8 (binary: 1000) by three bits results in 1 (binary: 001): \n SELECT  bitwise_right_shift ( 8 ,   3 ) ;   -- 1 \n \n Shifting 9 (binary: 1001) by one bit results in 4 (binary: 100): \n SELECT  bitwise_right_shift ( 9 ,   1 ) ;   -- 4 \n \n Shifting a value by 0 always results in the original value: \n SELECT  bitwise_right_shift ( 20 ,   0 ) ;   -- 20 \n SELECT  bitwise_right_shift ( 42 ,   0 ) ;   -- 42 \n \n Shifting a value by 64 or more bits results in 0: \n SELECT  bitwise_right_shift (   12 ,   64 ) ;   -- 0 \n SELECT  bitwise_right_shift ( - 45 ,   64 ) ;   -- 0 \n \n Shifting 0 by a shift always results in 0: \n SELECT  bitwise_right_shift ( 0 ,   1 ) ;   -- 0 \n SELECT  bitwise_right_shift ( 0 ,   2 ) ;   -- 0 \n \n \u200b  (#bitwise-right-shift-arithmetic) bitwise_right_shift_arithmetic() \n bitwise_right_shift_arithmetic(value, shift)  \u2192 [same as value] \n Returns the arithmetic right shifted value of value. \n Returns the same values as bitwise_right_shift() when shifting by less than 64 bits. Shifting by 64 or more bits results in 0 for a positive and -1 for a negative value: \n SELECT  bitwise_right_shift_arithmetic (   12 ,   64 ) ;   -- 0 \n SELECT  bitwise_right_shift_arithmetic ( - 45 ,   64 ) ;   -- -1 \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/bitwise) Binary  (/query-engine/Functions-and-operators/binary) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page bit_count()  (#bit-count) bitwise_and()  (#bitwise-and) bitwise_or()  (#bitwise-or) bitwise_xor()  (#bitwise-xor) bitwise_left_shift()  (#bitwise-left-shift) bitwise_right_shift()  (#bitwise-right-shift) bitwise_right_shift_arithmetic()  (#bitwise-right-shift-arithmetic)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/bitwise"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation DuneSQL Reserved keywords Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) DuneSQL Reserved keywords The following table lists all of the keywords that are reserved in DuneSQL, along with their status in the SQL standard. These reserved keywords must be quoted (using double quotes) in order to be used as an identifier. For example to query the transactions table for all transactions from a specific address you would use the following query with  from  in double quotes: \n Select   *   from  ethereum . transactions   \n where   \"from\"   =   0xc8ebccc5f5689fa8659d83713341e5ad19349448 \n \n ", "url": "https://docs.dune.com/query-engine/reserved-keywords"}
{"content": "\u200b Reserved keywords \n Keyword SQL:2016 ALTER reserved AND reserved AS reserved BETWEEN reserved BY reserved CASE reserved CAST reserved CONSTRAINT reserved CREATE reserved CROSS reserved CUBE reserved CURRENT_CATALOG reserved CURRENT_DATE reserved CURRENT_PATH reserved CURRENT_ROLE reserved CURRENT_SCHEMA reserved CURRENT_TIME reserved CURRENT_TIMESTAMP reserved CURRENT_USER reserved DEALLOCATE reserved DELETE reserved DESCRIBE reserved DISTINCT reserved DROP reserved ELSE reserved END reserved ESCAPE reserved EXCEPT reserved EXECUTE reserved EXISTS reserved EXTRACT reserved FALSE reserved FOR reserved FROM reserved FULL reserved GROUP reserved GROUPING reserved HAVING reserved IN reserved INNER reserved INSERT reserved INTERSECT reserved INTO reserved IS reserved JOIN reserved JSON_ARRAY reserved JSON_EXISTS reserved JSON_OBJECT reserved JSON_QUERY reserved JSON_VALUE reserved LEFT reserved LIKE reserved LISTAGG reserved LOCALTIME reserved LOCALTIMESTAMP reserved NATURAL reserved NORMALIZE reserved NOT reserved NULL reserved ON reserved OR reserved ORDER reserved OUTER reserved PREPARE reserved RECURSIVE reserved RIGHT reserved ROLLUP reserved SELECT reserved SKIP reserved TABLE reserved THEN reserved TRIM reserved TRUE reserved UESCAPE reserved UNION reserved UNNEST reserved USING reserved VALUES reserved WHEN reserved WHERE reserved WITH reserved Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/reserved-keywords) Datatypes  (/query-engine/datatypes) Overview  (/query-engine/Functions-and-operators/index) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Reserved keywords  (#reserved-keywords)", "url": "https://docs.dune.com/query-engine/reserved-keywords#reserved-keywords"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functions and Operators Date and time functions and operators Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators Date and time functions and operators These functions and operators operate on\n date and time data types  (/query-engine/datatypes) . \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/datetime"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functions and Operators T-Digest functions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators T-Digest functions ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/tdigest"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functions and Operators Array functions and operators Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators Array functions and operators Subscript operator: [] {subscript_operator} \n The  []  operator is used to access an element of an array and is\nindexed starting from one: \n      SELECT  my_array [ 1 ]   AS  f_element \n \n Concatenation operator: || {concatenation_operator} \n The  ||  operator is used to concatenate an array with an array or an\nelement of the same type: \n      SELECT  ARRAY [ 1 ]   ||  ARRAY [ 2 ] ; \n      -- [1, 2] \n \n      SELECT  ARRAY [ 1 ]   ||   2 ; \n      -- [1, 2] \n \n      SELECT   2   ||  ARRAY [ 1 ] ; \n      -- [2, 1] \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/array"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Web App Share your work Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Web App Overview  (/web-app/overview) Create Queries Create Visualizations Decoding Contracts Create Dashboards  (/web-app/dashboards) Mint Dashboards  (/web-app/dashboard-minting) Teams on Dune  (/web-app/teams) Dune AI  (/web-app/dune-ai) Upload Data  (/web-app/upload-data) Share your work  (/web-app/embeds) Search content  (/web-app/search) Alerts  (/web-app/alerts) Bug Bounty  (/web-app/bug-bounty) Web App Share your work Embeds allow you to enjoy beautiful, updating Dune charts across the web! Create embeds to display your Dune widgets across the web! \n To save you from having to take screenshots that might not look so great but will definitely be out of date a few minutes after you take them, we\u2019ve built a native embed function that works across most web platforms. \n You can generate embed links by clicking on any query title and selecting the embed function in the top right corner. \n The embed button works as a standalone link and as a way to embed your live graphs into websites/web-app/s. If a Query has no Visualizations, the link will be to the Query Results table. If you have multiple Visualizations, the link will be for whichever Visualization you\u2019ve selected when you clicked the Embed button. \n \n ", "url": "https://docs.dune.com/web-app/embeds"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functions and Operators Binary Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functions and Operators Binary ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/binary"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Functionality Executions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/query-engine/overview) Functionality Executions  (/query-engine/query-executions) Query Views  (/query-engine/query-a-query) Materialized Views  (/query-engine/materialized-views) DuneSQL Writing Efficient Queries  (/query-engine/writing-efficient-queries) Datatypes  (/query-engine/datatypes) Reserved keywords  (/query-engine/reserved-keywords) Functions and Operators Overview  (/query-engine/Functions-and-operators/index) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Array functions and operators  (/query-engine/Functions-and-operators/array) Base58 functions  (/query-engine/Functions-and-operators/base58) Binary  (/query-engine/Functions-and-operators/binary) Bitwise  (/query-engine/Functions-and-operators/bitwise) Chain utility functions  (/query-engine/Functions-and-operators/chain-utility-functions) Comparisons  (/query-engine/Functions-and-operators/comparison) Conditional expressions  (/query-engine/Functions-and-operators/conditional) Conversions  (/query-engine/Functions-and-operators/conversion) Date and time functions and operators  (/query-engine/Functions-and-operators/datetime) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) EVM Decoding Functions  (/query-engine/Functions-and-operators/evm-decoding-functions) HyperLogLog functions  (/query-engine/Functions-and-operators/hyperloglog) JSON functions  (/query-engine/Functions-and-operators/json) Lambda expressions  (/query-engine/Functions-and-operators/lambda) LiveFetch functions  (/query-engine/Functions-and-operators/live-fetch) Logical operators  (/query-engine/Functions-and-operators/logical) Map functions and operators  (/query-engine/Functions-and-operators/map) Mathematical functions and operators  (/query-engine/Functions-and-operators/math) Machine learning functions  (/query-engine/Functions-and-operators/ml) Quantile digest functions  (/query-engine/Functions-and-operators/qdigest) Regular expression functions  (/query-engine/Functions-and-operators/regexp) Set Digest functions  (/query-engine/Functions-and-operators/setdigest) SS58 functions  (/query-engine/Functions-and-operators/ss58) TON address functions  (/query-engine/Functions-and-operators/tonaddress) Tron address functions  (/query-engine/Functions-and-operators/tronaddress) String functions and operators  (/query-engine/Functions-and-operators/string) System information  (/query-engine/Functions-and-operators/system) T-Digest functions  (/query-engine/Functions-and-operators/tdigest) Teradata functions  (/query-engine/Functions-and-operators/teradata) URL functions  (/query-engine/Functions-and-operators/url) UUID functions  (/query-engine/Functions-and-operators/uuid) Varbinary functions (DuneSQL)  (/query-engine/Functions-and-operators/varbinary) Varchar utility functions  (/query-engine/Functions-and-operators/varchar-utility-functions) Window functions  (/query-engine/Functions-and-operators/window) Functionality Executions When and how do queries on Dune get executed? ", "url": "https://docs.dune.com/query-engine/query-executions"}
{"content": "\u200b Date and time operators \n Operator Example Result + date '2012-08-08' + interval '2' day 2012-08-10 + time '01:00' + interval '3' hour 04:00:00.000 + timestamp '2012-08-08 01:00' + interval '29' hour 2012-08-09 06:00:00.000 + timestamp '2012-10-31 01:00' + interval '1' month 2012-11-30 01:00:00.000 + interval '2' day + interval '3' hour 2 03:00:00.000 + interval '3' year + interval '5' month 3-5 - date '2012-08-08' - interval '2' day 2012-08-06 - time '01:00' - interval '3' hour 22:00:00.000 - timestamp '2012-08-08 01:00' - interval '29' hour 2012-08-06 20:00:00.000 - timestamp '2012-10-31 01:00' - interval '1' month 2012-09-30 01:00:00.000 - interval '2' day - interval '3' hour 1 21:00:00.000 - interval '3' year - interval '5' month 2-7 \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/datetime#date-and-time-operators"}
{"content": "\u200b Time zone conversion \n The  AT TIME ZONE  operator sets the time zone of a timestamp: \n      SELECT   timestamp   '2012-10-31 01:00 UTC' ; \n      -- 2012-10-31 01:00:00.000 UTC \n \n      SELECT   timestamp   '2012-10-31 01:00 UTC'  AT  TIME  ZONE  'America/Los_Angeles' ; \n      -- 2012-10-30 18:00:00.000 America/Los_Angeles \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/datetime#time-zone-conversion"}
{"content": "\u200b Date and time functions \n \u200b  (#current-date) current_date \n current_date \n Returns the current date as of the start of the query. \n \u200b  (#current-time) current_time \n current_time \n Returns the current time with time zone as of the start of the query. \n \u200b  (#current-timestamp) current_timestamp \n current_timestamp \n Returns the current timestamp with time zone as of the start of the\nquery, with  3  digits of subsecond precision, \n \u200b  (#current-timestamp-2) current_timestamp() \n current_timestamp(p) \n Returns the current  timestamp with time zone as  timestamp-with-time-zone-data-type of the start of the query, with p` digits of subsecond precision: \n      SELECT   current_timestamp ( 6 ) ; \n      -- 2020-06-24 08:25:31.759993 America/Los_Angeles \n \n \u200b  (#current-timezone) current_timezone() \n current_timezone()  \u2192 varchar \n Returns the current time zone in the format defined by IANA (e.g.,\n America/Los_Angeles ) or as fixed offset from UTC (e.g.,  +08:35 ) \n \u200b  (#date) date() \n date(x)  \u2192 date \n This is an alias for  CAST(x AS date) . \n \u200b  (#last-day-of-month) last_day_of_month() \n last_day_of_month(x)  \u2192 date \n Returns the last day of the month. \n \u200b  (#from-iso8601-timestamp) from_iso8601_timestamp() \n from_iso8601_timestamp(string)  \u2192 timestamp(3) with time zone \n Parses the ISO 8601 formatted date  string , optionally with time and\ntime zone, into a  timestamp(3) with time zone . The time defaults to\n 00:00:00.000 , and the time zone defaults to the session time zone: \n      SELECT  from_iso8601_timestamp ( '2020-05-11' ) ; \n      -- 2020-05-11 00:00:00.000 America/Vancouver \n \n      SELECT  from_iso8601_timestamp ( '2020-05-11T11:15:05' ) ; \n      -- 2020-05-11 11:15:05.000 America/Vancouver \n \n      SELECT  from_iso8601_timestamp ( '2020-05-11T11:15:05.055+01:00' ) ; \n      -- 2020-05-11 11:15:05.055 +01:00 \n \n \u200b  (#from-iso8601-timestamp-nanos) from_iso8601_timestamp_nanos() \n from_iso8601_timestamp_nanos(string)  \u2192 timestamp(9) with time zone \n Parses the ISO 8601 formatted date and time  string . The time zone\ndefaults to the session time zone: \n      SELECT  from_iso8601_timestamp_nanos ( '2020-05-11T11:15:05' ) ; \n      -- 2020-05-11 11:15:05.000000000 America/Vancouver \n \n      SELECT  from_iso8601_timestamp_nanos ( '2020-05-11T11:15:05.123456789+01:00' ) ; \n      -- 2020-05-11 11:15:05.123456789 +01:00 \n \n \u200b  (#from-iso8601-date) from_iso8601_date() \n from_iso8601_date(string)  \u2192 date \n Parses the ISO 8601 formatted date  string  into a  date . The date can\nbe a calendar date, a week date using ISO week numbering, or year and\nday of year combined: \n      SELECT  from_iso8601_date ( '2020-05-11' ) ; \n      -- 2020-05-11 \n \n      SELECT  from_iso8601_date ( '2020-W10' ) ; \n      -- 2020-03-02 \n \n      SELECT  from_iso8601_date ( '2020-123' ) ; \n      -- 2020-05-02 \n \n \u200b  (#at-timezone) at_timezone() \n at_timezone(timestamp, zone)  \u2192 timestamp(p) with time zone \n Returns the timestamp specified in timestamp with the time zone converted from the session time zone to the time zone specified in zone with precision p. In the following example, the session time zone is set to America/New_York, which is three hours ahead of America/Los_Angeles: \n SELECT  current_timezone ( ) \n -- America/New_York \n \n SELECT  at_timezone ( TIMESTAMP   '2022-11-01 09:08:07.321' ,   'America/Los_Angeles' ) \n -- 2022-11-01 06:08:07.321 America/Los_Angeles \n \n \u200b  (#with-timezone) with_timezone() \n with_timezone(timestamp, zone)  \u2192 timestamp(p) with time zone \n Returns the timestamp specified in  timestamp  with the time zone specified in  zone  with precision  p . \n SELECT  current_timezone ( ) \n -- America/New_York \n \n SELECT  with_timezone ( TIMESTAMP   '2022-11-01 09:08:07.321' ,   'America/Los_Angeles' ) \n -- 2022-11-01 09:08:07.321 America/Los_Angeles \n \n \u200b  (#from-unixtime) from_unixtime() \n from_unixtime(unixtime)  \u2192 timestamp(3) with time zone \n Returns the UNIX timestamp  unixtime  as a timestamp with time zone.\n unixtime  is the number of seconds since  1970-01-01 00:00:00 UTC . \n \u200b  (#from-unixtime-2) from_unixtime() \n from_unixtime(unixtime, zone)  \u2192 timestamp(3) with time zone \n Returns the UNIX timestamp  unixtime  as a timestamp with time zone\nusing  zone  for the time zone.  unixtime  is the number of seconds\nsince  1970-01-01 00:00:00 UTC . \n \u200b  (#from-unixtime-3) from_unixtime() \n from_unixtime(unixtime, hours, minutes)  \u2192 timestamp(3) with time zone \n Returns the UNIX timestamp  unixtime  as a timestamp with time zone\nusing  hours  and  minutes  for the time zone offset.  unixtime  is the\nnumber of seconds since  1970-01-01 00:00:00  in  double  data type. \n \u200b  (#from-unixtime-nanos) from_unixtime_nanos() \n from_unixtime_nanos(unixtime)  \u2192 timestamp(9) with time zone \n Returns the UNIX timestamp  unixtime  as a timestamp with time zone.\n unixtime  is the number of nanoseconds since\n 1970-01-01 00:00:00.000000000 UTC : \n      SELECT  from_unixtime_nanos ( 100 ) ; \n      -- 1970-01-01 00:00:00.000000100 UTC \n \n      SELECT  from_unixtime_nanos ( DECIMAL   '1234' ) ; \n      -- 1970-01-01 00:00:00.000001234 UTC \n \n      SELECT  from_unixtime_nanos ( DECIMAL   '1234.499' ) ; \n      -- 1970-01-01 00:00:00.000001234 UTC \n \n      SELECT  from_unixtime_nanos ( DECIMAL   '-1234' ) ; \n      -- 1969-12-31 23:59:59.999998766 UTC \n \n \u200b  (#now) now() \n now()  \u2192 timestamp(3) with time zone \n This is an alias for  current_timestamp . \n \u200b  (#to-iso8601) to_iso8601() \n to_iso8601(x)  \u2192 varchar \n Formats  x  as an ISO 8601 string.  x  can be date, timestamp, or\ntimestamp with time zone. \n \u200b  (#to-milliseconds) to_milliseconds() \n to_milliseconds(interval)  \u2192 bigint \n Returns the day-to-second  interval  as milliseconds. \n \u200b  (#to-unixtime) to_unixtime() \n to_unixtime(timestamp)  \u2192 double \n Returns  timestamp  as a UNIX timestamp. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/datetime#date-and-time-functions"}
{"content": "\u200b Truncation function \n The  date_trunc  function supports the following units: \n Unit Example Truncated Value second 2001-08-22 03:04:05.000 2001-08-22 03:04:05.000 minute 2001-08-22 03:04:00.000 2001-08-22 03:04:00.000 hour 2001-08-22 03:00:00.000 2001-08-22 03:00:00.000 day 2001-08-22 00:00:00.000 2001-08-22 00:00:00.000 week 2001-08-20 00:00:00.000 2001-08-20 00:00:00.000 month 2001-08-01 00:00:00.000 2001-08-01 00:00:00.000 quarter 2001-07-01 00:00:00.000 2001-07-01 00:00:00.000 year 2001-01-01 00:00:00.000 2001-01-01 00:00:00.000 \n The above examples use the timestamp  2001-08-22 03:04:05.321  as the\ninput. \n \u200b  (#date-trunc) date_trunc() \n date_trunc(unit, x)  \u2192 [same as input] \n Returns  x  truncated to  unit : \n      SELECT  date_trunc ( 'day'   ,   TIMESTAMP   '2022-10-20 05:10:00' ) ; \n      -- 2022-10-20 00:00:00.000 \n \n      SELECT  date_trunc ( 'month'   ,   TIMESTAMP   '2022-10-20 05:10:00' ) ; \n      -- 2022-10-01 00:00:00.000 \n \n      SELECT  date_trunc ( 'year' ,   TIMESTAMP   '2022-10-20 05:10:00' ) ; \n      -- 2022-01-01 00:00:00.000 \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/datetime#truncation-function"}
{"content": "\u200b Interval functions \n The functions in this section support the following interval units: \n Unit Description millisecond Milliseconds second Seconds minute Minutes hour Hours day Days week Weeks month Months quarter Quarters of a year year Years \n \u200b  (#date-add) date_add() \n date_add(unit, value, timestamp)  \u2192 same as input \n Adds an interval  value  of type  unit  to  timestamp . Subtraction can\nbe performed by using a negative value: \n      SELECT  date_add ( 'second' ,   86 ,   TIMESTAMP   '2020-03-01 00:00:00' ) ; \n      -- 2020-03-01 00:01:26.000 \n \n      SELECT  date_add ( 'hour' ,   9 ,   TIMESTAMP   '2020-03-01 00:00:00' ) ; \n      -- 2020-03-01 09:00:00.000 \n \n      SELECT  date_add ( 'day' ,   - 1 ,   TIMESTAMP   '2020-03-01 00:00:00 UTC' ) ; \n      -- 2020-02-29 00:00:00.000 UTC \n \n \u200b  (#date-diff) date_diff() \n date_diff(unit, timestamp1, timestamp2)  \u2192 bigint \n Returns  timestamp2 - timestamp1  expressed in terms of  unit : \n      SELECT  date_diff ( 'second' ,   TIMESTAMP   '2020-03-01 00:00:00' ,   TIMESTAMP   '2020-03-02 00:00:00' ) ; \n      -- 86400 \n \n      SELECT  date_diff ( 'hour' ,   TIMESTAMP   '2020-03-01 00:00:00 UTC' ,   TIMESTAMP   '2020-03-02 00:00:00 UTC' ) ; \n      -- 24 \n \n      SELECT  date_diff ( 'day' ,   DATE   '2020-03-01' ,   DATE   '2020-03-02' ) ; \n      -- 1 \n \n      SELECT  date_diff ( 'second' ,   TIMESTAMP   '2020-06-01 12:30:45.000000000' ,   TIMESTAMP   '2020-06-02 12:30:45.123456789' ) ; \n      -- 86400 \n \n      SELECT  date_diff ( 'millisecond' ,   TIMESTAMP   '2020-06-01 12:30:45.000000000' ,   TIMESTAMP   '2020-06-02 12:30:45.123456789' ) ; \n      -- 86400123 \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/datetime#interval-functions"}
{"content": "\u200b Duration function \n The  parse_duration  function supports the following units: \n Unit Description ns Nanoseconds us Microseconds ms Milliseconds s Seconds m Minutes h Hours d Days \n \u200b  (#parse-duration) parse_duration() \n parse_duration(string)  \u2192 interval \n Parses  string  of format  value unit  into an interval, where  value \nis fractional number of  unit  values: \n      SELECT  parse_duration ( '42.8ms' ) ; \n      -- 0 00:00:00.043 \n \n      SELECT  parse_duration ( '3.81 d' ) ; \n      -- 3 19:26:24.000 \n \n      SELECT  parse_duration ( '5m' ) ; \n      -- 0 00:05:00.000 \n \n \u200b  (#human-readable-seconds) human_readable_seconds() \n human_readable_seconds(double)  \u2192 varchar \n Formats the double value of  seconds  into a human readable string\ncontaining  weeks ,  days ,  hours ,  minutes , and  seconds : \n      SELECT  human_readable_seconds ( 96 ) ; \n      -- 1 minute, 36 seconds \n \n      SELECT  human_readable_seconds ( 3762 ) ; \n      -- 1 hour, 2 minutes, 42 seconds \n \n      SELECT  human_readable_seconds ( 56363463 ) ; \n      -- 93 weeks, 1 day, 8 hours, 31 minutes, 3 seconds \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/datetime#duration-function"}
{"content": "\u200b MySQL date functions \n The functions in this section use a format string that is compatible\nwith the MySQL  date_parse  and  str_to_date  functions. The following\ntable, based on the MySQL manual, describes the format specifiers: \n Specifier Description %a Abbreviated weekday name ( Sun  ..  Sat ) %b Abbreviated month name ( Jan  ..  Dec ) %c Month, numeric ( 1  ..  12 ) 1  (/_sites/docs.dune.com/query-engine/Functions-and-operators/datetime#user-content-fn-1) %D Day of the month with English suffix ( 0th ,  1st ,  2nd ,  3rd , \u2026) %d Day of the month, numeric ( 01  ..  31 ) 2  (/_sites/docs.dune.com/query-engine/Functions-and-operators/datetime#user-content-fn-2) %e Day of the month, numeric ( 1  ..  31 ) 3  (/_sites/docs.dune.com/query-engine/Functions-and-operators/datetime#user-content-fn-3) %f Fraction of second (6 digits for printing:  000000  ..  999000 ; 1 - 9 digits for parsing:  0  ..  999999999 ) 4  (/_sites/docs.dune.com/query-engine/Functions-and-operators/datetime#user-content-fn-4) %H Hour ( 00  ..  23 ) %h Hour ( 01  ..  12 ) %I Hour ( 01  ..  12 ) %i Minutes, numeric ( 00  ..  59 ) %j Day of year ( 001  ..  366 ) %k Hour ( 0  ..  23 ) %l Hour ( 1  ..  12 ) %M Month name ( January  ..  December ) %m Month, numeric ( 01  ..  12 ) 5  (/_sites/docs.dune.com/query-engine/Functions-and-operators/datetime#user-content-fn-5) %p AM  or  PM %r Time of day, 12-hour (equivalent to  %h:%i:%s %p ) %S Seconds ( 00  ..  59 ) %s Seconds ( 00  ..  59 ) %T Time of day, 24-hour (equivalent to  %H:%i:%s ) %U Week ( 00  ..  53 ), where Sunday is the first day of the week %u Week ( 00  ..  53 ), where Monday is the first day of the week %V Week ( 01  ..  53 ), where Sunday is the first day of the week; used with  %X %v Week ( 01  ..  53 ), where Monday is the first day of the week; used with  %x %W Weekday name ( Sunday  ..  Saturday ) %w Day of the week ( 0  ..  6 ), where Sunday is the first day of the week 6  (/_sites/docs.dune.com/query-engine/Functions-and-operators/datetime#user-content-fn-6) %X Year for the week where Sunday is the first day of the week, numeric, four digits; used with  %V %x Year for the week, where Monday is the first day of the week, numeric, four digits; used with  %v %Y Year, numeric, four digits %y Year, numeric (two digits) 7  (/_sites/docs.dune.com/query-engine/Functions-and-operators/datetime#user-content-fn-7) %% A literal  %  character %x x , for any  x  not \n The following specifiers are not currently supported:\n %D %U %u %V %w %X \n date_format(timestamp, format)  \u2192 varchar \n Formats  timestamp  as a string using  format : \n      SELECT  date_format ( TIMESTAMP   '2022-10-20 05:10:00' ,   '%m-%d-%Y %H' ) ; \n      -- 10-20-2022 05 \n \n date_parse(string, format)  \u2192 timestamp \n Parses  string  into a timestamp using  format : \n      SELECT  date_parse ( '2022/10/20/05' ,   '%Y/%m/%d/%H' ) ; \n      -- 2022-10-20 05:00:00.000 \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/datetime#mysql-date-functions"}
{"content": "\u200b Java date functions \n The functions in this section use a format string that is compatible\nwith JodaTime\u2019s\n DateTimeFormat  (http://joda-time.sourceforge.net/apidocs/org/joda/time/format/DateTimeFormat.html) \npattern format. \n \u200b  (#format-datetime) format_datetime() \n format_datetime(timestamp, format)  \u2192 varchar \n Formats  timestamp  as a string using  format . \n \u200b  (#parse-datetime) parse_datetime() \n parse_datetime(string, format)  \u2192 timestamp \n Parses  string  into a timestamp with time zone using  format . \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/datetime#java-date-functions"}
{"content": "\u200b Extraction function \n The  extract  function supports the following fields: \n Field Description YEAR year QUARTER quarter MONTH month WEEK week DAY day DAY_OF_MONTH day DAY_OF_WEEK day_of_week DOW day_of_week DAY_OF_YEAR day_of_year DOY day_of_year YEAR_OF_WEEK year_of_week YOW year_of_week HOUR hour MINUTE minute SECOND second TIMEZONE_HOUR timezone_hour TIMEZONE_MINUTE timezone_minute \n The types supported by the  extract  function vary depending on the\nfield to be extracted. Most fields support all date and time types. \n extract(field FROM x)  \u2192 bigint \n Returns  field  from  x : \n      SELECT  extract ( YEAR   FROM   TIMESTAMP   '2022-10-20 05:10:00' ) ; \n      -- 2022 \n \n \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/datetime#extraction-function"}
{"content": "\u200b Convenience extraction functions \n \u200b  (#day) day() \n day(x)  \u2192 bigint \n Returns the day of the month from  x . \n \u200b  (#day-of-month) day_of_month() \n day_of_month(x)  \u2192 bigint \n This is an alias for  day . \n \u200b  (#day-of-week) day_of_week() \n day_of_week(x)  \u2192 bigint \n Returns the ISO day of the week from  x . The value ranges from  1  (Monday) to  7  (Sunday). \n \u200b  (#day-of-year) day_of_year() \n day_of_year(x)  \u2192 bigint \n Returns the day of the year from  x . The value ranges from  1  to  366 . \n \u200b  (#dow) dow() \n dow(x)  \u2192 bigint \n This is an alias for  day_of_week . \n \u200b  (#doy) doy() \n doy(x)  \u2192 bigint \n This is an alias for  day_of_year . \n \u200b  (#hour) hour() \n hour(x)  \u2192 bigint \n Returns the hour of the day from  x . The value ranges from  0  to  23 . \n \u200b  (#millisecond) millisecond() \n millisecond(x)  \u2192 bigint \n Returns the millisecond of the second from  x . \n \u200b  (#minute) minute() \n minute(x)  \u2192 bigint \n Returns the minute of the hour from  x . \n \u200b  (#month) month() \n month(x)  \u2192 bigint \n Returns the month of the year from  x . \n \u200b  (#quarter) quarter() \n quarter(x)  \u2192 bigint \n Returns the quarter of the year from  x . The value ranges from  1  to  4 . \n \u200b  (#second) second() \n second(x)  \u2192 bigint \n Returns the second of the minute from  x . \n \u200b  (#timezone-hour) timezone_hour() \n timezone_hour(timestamp)  \u2192 bigint \n Returns the hour of the time zone offset from  timestamp . \n \u200b  (#timezone-minute) timezone_minute() \n timezone_minute(timestamp)  \u2192 bigint \n Returns the minute of the time zone offset from  timestamp . \n \u200b  (#week) week() \n week(x)  \u2192 bigint \n Returns the  ISO week  ()  of the year from  x . The value ranges from  1  to  53 . \n \u200b  (#week-of-year) week_of_year() \n week_of_year(x)  \u2192 bigint \n This is an alias for  week . \n \u200b  (#year) year() \n year(x)  \u2192 bigint \n Returns the year from  x . \n \u200b  (#year-of-week) year_of_week() \n year_of_week(x)  \u2192 bigint \n Returns the year of the  ISO week  ()  from  x . \n \u200b  (#yow) yow() \n yow(x)  \u2192 bigint \n This is an alias for  year_of_week . \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/datetime#convenience-extraction-functions"}
{"content": "Footnotes \n \n \n This specifier does not support  0  as a month or day.  \u21a9  (/_sites/docs.dune.com/query-engine/Functions-and-operators/datetime#user-content-fnref-1) \n \n \n This specifier does not support  0  as a month or day.  \u21a9  (/_sites/docs.dune.com/query-engine/Functions-and-operators/datetime#user-content-fnref-2) \n \n \n This specifier does not support  0  as a month or day.  \u21a9  (/_sites/docs.dune.com/query-engine/Functions-and-operators/datetime#user-content-fnref-3) \n \n \n Timestamp is truncated to milliseconds.  \u21a9  (/_sites/docs.dune.com/query-engine/Functions-and-operators/datetime#user-content-fnref-4) \n \n \n This specifier does not support  0  as a month or day.  \u21a9  (/_sites/docs.dune.com/query-engine/Functions-and-operators/datetime#user-content-fnref-5) \n \n \n This specifier is not supported yet. Consider using  day_of_week  (it uses  1-7  instead of  0-6 ).  \u21a9  (/_sites/docs.dune.com/query-engine/Functions-and-operators/datetime#user-content-fnref-6) \n \n \n When parsing, two-digit year format assumes range  1970  ..  2069 , so \u201c70\u201d will result in year  1970  but \u201c69\u201d will produce  2069 .  \u21a9  (/_sites/docs.dune.com/query-engine/Functions-and-operators/datetime#user-content-fnref-7) \n \n \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/datetime) Conversions  (/query-engine/Functions-and-operators/conversion) Decimal functions and operators  (/query-engine/Functions-and-operators/decimal) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Date and time operators  (#date-and-time-operators) Time zone conversion  (#time-zone-conversion) Date and time functions  (#date-and-time-functions) current_date  (#current-date) current_time  (#current-time) current_timestamp  (#current-timestamp) current_timestamp()  (#current-timestamp-2) current_timezone()  (#current-timezone) date()  (#date) last_day_of_month()  (#last-day-of-month) from_iso8601_timestamp()  (#from-iso8601-timestamp) from_iso8601_timestamp_nanos()  (#from-iso8601-timestamp-nanos) from_iso8601_date()  (#from-iso8601-date) at_timezone()  (#at-timezone) with_timezone()  (#with-timezone) from_unixtime()  (#from-unixtime) from_unixtime()  (#from-unixtime-2) from_unixtime()  (#from-unixtime-3) from_unixtime_nanos()  (#from-unixtime-nanos) now()  (#now) to_iso8601()  (#to-iso8601) to_milliseconds()  (#to-milliseconds) to_unixtime()  (#to-unixtime) Truncation function  (#truncation-function) date_trunc()  (#date-trunc) Interval functions  (#interval-functions) date_add()  (#date-add) date_diff()  (#date-diff) Duration function  (#duration-function) parse_duration()  (#parse-duration) human_readable_seconds()  (#human-readable-seconds) MySQL date functions  (#mysql-date-functions) Java date functions  (#java-date-functions) format_datetime()  (#format-datetime) parse_datetime()  (#parse-datetime) Extraction function  (#extraction-function) Convenience extraction functions  (#convenience-extraction-functions) day()  (#day) day_of_month()  (#day-of-month) day_of_week()  (#day-of-week) day_of_year()  (#day-of-year) dow()  (#dow) doy()  (#doy) hour()  (#hour) millisecond()  (#millisecond) minute()  (#minute) month()  (#month) quarter()  (#quarter) second()  (#second) timezone_hour()  (#timezone-hour) timezone_minute()  (#timezone-minute) week()  (#week) week_of_year()  (#week-of-year) year()  (#year) year_of_week()  (#year-of-week) yow()  (#yow)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/datetime#footnote-label"}
{"content": "\u200b Data structures \n A T-digest is a data sketch which stores approximate percentile\ninformation. The Trino type for this data structure is called  tdigest .\nT-digests can be merged, and for storage and retrieval they can be cast\nto and from  VARBINARY . \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/tdigest#data-structures"}
{"content": "\u200b Functions \n \u200b  (#merge) merge() \n merge(tdigest)  \u2192 tdigest \n Aggregates all inputs into a single  tdigest . \n \u200b  (#values-at-quantile) values_at_quantile() \n value_at_quantile(tdigest, quantile)  \u2192 double \n Returns the approximate percentile value from the T-digest, given the number  quantile  between 0 and 1. \n \u200b  (#values-at-quantiles) values_at_quantiles() \n values_at_quantiles(tdigest, quantiles)  \u2192 array(double) \n Returns the approximate percentile values as an array, given the input T-digest and an array of values between 0 and 1, which represent the quantiles to return. \n \u200b  (#tdigest-agg) tdigest_agg() \n tdigest_agg(x)  \u2192 tdigest \n Composes all input values of  x  into a  tdigest .  x  can be of any numeric type. \n tdigest_agg(x, w)  \u2192 tdigest \n Composes all input values of  x  into a  tdigest  using the per-item weight  w .  w  must be greater or equal than 1.  x  and  w  can be of any numeric type. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/tdigest) System information  (/query-engine/Functions-and-operators/system) Teradata functions  (/query-engine/Functions-and-operators/teradata) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Data structures  (#data-structures) Functions  (#functions) merge()  (#merge) values_at_quantile()  (#values-at-quantile) values_at_quantiles()  (#values-at-quantiles) tdigest_agg()  (#tdigest-agg)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/tdigest#functions"}
{"content": "\u200b Array functions \n \u200b  (#allmatch) allmatch() \n allmatch(array(T), function(T,boolean))  \u2192 boolean \n Returns whether all elements of an array match the given predicate.\nReturns  true  if all the elements match the predicate (a special case\nis when the array is empty);  false  if one or more elements don\u2019t\nmatch;  NULL  if the predicate function returns  NULL  for one or more\nelements and  true  for all other elements. \n \u200b  (#anymatch) anymatch() \n any_match(array(T), function(T,boolean))  \u2192 boolean \n Returns whether any elements of an array match the given predicate.\nReturns  true  if one or more elements match the predicate;  false  if\nnone of the elements matches (a special case is when the array is\nempty);  NULL  if the predicate function returns  NULL  for one or more\nelements and  false  for all other elements. \n \u200b  (#array-distinct) array_distinct() \n array_distinct(x)  \u2192 array \n Remove duplicate values from the array  x . \n \u200b  (#array-except) array_except() \n array_except(x, y)  \u2192 array \n Returns an array of elements in  x  but not in  y , without duplicates. \n \u200b  (#array-histogram) array_histogram() \n array_histogram(x)  \u2192 map<K, bigint> \n Returns a map where the keys are the unique elements in the input array  x  and the values are the number of times that each element appears in  x . Null values are ignored. \n      SELECT  array_histogram ( ARRAY [ 42 ,   7 ,   42 ,   NULL ] ) ; \n      -- {42=2, 7=1} \n \n Returns an empty map if the input array has no non-null elements. \n      SELECT  array_histogram ( ARRAY [ NULL ,   NULL ] ) ; \n      -- {} \n \n \u200b  (#array-intersect) array_intersect() \n array_intersect(x, y)  \u2192 array \n Returns an array of the elements in the intersection of  x  and  y , without duplicates. \n \u200b  (#array-join) array_join() \n array_join(x, delimiter, null_replacement)  \u2192 varchar \n Concatenates the elements of the given array using the delimiter and an optional string to replace nulls. \n \u200b  (#array-max) array_max() \n array_max(x)  \u2192 x \n Returns the maximum value of input array. \n \u200b  (#array-min) array_min() \n array_min(x)  \u2192 x \n Returns the minimum value of input array. \n \u200b  (#array-position) array_position() \n array_position(x, element)  \u2192 bigint \n Returns the position of the f occurrence of the element in the array. Returns  NULL  if the element is not found. The position is counted from 1. \n \u200b  (#array-remove) array_remove() \n array_remove(x, element)  \u2192 array \n Returns an array of elements in  x  without the element  element . \n \u200b  (#array-sort) array_sort() \n array_sort(x)  \u2192 array \n Sorts and returns the array  x . The elements of  x  must be orderable. Null elements will be placed at the end of the returned array. The sort is stable, meaning that the relative order of elements that are equal is preserved. \n array_sort(array(T), function(T,T,int))  \u2192 array(T) \n Sorts and returns the  array  based on the given comparator  function . The comparator will take two nullable arguments representing two nullable elements of the  array . It returns -1, 0, or 1 as the f nullable element is less than, equal to, or greater than the second nullable element. If the comparator function returns other values (including  NULL ), the query will fail and raise an error. \n      SELECT  array_sort ( ARRAY [ 3 ,   2 ,   5 ,   1 ,   2 ] , \n                    ( x ,  y )   - >   IF ( x  <  y ,   1 ,   IF ( x  =  y ,   0 ,   - 1 ) ) ) ; \n -- [5, 3, 2, 2, 1] \n \n SELECT  array_sort ( ARRAY [ 'bc' ,   'ab' ,   'dc' ] , \n                    ( x ,  y )   - >   IF ( x  <  y ,   1 ,   IF ( x  =  y ,   0 ,   - 1 ) ) ) ; \n -- ['dc', 'bc', 'ab'] \n \n \n SELECT  array_sort ( ARRAY [ 3 ,   2 ,   null ,   5 ,   null ,   1 ,   2 ] , \n                    -- sort null first with descending order \n                    ( x ,  y )   - >   CASE   WHEN  x  IS   NULL   THEN   - 1 \n                                   WHEN  y  IS   NULL   THEN   1 \n                                   WHEN  x  <  y  THEN   1 \n                                   WHEN  x  =  y  THEN   0 \n                                   ELSE   - 1   END ) ; \n -- [null, null, 5, 3, 2, 2, 1] \n \n SELECT  array_sort ( ARRAY [ 3 ,   2 ,   null ,   5 ,   null ,   1 ,   2 ] , \n                    -- sort null last with descending order \n                    ( x ,  y )   - >   CASE   WHEN  x  IS   NULL   THEN   1 \n                                   WHEN  y  IS   NULL   THEN   - 1 \n                                   WHEN  x  <  y  THEN   1 \n                                   WHEN  x  =  y  THEN   0 \n                                   ELSE   - 1   END ) ; \n -- [5, 3, 2, 2, 1, null, null] \n \n SELECT  array_sort ( ARRAY [ 'a' ,   'abcd' ,   'abc' ] , \n                    -- sort by string length \n                    ( x ,  y )   - >   IF ( length ( x )   <  length ( y ) ,   - 1 , \n                                 IF ( length ( x )   =  length ( y ) ,   0 ,   1 ) ) ) ; \n -- ['a', 'abc', 'abcd'] \n \n SELECT  array_sort ( ARRAY [ ARRAY [ 2 ,   3 ,   1 ] ,  ARRAY [ 4 ,   2 ,   1 ,   4 ] ,  ARRAY [ 1 ,   2 ] ] , \n                    -- sort by array length \n                    ( x ,  y )   - >   IF ( cardinality ( x )   <  cardinality ( y ) ,   - 1 , \n                                 IF ( cardinality ( x )   =  cardinality ( y ) ,   0 ,   1 ) ) ) ; \n -- [[1, 2], [2, 3, 1], [4, 2, 1, 4]] \n \n \u200b  (#array-union) array_union() \n array_union(x, y)  \u2192 array \n Returns an array of the elements in the union of  x  and  y , without duplicates. \n \u200b  (#array-overlap) array_overlap() \n array_overlap(x, y)  \u2192 boolean \n Tests if arrays x and y have any non-null elements in common. Returns null if there are no non-null elements in common but either array contains null. \n \u200b  (#cardinality) cardinality() \n cardinality(x)  \u2192 bigint \n Returns the cardinality (size) of the array x. \n \u200b  (#concat) concat() \n concat(array1, array2, ..., arrayN)  \u2192 array \n Concatenates the arrays array1, array2, \u2026, arrayN. This function provides the same functionality as the SQL-standard concatenation operator (||). \n \u200b  (#combinations) combinations() \n combinations(array(T), n)  -> array(array(T)) \n Returns n-element sub-groups of input array. If the input array has no duplicates, combinations returns n-element subsets. \n SELECT  combinations ( ARRAY [ 'foo' ,   'bar' ,   'baz' ] ,   2 ) ; \n -- [['foo', 'bar'], ['foo', 'baz'], ['bar', 'baz']] \n \n SELECT  combinations ( ARRAY [ 1 ,   2 ,   3 ] ,   2 ) ; \n -- [[1, 2], [1, 3], [2, 3]] \n \n SELECT  combinations ( ARRAY [ 1 ,   2 ,   2 ] ,   2 ) ; \n -- [[1, 2], [1, 2], [2, 2]] \n \n Order of sub-groups is deterministic but unspecified. Order of elements within a sub-group deterministic but unspecified. n must be not be greater than 5, and the total size of sub-groups generated must be smaller than 100,000. \n \u200b  (#contains) contains() \n contains(x, element)  \u2192 boolean \n Returns true if the array x contains the element. \n \u200b  (#contains-sequence) contains_sequence() \n contains_sequence(x, seq)  \u2192 boolean \n Return true if array x contains all of array seq as a subsequence (all values in the same consecutive order). \n \u200b  (#element-at) element_at() \n element_at(array(E), index)  \u2192 E \n Returns element of array at given index. If index > 0, this function provides the same functionality as the SQL-standard subscript operator ([]), except that the function returns NULL when accessing an index larger than array length, whereas the subscript operator would fail in such a case. If index < 0, element_at accesses elements from the last to the first. \n \u200b  (#filter) filter() \n filter(array(T), function(T, boolean))  -> array(T) \n Constructs an array from those elements of array for which function returns true: \n SELECT  filter ( ARRAY [ ] ,  x  - >   true ) ; \n -- [] \n \n SELECT  filter ( ARRAY [ 5 ,   - 6 ,   NULL ,   7 ] ,  x  - >  x  >   0 ) ; \n -- [5, 7] \n \n SELECT  filter ( ARRAY [ 5 ,   NULL ,   7 ,   NULL ] ,  x  - >  x  IS   NOT   NULL ) ; \n -- [5, 7] \n \n \u200b  (#flatten) flatten() \n flatten(x)  \u2192 array \n Flattens an array(array(T)) to an array(T) by concatenating the contained arrays. \n \u200b  (#ngrams) ngrams() \n ngrams(array(T), n)  -> array(array(T)) \n Returns n-grams (sub-sequences of adjacent n elements) for the array. The order of the n-grams in the result is unspecified. \n SELECT  ngrams ( ARRAY [ 'foo' ,   'bar' ,   'baz' ,   'foo' ] ,   2 ) ; \n -- [['foo', 'bar'], ['bar', 'baz'], ['baz', 'foo']] \n \n SELECT  ngrams ( ARRAY [ 'foo' ,   'bar' ,   'baz' ,   'foo' ] ,   3 ) ; \n -- [['foo', 'bar', 'baz'], ['bar', 'baz', 'foo']] \n \n SELECT  ngrams ( ARRAY [ 'foo' ,   'bar' ,   'baz' ,   'foo' ] ,   4 ) ; \n -- [['foo', 'bar', 'baz', 'foo']] \n \n SELECT  ngrams ( ARRAY [ 'foo' ,   'bar' ,   'baz' ,   'foo' ] ,   5 ) ; \n -- [['foo', 'bar', 'baz', 'foo']] \n \n SELECT  ngrams ( ARRAY [ 1 ,   2 ,   3 ,   4 ] ,   2 ) ; \n -- [[1, 2], [2, 3], [3, 4]] \n \n \u200b  (#none-match) none_match() \n none_match(array(T), function(T, boolean))  \u2192 boolean \n Returns whether no elements of an array match the given predicate. Returns true if none of the elements matches the predicate (a special case is when the array is empty); false if one or more elements match; NULL if the predicate function returns NULL for one or more elements and false for all other elements. \n \u200b  (#reduce) reduce() \n reduce(array(T), initialState S, inputFunction(S, T, S), outputFunction(S, R))  \u2192 R \n Returns a single value reduced from array. inputFunction will be invoked for each element in array in order. In addition to taking the element, inputFunction takes the current state, initially initialState, and returns the new state. outputFunction will be invoked to turn the final state into the result value. It may be the identity function (i -> i). \n SELECT  reduce ( ARRAY [ ] ,   0 , \n                ( s ,  x )   - >  s  +  x , \n               s  - >  s ) ; \n -- 0 \n \n SELECT  reduce ( ARRAY [ 5 ,   20 ,   50 ] ,   0 , \n                ( s ,  x )   - >  s  +  x , \n               s  - >  s ) ; \n -- 75 \n \n SELECT  reduce ( ARRAY [ 5 ,   20 ,   NULL ,   50 ] ,   0 , \n                ( s ,  x )   - >  s  +  x , \n               s  - >  s ) ; \n -- NULL \n \n SELECT  reduce ( ARRAY [ 5 ,   20 ,   NULL ,   50 ] ,   0 , \n                ( s ,  x )   - >  s  +   coalesce ( x ,   0 ) , \n               s  - >  s ) ; \n -- 75 \n \n SELECT  reduce ( ARRAY [ 5 ,   20 ,   NULL ,   50 ] ,   0 , \n                ( s ,  x )   - >   IF ( x  IS   NULL ,  s ,  s  +  x ) , \n               s  - >  s ) ; \n -- 75 \n \n SELECT  reduce ( ARRAY [ 2147483647 ,   1 ] ,   BIGINT   '0' , \n                ( s ,  x )   - >  s  +  x , \n               s  - >  s ) ; \n -- 2147483648 \n \n -- calculates arithmetic average \n SELECT  reduce ( ARRAY [ 5 ,   6 ,   10 ,   20 ] , \n               CAST ( ROW ( 0.0 ,   0 )   AS   ROW ( sum  DOUBLE ,  count  INTEGER ) ) , \n                ( s ,  x )   - >  CAST ( ROW ( x  +  s . sum ,  s . count  +   1 )   AS \n                               ROW ( sum  DOUBLE ,  count  INTEGER ) ) , \n               s  - >   IF ( s . count  =   0 ,   NULL ,  s . sum  /  s . count ) ) ; \n -- 10.25 \n \n \u200b  (#repeat) repeat() \n repeat(element, count)  \u2192 array \n Repeat element for count times. \n \u200b  (#reverse) reverse() \n reverse(x)  \u2192 array \n Returns an array which has the reversed order of array x. \n \u200b  (#sequence) sequence() \n sequence(start, stop) \n Generate a sequence of integers from start to stop, incrementing by 1 if start is less than or equal to stop, otherwise -1. \n sequence(start, stop, step) \n Generate a sequence of integers from start to stop, incrementing by step. \n sequence(start, stop) \n Generate a sequence of dates from start date to stop date, incrementing by 1 day if start date is less than or equal to stop date, otherwise -1 day. \n sequence(start, stop, step) \n Generate a sequence of dates from start to stop, incrementing by step. The type of step can be either INTERVAL DAY TO SECOND or INTERVAL YEAR TO MONTH. \n sequence(start, stop, step) \n Generate a sequence of timestamps from start to stop, incrementing by step. The type of step can be either INTERVAL DAY TO SECOND or INTERVAL YEAR TO MONTH. \n \u200b  (#shuffle) shuffle() \n shuffle(x)  \u2192 array \n Generate a random permutation of the given array x. \n \u200b  (#slice) slice() \n slice(x, start, length)  \u2192 array \n Subsets array x starting from index start (or starting from the end if start is negative) with a length of length. \n \u200b  (#trim-array) trim_array() \n trim_array(x, n)  \u2192 array \n Remove n elements from the end of array: \n SELECT  trim_array ( ARRAY [ 1 ,   2 ,   3 ,   4 ] ,   1 ) ; \n -- [1, 2, 3] \n \n SELECT  trim_array ( ARRAY [ 1 ,   2 ,   3 ,   4 ] ,   2 ) ; \n -- [1, 2] \n \n \u200b  (#transform) transform() \n transform(array(T), function(T, R))  \u2192 array(R) \n Returns an array of the results of applying the given function to each element of the given array. The function must be deterministic and must return the same type for each invocation with the same argument. If the function returns NULL, the result of the transform is NULL. \n \n SELECT  transform ( ARRAY [ ] ,  x  - >  x  +   1 ) ; \n -- [] \n \n SELECT  transform ( ARRAY [ 5 ,   6 ] ,  x  - >  x  +   1 ) ; \n -- [6, 7] \n \n SELECT  transform ( ARRAY [ 5 ,   NULL ,   6 ] ,  x  - >   coalesce ( x ,   0 )   +   1 ) ; \n -- [6, 1, 7] \n \n SELECT  transform ( ARRAY [ 'x' ,   'abc' ,   'z' ] ,  x  - >  x  ||   '0' ) ; \n -- ['x0', 'abc0', 'z0'] \n \n SELECT  transform ( ARRAY [ ARRAY [ 1 ,   NULL ,   2 ] ,  ARRAY [ 3 ,   NULL ] ] , \n                  a  - >  filter ( a ,  x  - >  x  IS   NOT   NULL ) ) ; \n -- [[1, 2], [3]] \n \n \u200b  (#zip) zip() \n zip(array1, array2[, ...])  \u2192 array(row) \n Merges the given arrays, element-wise, into a single array of rows. The M-th element of the N-th argument will be the N-th field of the M-th output element. If the arguments have an uneven length, missing values are filled with NULL. \n SELECT  zip ( ARRAY [ 1 ,   2 ] ,  ARRAY [ '1b' ,   null ,   '3b' ] ) ; \n -- [ROW(1, '1b'), ROW(2, null), ROW(null, '3b')] \n \n \u200b  (#zip-with) zip_with() \n zip_with(array1, array2, function)  \u2192 array(R) \n Merges the given arrays, element-wise, into a single array using function. The M-th element of the N-th argument will be the N-th argument of the M-th invocation of function. If the arguments have an uneven length, missing values are filled with NULL. \n SELECT  zip_with ( ARRAY [ 1 ,   3 ,   5 ] ,  ARRAY [ 'a' ,   'b' ,   'c' ] , \n                  ( x ,  y )   - >   ( y ,  x ) ) ; \n -- [ROW('a', 1), ROW('b', 3), ROW('c', 5)] \n \n SELECT  zip_with ( ARRAY [ 1 ,   2 ] ,  ARRAY [ 3 ,   4 ] , \n                  ( x ,  y )   - >  x  +  y ) ; \n -- [4, 6] \n \n SELECT  zip_with ( ARRAY [ 'a' ,   'b' ,   'c' ] ,  ARRAY [ 'd' ,   'e' ,   'f' ] , \n                  ( x ,  y )   - >  concat ( x ,  y ) ) ; \n -- ['ad', 'be', 'cf'] \n \n SELECT  zip_with ( ARRAY [ 'a' ] ,  ARRAY [ 'd' ,   null ,   'f' ] , \n                  ( x ,  y )   - >   coalesce ( x ,  y ) ) ; \n -- ['a', null, 'f'] \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/array) Aggregate functions  (/query-engine/Functions-and-operators/aggregate) Base58 functions  (/query-engine/Functions-and-operators/base58) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Array functions  (#array-functions) allmatch()  (#allmatch) anymatch()  (#anymatch) array_distinct()  (#array-distinct) array_except()  (#array-except) array_histogram()  (#array-histogram) array_intersect()  (#array-intersect) array_join()  (#array-join) array_max()  (#array-max) array_min()  (#array-min) array_position()  (#array-position) array_remove()  (#array-remove) array_sort()  (#array-sort) array_union()  (#array-union) array_overlap()  (#array-overlap) cardinality()  (#cardinality) concat()  (#concat) combinations()  (#combinations) contains()  (#contains) contains_sequence()  (#contains-sequence) element_at()  (#element-at) filter()  (#filter) flatten()  (#flatten) ngrams()  (#ngrams) none_match()  (#none-match) reduce()  (#reduce) repeat()  (#repeat) reverse()  (#reverse) sequence()  (#sequence) shuffle()  (#shuffle) slice()  (#slice) trim_array()  (#trim-array) transform()  (#transform) zip()  (#zip) zip_with()  (#zip-with)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/array#array-functions"}
{"content": "\u200b Using Embeds on different platforms \n Here are a few examples of how you can use Dune embeds on different platforms. \n ", "url": "https://docs.dune.com/web-app/embeds#using-embeds-on-different-platforms"}
{"content": "\u200b Twitter \n Twitter renders and updates Dune Visualizations automatically! \n Simply paste your embed link and let the magic happen. \n \n ", "url": "https://docs.dune.com/web-app/embeds#twitter"}
{"content": "\u200b Discord \n Dune embeds work very well in Discord, simply drop the embed link in the chat and the corresponding Visualization will be displayed. \n This also lends itself very well to programming a bot to return the corresponding charts on command. \n \n ", "url": "https://docs.dune.com/web-app/embeds#discord"}
{"content": "\u200b Web Pages \n You can use Dune\u2019s embed links to add live Visualizations to any web page using an  iframe \n Here is a code snippet example: \n < iframe   src = \" [your-query's-embed-link] \"   height = \" 500 \"   width = \" 500 \"   title = \" [name-of-your-query] \" > </ iframe > ` \n \n A great showcase for this is the  cryptoart.io  (https://cryptoart.io/data)  website. \n ", "url": "https://docs.dune.com/web-app/embeds#web-pages"}
{"content": "\u200b Mirror.xyz \n Dune Visualizations can easily be embedded into articles on mirror.xyz. Simply generate an embed link and postfix it with  ?display=iframe \n \n https://dune.com/embeds/208941/391702/34ee3319-1cac-40e1-a08d-160bd93693cc?display=iframe` \n \n ", "url": "https://docs.dune.com/web-app/embeds#mirror-xyz"}
{"content": "\u200b Known Issues \n Unfortunately, embeds do not work in a couple of fairly popular web platforms, including: \n \n Substack \n Medium \n GitBook \n \n ", "url": "https://docs.dune.com/web-app/embeds#known-issues"}
{"content": "\u200b Creating Embeds with Parameters \n Embed links also work with parameterized Queries, but it is a bit tricky to get them to work: \n The embed link you generate won\u2019t include the necessary parameters yet, even if you ran the query with them. \n We are working on automating this, but for now you\u2019ll need to manually prefix the parameter link with the parameters: \n link?[name_of_parameter_1]=[xxxx]&?[name_of_parameter_2]=[yyyy]&[...] \n Here is a working example: \n https://dune.com/embeds/118220/238460/aa002dd3-f9e2-4d63-86c8-b765569306c6NFT?address=0xff9c1b15b16263c61d017ee9f65c50e4ae0113d7&rolling_n_trades=500 \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /web-app/embeds) Upload Data  (/web-app/upload-data) Search content  (/web-app/search) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Using Embeds on different platforms  (#using-embeds-on-different-platforms) Twitter  (#twitter) Discord  (#discord) Web Pages  (#web-pages) Mirror.xyz  (#mirror-xyz) Known Issues  (#known-issues) Creating Embeds with Parameters  (#creating-embeds-with-parameters)", "url": "https://docs.dune.com/web-app/embeds#creating-embeds-with-parameters"}
{"content": "\u200b Binary operators \n The  ||  operator performs concatenation. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/binary#binary-operators"}
{"content": "\u200b Binary functions \n \u200b  (#concat) concat() \n concat(binary1, ..., binaryN)  \u2192 varbinary \n Returns the concatenation of binary1, binary2, \u2026, binaryN. This function provides the same functionality as the SQL-standard concatenation operator (||). \n \u200b  (#length) length() \n length(binary)  \u2192 bigint \n Returns the length of binary in bytes. \n \u200b  (#lpad) lpad() \n lpad(binary, size, padbinary)  \u2192 varbinary \n Left pads binary to size bytes with padbinary. If size is less than the length of binary, the result is truncated to size characters. size must not be negative and padbinary must be non-empty. \n \u200b  (#rpad) rpad() \n rpad(binary, size, padbinary)  \u2192 varbinary \n Right pads binary to size bytes with padbinary. If size is less than the length of binary, the result is truncated to size characters. size must not be negative and padbinary must be non-empty. \n \u200b  (#substr) substr() \n substr(binary, start)  \u2192 varbinary \n Returns the rest of binary from the starting position start, measured in bytes. Positions start with 1. A negative starting position is interpreted as being relative to the end of the string. \n substr(binary, start, length)  \u2192 varbinary \n Returns a substring from binary of length length from the starting position start, measured in bytes. Positions start with 1. A negative starting position is interpreted as being relative to the end of the string. \n \u200b  (#reverse) reverse() \n reverse(binary)  \u2192 varbinary \n Returns binary with the bytes in reverse order. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/binary#binary-functions"}
{"content": "\u200b Base64 encoding functions \n \u200b  (#from-base64) from_base64() \n from_base64(string)  \u2192 varbinary \n Decodes binary data from the base64 encoded string. \n \u200b  (#to-base64) to_base64() \n to_base64(binary)  \u2192 varchar \n Encodes binary into a base64 string representation. \n \u200b  (#from-base64url) from_base64url() \n from_base64url(string)  \u2192 varbinary \n Decodes binary data from the base64 encoded string using the URL safe alphabet. \n \u200b  (#to-base64url) to_base64url() \n to_base64url(binary)  \u2192 varchar \n Encodes binary into a base64 string representation using the URL safe alphabet. \n \u200b  (#from-base32) from_base32() \n from_base32(string)  \u2192 varbinary \n Decodes binary data from the base32 encoded string. \n \u200b  (#to-base32) to_base32() \n to_base32(binary)  \u2192 varchar \n Encodes binary into a base32 string representation. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/binary#base64-encoding-functions"}
{"content": "\u200b Hex encoding functions \n \u200b  (#from-hex) from_hex() \n from_hex(string)  \u2192 varbinary \n Decodes binary data from the hex encoded string. \n \u200b  (#to-hex) to_hex() \n to_hex(binary)  \u2192 varchar \n Encodes binary into a hex string representation. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/binary#hex-encoding-functions"}
{"content": "\u200b Integer encoding functions \n \u200b  (#from-big-endian-32) from_big_endian_32() \n from_big_endian_32(binary)  \u2192 integer \n Decodes the 32-bit two\u2019s complement big-endian binary. The input must be exactly 4 bytes. \n \u200b  (#to-big-endian-32) to_big_endian_32() \n to_big_endian_32(integer)  \u2192 varbinary \n Encodes integer into a 32-bit two\u2019s complement big-endian format. \n \u200b  (#from-big-endian-64) from_big_endian_64() \n from_big_endian_64(binary)  \u2192 bigint \n Decodes the 64-bit two\u2019s complement big-endian binary. The input must be exactly 8 bytes. \n \u200b  (#to-big-endian-64) to_big_endian_64() \n to_big_endian_64(bigint)  \u2192 varbinary \n Encodes bigint into a 64-bit two\u2019s complement big-endian format. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/binary#integer-encoding-functions"}
{"content": "\u200b Floating-point encoding functions \n \u200b  (#from-ieee754-32) from_ieee754_32() \n from_ieee754_32(binary)  \u2192 real \n Decodes the 32-bit big-endian binary in IEEE 754 single-precision floating-point format. The input must be exactly 4 bytes. \n \u200b  (#to-ieee754-32) to_ieee754_32() \n to_ieee754_32(real)  \u2192 varbinary \n Encodes real into a 32-bit big-endian binary according to IEEE 754 single-precision floating-point format. \n \u200b  (#from-ieee754-64) from_ieee754_64() \n from_ieee754_64(binary)  \u2192 double \n Decodes the 64-bit big-endian binary in IEEE 754 double-precision floating-point format. The input must be exactly 8 bytes. \n \u200b  (#to-ieee754-64) to_ieee754_64() \n to_ieee754_64(double)  \u2192 varbinary \n Encodes double into a 64-bit big-endian binary according to IEEE 754 double-precision floating-point format. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/binary#floating-point-encoding-functions"}
{"content": "\u200b Hashing functions \n \u200b  (#crc32) crc32() \n crc32(binary)  \u2192 bigint \n Computes the CRC-32 of binary. For general purpose hashing, use xxhash64(), as it is much faster and produces a better quality hash. \n \u200b  (#md5) md5() \n md5(binary)  \u2192 varbinary \n Computes the MD5 hash of binary. \n \u200b  (#sha1) sha1() \n sha1(binary)  \u2192 varbinary \n Computes the SHA1 hash of binary. \n \u200b  (#sha256) sha256() \n sha256(binary)  \u2192 varbinary \n Computes the SHA256 hash of binary. \n \u200b  (#sha512) sha512() \n sha512(binary)  \u2192 varbinary \n Computes the SHA512 hash of binary. \n \u200b  (#spooky-hash-v2-32) spooky_hash_v2_32() \n spooky_hash_v2_32(binary)  \u2192 varbinary \n Computes the 32-bit SpookyHashV2 hash of binary. \n \u200b  (#spooky-hash-v2-64) spooky_hash_v2_64() \n spooky_hash_v2_64(binary)  \u2192 varbinary \n Computes the 64-bit SpookyHashV2 hash of binary. \n \u200b  (#xxhash64) xxhash64() \n xxhash64(binary)  \u2192 varbinary \n Computes the 64-bit xxHash hash of binary. \n ", "url": "https://docs.dune.com/query-engine/Functions-and-operators/binary#hashing-functions"}
{"content": "\u200b HMAC functions \n \u200b  (#hmac-md5) hmac_md5() \n hmac_md5(binary, key)  \u2192 varbinary \n Computes HMAC with MD5 of binary with the given key. \n \u200b  (#hmac-sha1) hmac_sha1() \n hmac_sha1(binary, key)  \u2192 varbinary \n Computes HMAC with SHA1 of binary with the given key. \n \u200b  (#hmac-sha256) hmac_sha256() \n hmac_sha256(binary, key)  \u2192 varbinary \n Computes HMAC with SHA256 of binary with the given key. \n \u200b  (#hmac-sha512) hmac_sha512() \n hmac_sha512(binary, key)  \u2192 varbinary \n Computes HMAC with SHA512 of binary with the given key. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/Functions-and-operators/binary) Base58 functions  (/query-engine/Functions-and-operators/base58) Bitwise  (/query-engine/Functions-and-operators/bitwise) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Binary operators  (#binary-operators) Binary functions  (#binary-functions) concat()  (#concat) length()  (#length) lpad()  (#lpad) rpad()  (#rpad) substr()  (#substr) reverse()  (#reverse) Base64 encoding functions  (#base64-encoding-functions) from_base64()  (#from-base64) to_base64()  (#to-base64) from_base64url()  (#from-base64url) to_base64url()  (#to-base64url) from_base32()  (#from-base32) to_base32()  (#to-base32) Hex encoding functions  (#hex-encoding-functions) from_hex()  (#from-hex) to_hex()  (#to-hex) Integer encoding functions  (#integer-encoding-functions) from_big_endian_32()  (#from-big-endian-32) to_big_endian_32()  (#to-big-endian-32) from_big_endian_64()  (#from-big-endian-64) to_big_endian_64()  (#to-big-endian-64) Floating-point encoding functions  (#floating-point-encoding-functions) from_ieee754_32()  (#from-ieee754-32) to_ieee754_32()  (#to-ieee754-32) from_ieee754_64()  (#from-ieee754-64) to_ieee754_64()  (#to-ieee754-64) Hashing functions  (#hashing-functions) crc32()  (#crc32) md5()  (#md5) sha1()  (#sha1) sha256()  (#sha256) sha512()  (#sha512) spooky_hash_v2_32()  (#spooky-hash-v2-32) spooky_hash_v2_64()  (#spooky-hash-v2-64) xxhash64()  (#xxhash64) HMAC functions  (#hmac-functions) hmac_md5()  (#hmac-md5) hmac_sha1()  (#hmac-sha1) hmac_sha256()  (#hmac-sha256) hmac_sha512()  (#hmac-sha512)", "url": "https://docs.dune.com/query-engine/Functions-and-operators/binary#hmac-functions"}
{"content": "\u200b Overview \n Queries on Dune need to be triggered and will be executed on one of our query engines. \n Query executions can be triggered by any user/team in Dune for public queries and by the owner of the query for private queries. Query executions can be triggered through the query editor, the dashboard editor, or via the API. We also automatically refresh popular dashboards automatically in regular intervals. \n The query engine determines the amount of resources allocated to your query. The larger the query engine, the more resources are allocated to your query. This means that queries executed on a larger query engine will run faster and are less likely to time out. \n ", "url": "https://docs.dune.com/query-engine/query-executions#overview"}
{"content": "\u200b Query executions triggers \n Query executions on Dune are triggered in four ways: \n \n \n Interactive executions  are manually triggered by a user clicking the \u201cRun\u201d button in the query editor page or refreshing an entire dashboard. Interactive executions can be routed via the community, medium, or large cluster, depending on the query engine selected. \n \n \n Scheduled executions  are triggered at a specific time and frequency. Scheduled executions can be routed via the medium or large cluster, depending on the execution tier selected. \n \n \n API executions  are triggered by an API call. API executions can be routed via the community, medium, or large cluster, depending on the query engine selected. \n \n \n Popular dashboards  are automatically refreshed based on their popularity. We measure popularity based on the number of views a dashboard has received. The most popular dashboards are refreshed every hour, the less popular dashboards are refreshed every 24 hours. Popular dashboards are refreshed via the community cluster. \n \n \n Here is an overview of the different execution triggers: \n interactive dashboard execution interactive query execution scheduled query execution scheduled dashboard execution API query execution popular dashboard executions \n ", "url": "https://docs.dune.com/query-engine/query-executions#query-executions-triggers"}
{"content": "\u200b Query engine size \n Dune has three query engine sizes:  community ,  medium , and  large . The query engine size determines the amount of resources allocated to your query. The larger the query engine, the more resources are allocated to your query. This means that queries executed on a larger query engine will run faster and are less likely to time out. \n \n \u200b  (#community-engine-size) Community engine size \n The community engine is the default query engine for all queries on Dune. It is a shared cluster, meaning that it is used by all Dune users. This means that the community cluster can be busy at times if many users are running queries at the same time.\nTo avoid long loading times and timeouts, we recommend using the medium or large engine for resource-intensive queries. \n Executions on the community engine are free of charge and will time out after 2 minutes. \n \u200b  (#medium-engine-size) Medium engine size \n The medium engine is built to handle most queries on Dune. It is cheap, reliable and fast. The medium engine will scale up and down depending on the demand.\nExecutions on the medium engine cost 10 credits.\nIt has a capacity equivalent to the Free engine, but executions can run for longer, timing out only after 30 minutes. \n \u200b  (#large-engine-size) Large engine size \n The large engine is built to handle the most resource-intensive queries on Dune. It\u2019s blazing fast, reliable and can easily deal with large amounts of data. The large engine also scales up and down depending on the demand. \n In addition to that, the large engine is also the only engine that can handle queries that requires lots of planning time. This mostly happens when you query a large amount of data, when you use a lot of joins or large aggregate window functions. \n Executions on the large engine cost 20 credits.\nIt has twice the capacity of the Medium engine, and executions can also run for 30 minutes. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /query-engine/query-executions) Overview  (/query-engine/overview) Query Views  (/query-engine/query-a-query) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Overview  (#overview) Query executions triggers  (#query-executions-triggers) Query engine size  (#query-engine-size) Community engine size  (#community-engine-size) Medium engine size  (#medium-engine-size) Large engine size  (#large-engine-size)", "url": "https://docs.dune.com/query-engine/query-executions#query-engine-size"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Create Queries Scheduling Queries Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Web App Overview  (/web-app/overview) Create Queries Writing Queries  (/web-app/query-editor/query-window) Finding Tables  (/web-app/query-editor/data-explorer) Using Parameters  (/web-app/query-editor/parameters) Scheduling Queries  (/web-app/query-editor/query-scheduler) Query Lineage  (/web-app/query-editor/query-lineage) Version History  (/web-app/query-editor/version-history) Create Visualizations Decoding Contracts Create Dashboards  (/web-app/dashboards) Mint Dashboards  (/web-app/dashboard-minting) Teams on Dune  (/web-app/teams) Dune AI  (/web-app/dune-ai) Upload Data  (/web-app/upload-data) Share your work  (/web-app/embeds) Search content  (/web-app/search) Alerts  (/web-app/alerts) Bug Bounty  (/web-app/bug-bounty) Create Queries Scheduling Queries Learn how to leverage the power of query scheduling for a more reliable and up-to-date dashboard display! Query Scheduling allows you to schedule a query to run at a specific time and frequency. \n Queries on Dune usually execute when a user triggers an automatic or interactive execution. This means that if you have a dashboard that is not frequently viewed, the data displayed on the dashboard may be outdated and execution of the queries will only be triggered once a user views the dashboard. Especially for dashboards that contain resource-intensive queries, this can lead to long loading times for the viewer. \n To keep your dashboard up-to-date and to ensure that your queries are executed reliably and in a timely manner, you can schedule them to run at a specific time and frequency. Scheduled queries can be run on medium and large query engines, which will require credits. Credit costs are the same as any other query execution on Dune, you will pay 10 credits for a medium tier execution and 20 credits for a large tier execution. \n ", "url": "https://docs.dune.com/web-app/query-editor/query-scheduler"}
{"content": "\u200b How to Schedule a Query \n \n \n Start by clicking the scheduler (clock) icon located at the bottom of the query editor, to the left of the \u201cRun\u201d button \n A dialog will prompt you to set a refresh schedule and an execution tier. Please note that scheduled queries can only be run on medium and large query engines, which will require credits. \n The dialog will display an estimated monthly credit consumption for this query scheduling, along with a monthly quota. These values will adjust based on the frequency and execution tier you select. \n Save the schedule \n Your query will execute once to start the schedule, and then will execute according to the schedule you set. \n \n \u200b  (#query-scheduling-limitations) Query Scheduling Limitations \n \n Query scheduling is currently not available for queries with parameters. \n The query schedule is removed when the queries are archived or when the ownership changes (e.g., when a query is migrated). \n There are no notifications available for scheduled query failures as of now. Rest assured, these failures do not result in any charges to your account. \n \n \u200b  (#adjusting-or-cancelling-a-query-schedule) Adjusting or Cancelling a Query Schedule \n If you need to modify or cancel a query schedule, click on the scheduler icon to open the scheduling dialog. Make changes as needed or click \u201cStop\u201d to cancel the schedule. \n \n ", "url": "https://docs.dune.com/web-app/query-editor/query-scheduler#how-to-schedule-a-query"}
{"content": "\u200b Scheduling entire dashboards \n Instead of scheduling individual queries, you can also schedule entire dashboards. Learn more about scheduling dashboards  here  (/web-app/dashboards#sharing-your-dashboard) . Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /web-app/query-editor/query-scheduler) Using Parameters  (/web-app/query-editor/parameters) Query Lineage  (/web-app/query-editor/query-lineage) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page How to Schedule a Query  (#how-to-schedule-a-query) Query Scheduling Limitations  (#query-scheduling-limitations) Adjusting or Cancelling a Query Schedule  (#adjusting-or-cancelling-a-query-schedule) Scheduling entire dashboards  (#scheduling-entire-dashboards)", "url": "https://docs.dune.com/web-app/query-editor/query-scheduler#scheduling-entire-dashboards"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Web App Teams on Dune Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Web App Overview  (/web-app/overview) Create Queries Create Visualizations Decoding Contracts Create Dashboards  (/web-app/dashboards) Mint Dashboards  (/web-app/dashboard-minting) Teams on Dune  (/web-app/teams) Dune AI  (/web-app/dune-ai) Upload Data  (/web-app/upload-data) Share your work  (/web-app/embeds) Search content  (/web-app/search) Alerts  (/web-app/alerts) Bug Bounty  (/web-app/bug-bounty) Web App Teams on Dune Dune Teams are shared workspaces for Wizards to collaborate within. ", "url": "https://docs.dune.com/web-app/teams"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Projects Project Specific API Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Queries Materialized Views Webhooks Data Management Endpoints Tables Preset Endpoints DEX EigenLayer EVM Contracts Farcaster Markets Projects Project Specific API  (/api-reference/projects/introduction) GET Linea LXP  (/api-reference/projects/endpoint/linea_lxp) Projects Project Specific API Utilize Dune\u2019s dedicated APIs to access specific project, protocol, or topic data with ease\u2014no SQL required. \n \n JSON Format : All endpoints deliver JSON-formatted data for straightforward integration. \n Instant Access : Begin immediately by  creating a free account  (https://dune.com/auth/register)  and  obtain an API key  (.././overview/authentication) . \n Expansive Data Ecosystem : Enhance your projects by connecting with an extensive range of on-chain and off-chain data, from  Farcaster  (.././farcaster/introduction)  to  DEX  (.././dex/endpoint/dex_pair)  and more. Build alongside with our vibrant community. \n \n Linea LXP Get LXP balance for wallet, along with social and onchain behavior stats  (/api-reference/projects/endpoint/linea_lxp) \n \n To custom-build an API endpoint with SQL query, watch  this short video  (https://youtu.be/o29ig849qMY)  and  get started here  (.././quickstart/results-eg) !  Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/projects/introduction) Marketplace Market Share  (/api-reference/markets/endpoint/marketplace_marketshare) Linea LXP  (/api-reference/projects/endpoint/linea_lxp) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/api-reference/projects/introduction"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Web App Create Dashboards Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Web App Overview  (/web-app/overview) Create Queries Create Visualizations Decoding Contracts Create Dashboards  (/web-app/dashboards) Mint Dashboards  (/web-app/dashboard-minting) Teams on Dune  (/web-app/teams) Dune AI  (/web-app/dune-ai) Upload Data  (/web-app/upload-data) Share your work  (/web-app/embeds) Search content  (/web-app/search) Alerts  (/web-app/alerts) Bug Bounty  (/web-app/bug-bounty) Web App Create Dashboards Dashboards are where Dune\u2019s content lives and gets discovered. \n Dashboards on Dune consist of widgets. Widgets can either be Visualizations or Text. It is also possible to embed images or GIFs inside of the text widget. \n You can freely resize every widget to match the layout you want to create. \n ", "url": "https://docs.dune.com/web-app/dashboards"}
{"content": "\u200b Why Teams? \n Creating a Team has several benefits: \n \n Collaborate on the same content.  Teams make it easy for multiple Wizards to work on shared Queries and Dashboards. \n Shared access to paid features.  All Team members can spend credits and access paid features like private Queries and Dashboards. \n A new Team profile.  Showcase all of your Team\u2019s work in one place. \n User roles.  Onboard Team members as viewers, editors or admins. \n \n ", "url": "https://docs.dune.com/web-app/teams#why-teams"}
{"content": "\u200b Creating a Team \n Head over to  Settings > Teams  (https://dune.com/settings/teams)  to create your Team. \n ", "url": "https://docs.dune.com/web-app/teams#creating-a-team"}
{"content": "\u200b Adding users \n You can invite other Dune Wizards to join your Team in the People section of your Team\u2019s Settings page. When you invite someone you\u2019ll need to input their Dune Username. \n You\u2019ll also need to assign them one of the following  Roles : \n \n \ud83d\udc40  Viewer:  can see the Team\u2019s content through My Creations and will be listed as a Team member in the Team page. Can also spend credits. \n \u270f\ufe0f  Editor:  in addition to the above, they can create and edit Queries under the Team\u2019s domain. \n \u2699\ufe0f  Admin:  in addition to the above, they can manage the Team and its content. \n \n When you invite a Wizard to join your team we\u2019ll email them a link to join. They can also directly go to  Settings > Teams  (https://dune.com/settings/teams)  and accept their invite there. \n ", "url": "https://docs.dune.com/web-app/teams#adding-users"}
{"content": "\u200b Team content \n Team Queries and Dashboards are created the same way they are for individual accounts. The context you are in determines whether you are creating content for your personal account or for your Team. You can always change the ownership of a Query or Dashboard in their Settings page. \n \n Once you transfer content to a Team, you will only be able to transfer it out of the Team if you are an Admin. If you accidentally transfer content to a Team you will have to ask the Team\u2019s Admin to transfer it back to you. \n ", "url": "https://docs.dune.com/web-app/teams#team-content"}
{"content": "\u200b Switching Contexts \n Once you are member of a team, you can switch between your personal context and your Team context. Accordingly, the \u201cmy creations\u201d page will show your personal creations or your team\u2019s creations. \n Additionally, all queries and dashboards created in the team context will be owned by the team and not by you personally. \n \n The context predicates which credit balance you are spending from. If you are in your personal context, you will spend your personal credits. If you are in your Team\u2019s context, you will spend your Team\u2019s credits. \n You can spend the credits of your team on any content, regardless of whether it is owned by your personal account, your team or another Wizard. \n You can edit the content of your team, regardless of whether you are in the personal or team context.\nIn the  Version History  (/web-app/query-editor/version-history)  edits you make will be attributed to your personal account, even if you are in your Team\u2019s context. \n ", "url": "https://docs.dune.com/web-app/teams#switching-contexts"}
{"content": "\u200b FAQ \n Can I have private content? Private dashboards and queries are available for the team or personal account they are in. \n How do I edit my role? You have to ask one of your team admins. If you\u2019re an admin, you will still have to ask another admin or upgrade someone else to the admin role. That\u2019s to ensure every team always has at least an admin. \n Can I remove people from my Team? Yes, you can remove people from your Team in the People section of your Team\u2019s Settings page. \n Can I transfer content to another Team? Yes, you can transfer content to another Team in the Settings page of the Query or Dashboard you want to transfer. \n Can I transfer content to another Wizard? Yes, you can transfer content to another Wizard in the Settings page of the Query or Dashboard you want to transfer.\nThis will only work if the other Wizard is a member of your Team. If they are not, you will have to invite them to your Team first. \n Can I transfer content to my personal account? Yes, you can transfer content to your personal account in the Settings page of the Query or Dashboard you want to transfer. \n I have feedback, how do I reach out? \n Come join our  #general-feedback Discord channel  (https://discord.com/channels/757637422384283659/1012706316755664926)  and we\u2019ll be glad to help \ud83d\ude47\u200d\u2642\ufe0f Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /web-app/teams) Mint Dashboards  (/web-app/dashboard-minting) Dune AI  (/web-app/dune-ai) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Why Teams?  (#why-teams) Creating a Team  (#creating-a-team) Adding users  (#adding-users) Team content  (#team-content) Switching Contexts  (#switching-contexts) FAQ  (#faq)", "url": "https://docs.dune.com/web-app/teams#faq"}
{"content": "\u200b Creating a Dashboard \n \n To create a dashboard on Dune: \n \n Use the create menu and pick \u201cNew Dashboard\u201d \n Give your Dashboard a name \n Click on \u201cSave and Open\u201d \n You are now inside of your Dashboard \n Enter the edit mode by clicking on the \u201cEdit\u201d button in the top right corner \n Add widgets by clicking on the \u201cAdd Widget\u201d button in the top right corner \n Pick the widget you want to add \n You can now resize the widget by dragging the bottom right corner \n You can also move the widget by dragging it around \n Click on the \u201cSave\u201d button in the top right corner to save your changes \n \n The initial name that you give to your Dashboard will also be the URL slug. You can\u2019t change the URL slug afterwards, so be mindful of the name you choose. Changing the Dashboard\u2019s display name is always possible though. \n ", "url": "https://docs.dune.com/web-app/dashboards#creating-a-dashboard"}
{"content": "\u200b Add Widgets from the Query Editor \n You can add widgets directly from the Query Editor. \n \n To add widgets from the query editor: \n \n Navigate to the query Editor \n Pick the Visualization you want to add to your Dashboard \n Click on the \u201cAdd to Dashboard\u201d button \n Choose the Dashboard you want to add the Visualization to \n The Visualization is now added to your Dashboard \n \n The widget will be added to the bottom of your Dashboard. You can move it around and resize it as you like. \n ", "url": "https://docs.dune.com/web-app/dashboards#add-widgets-from-the-query-editor"}
{"content": "\u200b Adding Text Widget \n You can add text widgets to your dashboard. \n Text widgets support a subset of Markdown. You can manipulate text and embed images and GIFs. \n ", "url": "https://docs.dune.com/web-app/dashboards#adding-text-widget"}
{"content": "\u200b Embedding Images and GIFs \n Text boxes can also be used to embed images or GIFs into your Dashboard. \n The Syntax for embedding images is: \n ![alt text](image url) \n \n Since you can\u2019t store images locally on our servers, you need to upload your images somewhere else or find the raw file somewhere on the internet. \n In practice this might look like this: \n ! [ text ]( https://pbs.twimg.com/media/FEWVLQwWUAQcqLY?format=jpg&name=medium ) \n \n You can resize the image by simply resizing the widget it is contained in. \n You can combine images and text in one widget. \n ", "url": "https://docs.dune.com/web-app/dashboards#embedding-images-and-gifs"}
{"content": "\u200b Keeping your Dashboard up to date \n Dashboards on Dune are not updated automatically. You can refresh your Dashboard by clicking on the \u201cRun\u201d button in the top right corner. \n \n Alternatively, you can schedule your Dashboard to be refreshed in regular intervals. \n \n To schedule a dashboard: \n \n Click on the \u201cclock\u201d icon in the top right corner \n Select the frequency you want your Dashboard to be refreshed \n Select the execution tier you want to use \n Click on \u201cSave\u201d \n \n You can also schedule individual queries to be refreshed. This is useful if you have a Dashboard with many queries and only want to refresh a few of them. Learn more about scheduling queries  here  (/web-app/query-editor/query-scheduler) . \n ", "url": "https://docs.dune.com/web-app/dashboards#keeping-your-dashboard-up-to-date"}
{"content": "\u200b Sharing your Dashboard \n You can share your public Dashboard by simply sharing the URL. For private dashboards, viewers need to be part of the same team as the team that owns the Dashboard. Alternatively, you can also share your Dashboard with individual users via the  Share  button in the top right corner. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /web-app/dashboards) Survivor's Kit for Contract Submission  (/web-app/decoding/short-guide-contract-submission) Mint Dashboards  (/web-app/dashboard-minting) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Creating a Dashboard  (#creating-a-dashboard) Add Widgets from the Query Editor  (#add-widgets-from-the-query-editor) Adding Text Widget  (#adding-text-widget) Embedding Images and GIFs  (#embedding-images-and-gifs) Keeping your Dashboard up to date  (#keeping-your-dashboard-up-to-date) Sharing your Dashboard  (#sharing-your-dashboard)", "url": "https://docs.dune.com/web-app/dashboards#sharing-your-dashboard"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation EVM Transactions Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune Echo Overview  (/echo/overview) EVM GET Token Balances  (/echo/evm/balances) GET Supported Chains (Token Balances)  (/echo/evm/balances-chains) GET Transactions  (/echo/evm/transactions) GET Supported Chains (Transactions)  (/echo/evm/transactions-chains) SVM React Hooks  (/echo/hooks) Proxy  (/echo/proxy) EVM Transactions This endpoint returns transactions for a given address across several EVM chains.\nBy setting the decode parameter you can optionally choose to get both function calls and logs decoded. GET / echo / v1 / transactions / evm / {address} Try it The Transactions Endpoint allows for quick and accurate lookup of transactions associated with an address.\nData is typically available within 100 ms after a block has been propagated to nodes. \n ", "url": "https://docs.dune.com/echo/evm/transactions"}
{"content": "\u200b Column Descriptions of the Transaction object \n Column Description Type address Wallet or ERC20 contract address string block_hash Unique cryptographic block identifier. string block_number Block\u2019s sequential index. string block_time Timestamp of block creation. timestamp block_version Block\u2019s protocol iteration. integer chain Name of the blockchain string from Address of sender string to Address of receiver string data Data of transaction string gas_price Gas price of transaction as hexadecimal string string hash Hash of transaction string index Index of transaction string max_fee_per_gas Max fee per gas of transaction as hexadecimal string string max_priority_fee_per_gas Max priority fee per gas of transaction as hexadecimal string string nonce Nonce of transaction as hexadecimal string string transaction_type Type of transaction string value Value of transaction as hexadecimal string string \n ", "url": "https://docs.dune.com/echo/evm/transactions#column-descriptions-of-the-transaction-object"}
{"content": "\u200b Ordering \n The data is ordered by descending block time, so that new transactions will always be delivered first. \n ", "url": "https://docs.dune.com/echo/evm/transactions#ordering"}
{"content": "\u200b Pagination \n This endpoint is using cursor based pagination. You can use the  limit  parameter to define the maximum page size.\nResults might at times be less than the maximum page size.\nThe  next_offset  value is included in the initial response and can be utilized to fetch the next page of results by passing it as the  offset  query parameter in the next request. \n You can only use the value from  next_offset  to set the  offset  parameter of the next page of results. Using your own  offset  value will not have any effect. Headers \u200b  (#parameter-x-dune-api-key) X-Dune-Api-Key string required API key to access the service Path Parameters \u200b  (#parameter-address) address string required Wallet to get transactions for Query Parameters \u200b  (#parameter-offset) offset string | null The offset to paginate through result sets. This is a cursor being passed from the previous response, only use what the backend has returned on previous responses. \u200b  (#parameter-limit) limit integer | null Maximum number of transactions to return Required range:  x > 0 \u200b  (#parameter-block-time) block_time integer | null Return only transactions before this block time Required range:  x > 0 \u200b  (#parameter-chain-ids) chain_ids string | null Comma separated list of chain ids to get transactions for \u200b  (#parameter-to) to string | null Filter transactions to a given address \u200b  (#parameter-method-id) method_id string | null Return only transactions with this method id \u200b  (#parameter-decode) decode boolean | null Return abi decoded transactions and logs \u200b  (#parameter-log-address) log_address string | null Return only transactions with this address in logs \u200b  (#parameter-topic0) topic0 string | null Return only transactions with this topic0 in logs \u200b  (#parameter-min-block-number) min_block_number integer | null Return only transactions from blocks with block number equal to or greater than this value Required range:  x > 0 Response 200 - application/json \u200b  (#response-transactions) transactions object[] required Show   child attributes \u200b  (#response-transactions-address) transactions. address string required \u200b  (#response-transactions-block-hash) transactions. block_hash string required \u200b  (#response-transactions-block-number) transactions. block_number integer required Required range:  x > 0 \u200b  (#response-transactions-block-time) transactions. block_time string required \u200b  (#response-transactions-chain) transactions. chain string required \u200b  (#response-transactions-chain-id) transactions. chain_id integer required \u200b  (#response-transactions-data) transactions. data file required \u200b  (#response-transactions-from) transactions. from string required \u200b  (#response-transactions-gas-price) transactions. gas_price string required \u200b  (#response-transactions-hash) transactions. hash string required \u200b  (#response-transactions-index) transactions. index integer required Required range:  x > 0 \u200b  (#response-transactions-logs) transactions. logs object[] required Show   child attributes \u200b  (#response-transactions-logs-address) transactions.logs. address string required \u200b  (#response-transactions-logs-data) transactions.logs. data string required \u200b  (#response-transactions-logs-topics) transactions.logs. topics string[] required \u200b  (#response-transactions-logs-decoded) transactions.logs. decoded object Show   child attributes \u200b  (#response-transactions-logs-decoded-inputs) transactions.logs.decoded. inputs object[] required Show   child attributes \u200b  (#response-transactions-logs-decoded-inputs-name) transactions.logs.decoded.inputs. name string required \u200b  (#response-transactions-logs-decoded-inputs-type) transactions.logs.decoded.inputs. type string required \u200b  (#response-transactions-logs-decoded-inputs-value) transactions.logs.decoded.inputs. value object required \u200b  (#response-transactions-logs-decoded-name) transactions.logs.decoded. name string required \u200b  (#response-transactions-nonce) transactions. nonce string required \u200b  (#response-transactions-to) transactions. to string required \u200b  (#response-transactions-transaction-type) transactions. transaction_type enum<string> required Available options:   Sender ,   Receiver   \u200b  (#response-transactions-value) transactions. value string required \u200b  (#response-transactions-decoded) transactions. decoded object Show   child attributes \u200b  (#response-transactions-decoded-inputs) transactions.decoded. inputs object[] required Show   child attributes \u200b  (#response-transactions-decoded-inputs-name) transactions.decoded.inputs. name string required \u200b  (#response-transactions-decoded-inputs-type) transactions.decoded.inputs. type string required \u200b  (#response-transactions-decoded-inputs-value) transactions.decoded.inputs. value object required \u200b  (#response-transactions-decoded-name) transactions.decoded. name string required \u200b  (#response-transactions-effective-gas-price) transactions. effective_gas_price string \u200b  (#response-transactions-gas-used) transactions. gas_used string \u200b  (#response-transactions-success) transactions. success boolean | null \u200b  (#response-next-offset) next_offset string | null Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /echo/evm/transactions) Supported Chains (Token Balances)  (/echo/evm/balances-chains) Supported Chains (Transactions)  (/echo/evm/transactions-chains) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/echo/evm/transactions#pagination"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation DEX DEX Pair Stats Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Queries Materialized Views Webhooks Data Management Endpoints Tables Preset Endpoints DEX GET DEX Pair Stats  (/api-reference/dex/endpoint/dex_pair) EigenLayer EVM Contracts Farcaster Markets Projects DEX DEX Pair Stats Given a blockchain, retrieves essential metadata and statistical data for token pairs.\nMetadata encompasses all pool addresses associated with the token pair, the DEXs or\nprojects where they are available, and their token addresses. Key statistics provided\ninclude one-day, seven-day, and thirty-day trading volumes, USD liquidity,\nand the seven-day volume-to-liquidity ratio. GET / v1 / dex / pairs / {chain} Try it \n Query can be found  here  (https://dune.com/queries/3568055) \n Chains included are:  arbitrum ,  base ,  bnb ,  celo ,  ethereum ,  fantom ,  gnosis ,  optimism ,  polygon ,  scroll ,  zk_sync ,  solana \n Scheduled to update every 30 minutes \n You can apply  filters  (../../executions/filtering)  like WHERE, IN, AND/OR upon results \n Each row is uniquely identified by the  chain ,  token_a_address , and  token_b_address  columns combination. \n \n ", "url": "https://docs.dune.com/api-reference/dex/endpoint/dex_pair"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation EVM Contracts Trending Contracts Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Queries Materialized Views Webhooks Data Management Endpoints Tables Preset Endpoints DEX EigenLayer EVM Contracts GET Trending Contracts  (/api-reference/evm/endpoint/contracts) Farcaster Markets Projects EVM Contracts Trending Contracts Get trending contracts deployed on any EVM chain based on activity in last 30 days GET / v1 / trends / evm / contracts / {chain} Try it \n Query can be found  here  (https://dune.com/queries/3575084) \n Scheduled to update once a day (12am UTC) \n You can apply  filters  (../../executions/filtering)  like WHERE, IN, AND/OR upon results \n \n ", "url": "https://docs.dune.com/api-reference/evm/endpoint/contracts"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation API Quickstart Execution & Results Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Execution & Results  (/api-reference/quickstart/results-eg) Query Management  (/api-reference/quickstart/queries-eg) Tables Management  (/api-reference/quickstart/tables-eg) Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Queries Materialized Views Webhooks Data Management Endpoints Tables Preset Endpoints DEX EigenLayer EVM Contracts Farcaster Markets Projects API Quickstart Execution & Results In this quickstart, we will walk through how to fetch Dune data in Python. \n \n \ud83d\udcd3 You also can choose to use  this Google Colab Notebook  (https://colab.research.google.com/drive/1h3p8Aq7oGZ6lp_R8hOTc0FpX82K1c6d3?usp=sharing)  or  this Hex Notebook  (https://app.hex.tech/d12aba6a-f113-4485-a72b-b7d812bc2234/hex/401d8569-13f7-43fc-99f4-5b41592ebe44/draft/logic)  to get started fast. \n \u2328\ufe0f For a quickstart on TypeScript, please  download Dune TypeScript SDK  (https://github.com/bh2smith/ts-dune-client?tab=readme-ov-file)  and  follow this demo project  (https://github.com/bh2smith/demo-ts-dune-client) . \n \n ", "url": "https://docs.dune.com/api-reference/quickstart/results-eg"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Billing Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Queries Materialized Views Webhooks Data Management Endpoints Tables Preset Endpoints DEX EigenLayer EVM Contracts Farcaster Markets Projects Billing Pricing for API is charged along two dimensions. All details can be found at  dune.com/pricing  (https://dune.com/pricing) \n If your execution fails, then no credits are charged. If you execute a query but never pull the results, you are only charged for the execution. \n Dimension Charge Executions 10 credits per medium query engine executions   20 credits per large query engine executions Datapoints (Results) 1 credit per 1,000 datapoints on Free   1 credit per 5,000 datapoints on Plus   1 credit per 25,000 datapoints on Premium Storage 1MB on Free   15GB on Plus   50GB on Premium Queries Endpoint Available on Plus and Premium Webhooks (Alerts) 1 on Free   5 on Plus   50 on Premium \n A datapoint applies to query results after the query is run, and can in most cases be thought of  rows * columns  with an additional limit of 100 avg bytes per cell in a set of results. This can be expressed as: \n C r e d i t s = D a t a p o i n t s / 1000 = m a x ( r o w s \u2217 c o l u m n s , c e i l ( t o t a l b y t e s / 100 ) ) / 1000 Credits = Datapoints/1000 = max(rows*columns, ceil(totalbytes/100))/1000\n C re d i t s = D a t a p o in t s /1000 = ma x ( ro w s \u2217 co l u mn s , ce i l ( t o t a l b y t es /100 )) /1000 \n Any API usage billing will be based on what account the API key is associated with. If you use your team api key to call a public query belonging to yourself, the billing will be associated to the team (and vice versa). Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/overview/billing) Troubleshooting Errors  (/api-reference/overview/troubleshooting) FAQ  (/api-reference/overview/faq) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/api-reference/overview/billing"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation EigenLayer Dune EigenLayer Endpoints Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Queries Materialized Views Webhooks Data Management Endpoints Tables Preset Endpoints DEX EigenLayer Dune EigenLayer Endpoints  (/api-reference/eigenlayer/introduction) GET AVS Metadata  (/api-reference/eigenlayer/endpoint/avs_metadata) GET AVS Metrics  (/api-reference/eigenlayer/endpoint/avs_metrics) GET Operator Metadata  (/api-reference/eigenlayer/endpoint/operator_metadata) GET Operator Metrics  (/api-reference/eigenlayer/endpoint/operator_metrics) GET Operator <> AVS Mapping  (/api-reference/eigenlayer/endpoint/operator_to_avs_mapping) EVM Contracts Farcaster Markets Projects EigenLayer Dune EigenLayer Endpoints Leverage Dune\u2019s API for direct access to  EigenLayer  (https://www.eigenlayer.xyz/)  data, streamlining your dApp and infrastructure development. No SQL needed\u2014our Domain-specific API is designed for easy integration and flexible application use. \n \n JSON Format : All endpoints deliver JSON-formatted data for straightforward integration. \n Instant Access : Begin immediately by  creating a free account  (https://dune.com/auth/register)  and  obtain an API key  (.././overview/authentication) . \n Expansive Data Ecosystem : Enhance your projects by connecting with an extensive range of on-chain and off-chain data, from  Farcaster  (.././farcaster/introduction)  to  DEX  (../dex/endpoint/dex_pair.mdx)  and more. Build alongside with our vibrant community. \n \n AVS Metadata Get AVS metadata, including name, address, and more.  (/api-reference/eigenlayer/endpoint/avs_metadata) Operator Metadata Get operator metadata, including name, address, and more.  (/api-reference/eigenlayer/endpoint/operator_metadata) AVS Metrics Get AVS metrics, including TVL, number of operators and number of stakers.  (/api-reference/eigenlayer/endpoint/avs_metrics) Operator Metrics Get operator metrics, including TVL, number of stakers, and more.  (/api-reference/eigenlayer/endpoint/operator_metrics) Operator <> AVS Mapping Get a mapping of which operator is registered to which AVS and when it was registered.  (/api-reference/eigenlayer/endpoint/operator_to_avs_mapping) \n \n To custom-build an API endpoint with SQL query, watch  this short video  (https://youtu.be/o29ig849qMY)  and  get started here  (.././quickstart/results-eg) !  Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/eigenlayer/introduction) DEX Pair Stats  (/api-reference/dex/endpoint/dex_pair) AVS Metadata  (/api-reference/eigenlayer/endpoint/avs_metadata) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/api-reference/eigenlayer/introduction"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Custom Endpoints Custom Endpoints Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Queries Materialized Views Webhooks Data Management Endpoints Tables Preset Endpoints DEX EigenLayer EVM Contracts Farcaster Markets Projects Custom Endpoints Custom Endpoints Create custom API endpoints from Dune queries Custom Endpoints allow developers to create and manage API endpoints from Dune queries. By selecting a query and scheduling it to run at a specified frequency, developers can call a custom URL to consume data. This flexible alternative to  Preset Endpoints  (.././overview/introduction#preset-endpoints)  provides greater customization without the complexities of  SQL Endpoints  (.././overview/introduction#sql-endpoints) . \n ", "url": "https://docs.dune.com/api-reference/custom/overview"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation EVM Token Balances Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune Echo Overview  (/echo/overview) EVM GET Token Balances  (/echo/evm/balances) GET Supported Chains (Token Balances)  (/echo/evm/balances-chains) GET Transactions  (/echo/evm/transactions) GET Supported Chains (Transactions)  (/echo/evm/transactions-chains) SVM React Hooks  (/echo/hooks) Proxy  (/echo/proxy) EVM Token Balances This endpoint returns EVM token balances for an address for any token that the address has interacted with GET / echo / v1 / balances / evm / {address} Try it The Token Balances API provides accurate and fast real time balances of the native and ERC20 tokens of accounts on supported EVM blockchains.\nData is typically available within 100 ms since a block was propagated to nodes. The endpoint only returns balances for certain low latency chains by default.\nTo fetch balances for all supported chains please pass the  chain_ids=all  parameter. See  EVM Supported Chains  (./balance-chains)  for more details. \n \n These endpoints are authenticated with a normal Dune API key. \n Specify  ?filters=erc20  or  ?filters=native  to get only erc20 tokens or native assets, respectively \n Specify  ?exclude_spam_tokens  to filter out tokens Dune believes to be spam. \n Specify  ?chain_ids=all  to fetch balances for all supported chains. \n Specify  ?chain_ids=11,250,1  to fetch balances only for select chains. \n Specify  ?metadata=url,logo  to get url and logo for tokens. \n Token metadata, such as symbols and decimals, are gathered onchain. \n \n ", "url": "https://docs.dune.com/echo/evm/balances"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Authentication Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Queries Materialized Views Webhooks Data Management Endpoints Tables Preset Endpoints DEX EigenLayer EVM Contracts Farcaster Markets Projects Authentication The Dune API relies on API keys for authentication. Your API key grants access and determines billing details for private queries, so safeguard it diligently! \n ", "url": "https://docs.dune.com/api-reference/overview/authentication"}
{"content": "\u200b Use Cases \n \n Enable DEX aggregators to identify all pools for swapping specific token pairs or addresses, using filters such as  filter='USDC-WETH'  or  filters=token_a_address = '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48' or token_b_address = '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48' . \n Identify the token pair with the highest USD liquidity on a given chain by sorting results with  sort_by=usd_liquidity desc . \n Provide aggregated DEX pair statistics, including volume and liquidity, to algorithmic trading bots and risk management systems. \n \n ", "url": "https://docs.dune.com/api-reference/dex/endpoint/dex_pair#use-cases"}
{"content": "\u200b Column Descriptions \n Column Description Type chain The blockchain where the token pair is traded string token_pair The identifier of the token pair, e.g., \u2018USDC-WETH\u2019 string projects List of DEX projects offering the token pair array(string) pool_ids Contract addresses of pools containing the token pair array(string) token_a_address Contract address of the first token in the pair string token_b_address Contract address of the second token in the pair string one_day_volume 24-hour USD trading volume for the token pair across all pools on all DEXes double seven_day_volume 7-day USD trading volume for the token pair across all pools on all DEXes double thirty_day_volume 30-day USD trading volume for the token pair across all pools on all DEXes double all_time_volume Total USD trading volume for the token pair since inception across all pools on all DEXes double usd_liquidity Current USD liquidity available in all pools for the token pair on all DEXes double seven_day_volume_liquidity_ratio 7-day trading volume to liquidity ratio for the token pair  across all pools on all DEXes double Headers \u200b  (#parameter-x-dune-api-key) X-Dune-Api-Key string required API Key for the service Path Parameters \u200b  (#parameter-chain) chain string required The blockchain where the token pair is traded Query Parameters \u200b  (#parameter-api-key) api_key string API Key, alternative to using the HTTP header X-Dune-Api-Key \u200b  (#parameter-allow-partial-results) allow_partial_results boolean This enables returning a query result that was too large and only a partial result is\navailable. By default allow_partial_results is set to false and a failed state is returned. \u200b  (#parameter-columns) columns string Specifies a comma-separated list of column names to return. If omitted, all columns are included.\nTip: use this to limit the result to specific columns, reducing datapoints cost of the call. \u200b  (#parameter-filters) filters string Expression to filter out rows from the results to return. This expression is similar to\na SQL WHERE clause. More details about it in the Filtering section of the doc.\nThis parameter is incompatible with sample_count. \u200b  (#parameter-ignore-max-datapoints-per-request) ignore_max_datapoints_per_request boolean There is a default 250,000 datapoints limit to make sure you don't accidentally spend all\nyour credits in one call. To ignore the max limit, you can add\nignore_max_datapoints_per_request=true \u200b  (#parameter-limit) limit integer Limit number of rows to return. This together with 'offset' allows easy pagination through\nresults in an incremental and efficient way. This parameter is incompatible\nwith sampling (sample_count). \u200b  (#parameter-offset) offset integer Offset row number to start (inclusive, first row means offset=0) returning results\nfrom. This together with 'limit' allows easy pagination through results in an\nincremental and efficient way. This parameter is incompatible with sampling (sample_count). \u200b  (#parameter-query-id) queryID integer required \u200b  (#parameter-sample-count) sample_count integer Number of rows to return from the result by sampling the data. This is useful when you\nwant to get a uniform sample instead of the entire result. If the result has less\nthan the sample count, the entire result is returned. Note that this will return a\nrandomized sample, so not every call will return the same result. This parameter is\nincompatible with  offset ,  limit , and  filters  parameters. \u200b  (#parameter-sort-by) sort_by string Expression to define the order in which the results should be returned. This expression\nis similar to a SQL ORDER BY clause. More details about it in the Sorting section of the doc. Response 200 - application/json \u200b  (#response-cancelled-at) cancelled_at string Timestamp of when the query execution was cancelled, if applicable. \u200b  (#response-execution-ended-at) execution_ended_at string Timestamp of when the query execution ended. \u200b  (#response-execution-id) execution_id string Unique identifier for the execution of the query. \u200b  (#response-execution-started-at) execution_started_at string Timestamp of when the query execution started. \u200b  (#response-expires-at) expires_at string Timestamp of when the query result expires. \u200b  (#response-is-execution-finished) is_execution_finished boolean Whether the state of the query execution is terminal. This can be used for polling purposes. \u200b  (#response-next-offset) next_offset integer Offset that can be used to retrieve the next page of results. \u200b  (#response-next-uri) next_uri string URI that can be used to fetch the next page of results. \u200b  (#response-query-id) query_id integer Unique identifier of the query. \u200b  (#response-result) result object The object containing the results and metadata of the query execution Show   child attributes \u200b  (#response-result-metadata) result. metadata object Metadata about the execution of the query, including details like column names,\nrow counts, and execution times. Show   child attributes \u200b  (#response-result-metadata-column-names) result.metadata. column_names string[] Names of the columns in the result set. \u200b  (#response-result-metadata-column-types) result.metadata. column_types string[] Types of the columns in the result set. \u200b  (#response-result-metadata-datapoint-count) result.metadata. datapoint_count integer Results cell count is used for billing/pricing plans\nhere we expose the these values to the user, so that they can track their costs \u200b  (#response-result-metadata-execution-time-millis) result.metadata. execution_time_millis integer Time in milliseconds that the query took to execute. \u200b  (#response-result-metadata-pending-time-millis) result.metadata. pending_time_millis integer Time in milliseconds that the query was pending before execution. \u200b  (#response-result-metadata-result-set-bytes) result.metadata. result_set_bytes integer ResultSetBytes represents the raw data bytes returned by the SQL execution engine, it includes: \n \n total nr of bytes used on 1 line with all the column names (the header of the result set) \n total nr of bytes for all the row values (the result set of rows) \n \n it doesn't include overheads such as the presence of column names for every row in the JSON result type.\nit also doesn't include opmitizations such as compression \u200b  (#response-result-metadata-row-count) result.metadata. row_count integer Number of rows in the result set for the current page of results. \u200b  (#response-result-metadata-total-result-set-bytes) result.metadata. total_result_set_bytes integer Total number of bytes in the result set. This doesn't include the json representation overhead. \u200b  (#response-result-metadata-total-row-count) result.metadata. total_row_count integer Number of rows in the result set for the entire result set. \u200b  (#response-result-rows) result. rows object[] A list of rows. A row is dictionary of key-value pairs returned by the query,\neach pair corresponding to a column Show   child attributes \u200b  (#response-result-rows-key) result.rows. {key} object \u200b  (#response-state) state string The state of the query execution. \u200b  (#response-submitted-at) submitted_at string Timestamp of when the query was submitted. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/dex/endpoint/dex_pair) Delete Table  (/api-reference/tables/endpoint/delete) Dune EigenLayer Endpoints  (/api-reference/eigenlayer/introduction) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/api-reference/dex/endpoint/dex_pair#column-descriptions"}
{"content": "\u200b Use Cases \n \n Feed into a CRM of developers and projects based on contract popularity \n Build an explorer page of top trending contracts, with basic metadata to support. \n Track trending contracts by value and type (user facing, contract facing, token, router, safes, etc.) \n \n ", "url": "https://docs.dune.com/api-reference/evm/endpoint/contracts#use-cases"}
{"content": "\u200b Column Descriptions \n Column Name Description Type contract_address Contract address of the contract string blockchain Blockchain of the contract string deployer Deployer address of the contract string contract_project Project of the contract string contract_name Name of the contract string created_time Time when the contract was created string deployed_days_ago Number of days since deployment integer token_standard Standard of the token (ERC20,ERC721,ERC1155) if applicable string usd_value_received Value received in USD in ETH and ERC20 tokens in last 30 days integer transaction_calls Number of transaction calls (top level transactions) in last 30 days integer unique_callers Number of unique callers (tx from) in last 30 days integer contract_calls Number of calls from other contracts in last 30 days integer unique_contract_callers Number of unique contracts calling this contract in traces in last 30 days integer Headers \u200b  (#parameter-x-dune-api-key) X-Dune-Api-Key string required API Key for the service Path Parameters \u200b  (#parameter-chain) chain string required The blockchain where the token pair is traded Query Parameters \u200b  (#parameter-api-key) api_key string API Key, alternative to using the HTTP header X-Dune-Api-Key \u200b  (#parameter-allow-partial-results) allow_partial_results boolean This enables returning a query result that was too large and only a partial result is\navailable. By default allow_partial_results is set to false and a failed state is returned. \u200b  (#parameter-columns) columns string Specifies a comma-separated list of column names to return. If omitted, all columns are included.\nTip: use this to limit the result to specific columns, reducing datapoints cost of the call. \u200b  (#parameter-filters) filters string Expression to filter out rows from the results to return. This expression is similar to\na SQL WHERE clause. More details about it in the Filtering section of the doc.\nThis parameter is incompatible with sample_count. \u200b  (#parameter-ignore-max-datapoints-per-request) ignore_max_datapoints_per_request boolean There is a default 250,000 datapoints limit to make sure you don't accidentally spend all\nyour credits in one call. To ignore the max limit, you can add\nignore_max_datapoints_per_request=true \u200b  (#parameter-limit) limit integer Limit number of rows to return. This together with 'offset' allows easy pagination through\nresults in an incremental and efficient way. This parameter is incompatible\nwith sampling (sample_count). \u200b  (#parameter-offset) offset integer Offset row number to start (inclusive, first row means offset=0) returning results\nfrom. This together with 'limit' allows easy pagination through results in an\nincremental and efficient way. This parameter is incompatible with sampling (sample_count). \u200b  (#parameter-query-id) queryID integer required \u200b  (#parameter-sample-count) sample_count integer Number of rows to return from the result by sampling the data. This is useful when you\nwant to get a uniform sample instead of the entire result. If the result has less\nthan the sample count, the entire result is returned. Note that this will return a\nrandomized sample, so not every call will return the same result. This parameter is\nincompatible with  offset ,  limit , and  filters  parameters. \u200b  (#parameter-sort-by) sort_by string Expression to define the order in which the results should be returned. This expression\nis similar to a SQL ORDER BY clause. More details about it in the Sorting section of the doc. Response 200 - application/json \u200b  (#response-cancelled-at) cancelled_at string Timestamp of when the query execution was cancelled, if applicable. \u200b  (#response-execution-ended-at) execution_ended_at string Timestamp of when the query execution ended. \u200b  (#response-execution-id) execution_id string Unique identifier for the execution of the query. \u200b  (#response-execution-started-at) execution_started_at string Timestamp of when the query execution started. \u200b  (#response-expires-at) expires_at string Timestamp of when the query result expires. \u200b  (#response-is-execution-finished) is_execution_finished boolean Whether the state of the query execution is terminal. This can be used for polling purposes. \u200b  (#response-next-offset) next_offset integer Offset that can be used to retrieve the next page of results. \u200b  (#response-next-uri) next_uri string URI that can be used to fetch the next page of results. \u200b  (#response-query-id) query_id integer Unique identifier of the query. \u200b  (#response-result) result object The object containing the results and metadata of the query execution Show   child attributes \u200b  (#response-result-metadata) result. metadata object Metadata about the execution of the query, including details like column names,\nrow counts, and execution times. Show   child attributes \u200b  (#response-result-metadata-column-names) result.metadata. column_names string[] Names of the columns in the result set. \u200b  (#response-result-metadata-column-types) result.metadata. column_types string[] Types of the columns in the result set. \u200b  (#response-result-metadata-datapoint-count) result.metadata. datapoint_count integer Results cell count is used for billing/pricing plans\nhere we expose the these values to the user, so that they can track their costs \u200b  (#response-result-metadata-execution-time-millis) result.metadata. execution_time_millis integer Time in milliseconds that the query took to execute. \u200b  (#response-result-metadata-pending-time-millis) result.metadata. pending_time_millis integer Time in milliseconds that the query was pending before execution. \u200b  (#response-result-metadata-result-set-bytes) result.metadata. result_set_bytes integer ResultSetBytes represents the raw data bytes returned by the SQL execution engine, it includes: \n \n total nr of bytes used on 1 line with all the column names (the header of the result set) \n total nr of bytes for all the row values (the result set of rows) \n \n it doesn't include overheads such as the presence of column names for every row in the JSON result type.\nit also doesn't include opmitizations such as compression \u200b  (#response-result-metadata-row-count) result.metadata. row_count integer Number of rows in the result set for the current page of results. \u200b  (#response-result-metadata-total-result-set-bytes) result.metadata. total_result_set_bytes integer Total number of bytes in the result set. This doesn't include the json representation overhead. \u200b  (#response-result-metadata-total-row-count) result.metadata. total_row_count integer Number of rows in the result set for the entire result set. \u200b  (#response-result-rows) result. rows object[] A list of rows. A row is dictionary of key-value pairs returned by the query,\neach pair corresponding to a column Show   child attributes \u200b  (#response-result-rows-key) result.rows. {key} object \u200b  (#response-state) state string The state of the query execution. \u200b  (#response-submitted-at) submitted_at string Timestamp of when the query was submitted. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/evm/endpoint/contracts) Operator <> AVS Mapping  (/api-reference/eigenlayer/endpoint/operator_to_avs_mapping) Dune Farcaster Endpoints  (/api-reference/farcaster/introduction) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/api-reference/evm/endpoint/contracts#column-descriptions"}
{"content": "\u200b Prerequisites \n \n Python environment set up (check out  Anaconda Navigator  (https://docs.continuum.io/free/navigator/)  if you want somewhere to start.) \n Have a Dune API key (to obtain one  follow the steps here  (../overview/authentication#generate-an-api-key) ) \n \n ", "url": "https://docs.dune.com/api-reference/quickstart/results-eg#prerequisites"}
{"content": "\u200b Step 1: Prepare your Dune query \n Have a Dune query you\u2019d like to pull data from. Here, we\u2019ll use  this query  (https://dune.com/queries/3373921/5660178)  to get the DAI token balance for vitalik.eth. \n ", "url": "https://docs.dune.com/api-reference/quickstart/results-eg#step-1-prepare-your-dune-query"}
{"content": "\u200b Step 2: Install Dune Python SDK \n Ensure the  Dune Python SDK  (https://pypi.org/project/dune-client/)  is installed in your environment. You can install it using pip: \n pip install dune-client \n \n ", "url": "https://docs.dune.com/api-reference/quickstart/results-eg#step-2-install-dune-python-sdk"}
{"content": "\u200b Step 3: Get data from Dune query \n \u200b  (#import-packages) Import packages \n from  dune_client . types  import  QueryParameter \n from  dune_client . client  import  DuneClient \n from  dune_client . query  import  QueryBase \n # import other needed packages \n import  pandas  as  pd \n \n \u200b  (#set-up-a-dune-python-client) Set up a Dune Python client \n inline using .env file using .py file dune  =  DuneClient ( \n     api_key = '<paste your api key here>' , \n     base_url = \"https://api.dune.com\" , \n     request_timeout = 300   # request will time out after 300 seconds \n ) \n \n \u200b  (#get-query-result) Get query result \n You can choose to either get the latest query result without triggering an execution or to trigger an execution and get the result to ensure freshest data. \n Get latest result without execution Query a query   query_result  =  dune . get_latest_result ( 3373921 )   # get latest result in json format \n    # query_result = dune.get_latest_result_dataframe(3373921) # get latest result in Pandas dataframe format \n \n \n To paginate query results, please visit the  pagination page  (../executions/pagination)  to get more info. \n If you are using the  Python SDK  (https://github.com/duneanalytics/dune-client/tree/main) : \n \n For  higher level functions  (https://github.com/duneanalytics/dune-client/blob/main/dune_client/api/extensions.py)  like  run_query() , pagination is handled for you automatically behind the scene, so you will get the entire dataset as the returned result. You can pass in parameter  batch_size  to define the maximum number of rows per batch or pagination call. \n For  lower level functions  (https://github.com/duneanalytics/dune-client/blob/main/dune_client/api/execution.py)  like  get_execution_results() , you can pass in pagination parameters  limit  and  offset  directly, as instructed  here  (../executions/pagination#pagination-parameters) . \n \n \n \n Putting it all together import  dotenv ,  os \n from  dune_client . types  import  QueryParameter \n from  dune_client . client  import  DuneClient \n from  dune_client . query  import  QueryBase \n \n # change the current working directory where .env file lives \n os . chdir ( \"/Users/abc/project\" ) \n # load .env file \n dotenv . load_dotenv ( \".env\" ) \n # setup Dune Python client \n dune  =  DuneClient . from_env ( ) \n \n \"\"\" get the latest executed result without triggering a new execution \"\"\" \n query_result  =  dune . get_latest_result ( 3373921 )   # get latest result in json format \n # query_result = dune.get_latest_result_dataframe(3373921) # get latest result in Pandas dataframe format \n \n \n \"\"\"  query the query (execute and get latest result) \"\"\" \n query  =  QueryBase ( \n     query_id = 3373921 , \n \n      # uncomment and change the parameter values if needed \n      # params=[ \n      #     QueryParameter.text_type(name=\"contract\", value=\"0x6B175474E89094C44Da98b954EedeAC495271d0F\"), # default is DAI \n      #     QueryParameter.text_type(name=\"owner\", value=\"owner\"), # default using vitalik.eth's wallet  \n      # ], \n ) \n \n query_result  =  dune . run_query_dataframe ( \n   query = query \n    # , ping_frequency = 10 # uncomment to change the seconds between checking execution status, default is 1 second \n    # , performance=\"large\" # uncomment to run query on large engine, default is medium \n    # , batch_size = 5_000 # uncomment to change the maximum number of rows to retrieve per batch of results, default is 32_000 \n )   \n \n # Note: to get the result in csv format, call run_query_csv(); for json format, call run_query(). \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/quickstart/results-eg) Dune API Overview  (/api-reference/overview/introduction) Query Management  (/api-reference/quickstart/queries-eg) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Prerequisites  (#prerequisites) Step 1: Prepare your Dune query  (#step-1-prepare-your-dune-query) Step 2: Install Dune Python SDK  (#step-2-install-dune-python-sdk) Step 3: Get data from Dune query  (#step-3-get-data-from-dune-query) Import packages  (#import-packages) Set up a Dune Python client  (#set-up-a-dune-python-client) Get query result  (#get-query-result)", "url": "https://docs.dune.com/api-reference/quickstart/results-eg#step-3-get-data-from-dune-query"}
{"content": "\u200b How to Create a Custom Endpoint \n \n \n \n The custom endpoint shares the same refresh schedule as the underlying query. Changing the query schedule will also change the endpoint schedule, and vice versa. See  scheduling queries  (../../web-app/query-editor/query-scheduler)  for more info. \n All your custom endpoints can be found in  Library  >  Custom endpoints . \n \n You can only create endpoints from queries you own. Creating endpoints from others\u2019 queries can lead to changes in the logic without notification, breaking your data consumption pipeline. \n \n Leverage  Filtering  (../executions/filtering) ,  Sorting  (../executions/sorting) , and  Sampling  (../executions/sampling)  to flexibly grab query results. \n Use  Pagination  (../executions/pagination)  to handle large results. \n \n ", "url": "https://docs.dune.com/api-reference/custom/overview#how-to-create-a-custom-endpoint"}
{"content": "\u200b Credits Consumption \n Custom endpoints consume credits in two ways: \n \n Refresh schedule:  Credits are consumed based on the engine size (e.g., 10 credits per refresh for medium, 20 credits for large). The monthly credit consumption is shown during endpoint creation. \n Data fetch:  Credits are charged based on the datapoints read from the endpoint. Utilize result filtering to consume fewer credits by reading fewer datapoints. \n \n For more information on credits, visit  this page  (../../learning/how-tos/credit-system-on-dune) . Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/custom/overview) FAQ  (/api-reference/overview/faq) Overview  (/api-reference/executions/execution-object) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page How to Create a Custom Endpoint  (#how-to-create-a-custom-endpoint) Credits Consumption  (#credits-consumption)", "url": "https://docs.dune.com/api-reference/custom/overview#credits-consumption"}
{"content": "\u200b Column Descriptions \n Column Description Type request_time Time of request timestamp response_time Time of response timestamp wallet_address Wallet address string chain Name of blockchain of token string address ERC20 contract address or blockchain name for native token string amount Amount of token owned in WEI double symbol Symbol of token, if avilable string decimals Decimals of token, if available double price_usd Current price of token, if available double value_usd Current value of token owned, if available double pool_size Current size of pool used to price token double low_liquidity If the size of the pool is less than $10k boolean \n ", "url": "https://docs.dune.com/echo/evm/balances#column-descriptions"}
{"content": "\u200b Token prices \n Echo looks up prices onchain. We use the most liquid onchain pair to determine a usd price. We return the available liquidity in  pool_size  as part of the response, and show a warning  low_liquidity:\ttrue  if this value is less than $10k. \n ", "url": "https://docs.dune.com/echo/evm/balances#token-prices"}
{"content": "\u200b Spam tokens \n By default the API filters out any token with  symbol = '' ,  symbol.length > 15 ,  name = ''  or  decimals = 0 .\nWhen the  ?exclude_spam_tokens  is specified we use  this query  (https://dune.com/queries/3804603)  to determine if something is spam. Additionally, we remove any token with less than $100 of onchain liquidity. \n ", "url": "https://docs.dune.com/echo/evm/balances#spam-tokens"}
{"content": "\u200b Pagination \n This endpoint is using cursor based pagination. You can use the  limit  parameter to define the maximum page size.\nResults might at times be less than the maximum page size.\nThe  next_offset  value is passed back by the initial response and can be used to fetch the next page of results, by passing it as the  offet  query parameter in the next request. \n You can only use the value from  next_offset  to set the  offset  parameter of the next page of results. Using your own  offset  value will not have any effect. Headers \u200b  (#parameter-x-dune-api-key) X-Dune-Api-Key string required API key to access the service Path Parameters \u200b  (#parameter-address) address string required Wallet to get balances for Query Parameters \u200b  (#parameter-chain-ids) chain_ids string | null Either 'all' or a comma separated list of chain ids to get balances for \u200b  (#parameter-exclude-spam-tokens) exclude_spam_tokens string | null Specify this to exclude spam tokens from the response \u200b  (#parameter-filters) filters string | null Specify  ERC20  or  NATIVE  to get only ERC20 tokens or native assets, respectively \u200b  (#parameter-metadata) metadata string | null A comma separated list of additional metadata fields to include for each token. Supported values:  logo ,  url \u200b  (#parameter-offset) offset string | null The offset to paginate through result sets. This is a cursor being passed from the previous response, only use what the backend returns here. \u200b  (#parameter-limit) limit integer | null Maximum number of transactions to return Required range:  x > 0 Response 200 - application/json \u200b  (#response-balances) balances object[] required Show   child attributes \u200b  (#response-balances-address) balances. address string required \u200b  (#response-balances-amount) balances. amount string required \u200b  (#response-balances-chain) balances. chain string required \u200b  (#response-balances-chain-id) balances. chain_id integer \u200b  (#response-balances-decimals) balances. decimals integer | null \u200b  (#response-balances-price-usd) balances. price_usd number | null \u200b  (#response-balances-symbol) balances. symbol string | null \u200b  (#response-balances-token-metadata) balances. token_metadata object Show   child attributes \u200b  (#response-balances-token-metadata-logo) balances.token_metadata. logo string | null \u200b  (#response-balances-token-metadata-url) balances.token_metadata. url string | null \u200b  (#response-balances-value-usd) balances. value_usd number | null \u200b  (#response-response-time) response_time string required \u200b  (#response-wallet-address) wallet_address string required \u200b  (#response-errors) errors object Show   child attributes \u200b  (#response-errors-token-errors) errors. token_errors object[] required Show   child attributes \u200b  (#response-errors-token-errors-address) errors.token_errors. address string required \u200b  (#response-errors-token-errors-chain-id) errors.token_errors. chain_id integer required \u200b  (#response-errors-token-errors-description) errors.token_errors. description string \u200b  (#response-next-offset) next_offset string | null \u200b  (#response-request-time) request_time string | null Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /echo/evm/balances) Overview  (/echo/overview) Supported Chains (Token Balances)  (/echo/evm/balances-chains) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/echo/evm/balances#pagination"}
{"content": "\u200b Generate an API key \n In order to generate a new API key, go to settings -> API -> create new API key. \n \n Dune has two types of account:  user  account and  team  account. A team can have many users. A user can join many teams. \n Each user or team account has its own context. Queries created under a team account can only be managed within the team account context. \n An API key belongs to a specific context, and is either associated with a user account or a team account. \n New : Scoped API keys can now be created to allow access only to specific endpoints. See the section below on \u201cScope of a Key.\u201d \n \n Create key for user account Create key for team account \n \n Never share your secret API keys in public repositories or other accessible areas. \n ", "url": "https://docs.dune.com/api-reference/overview/authentication#generate-an-api-key"}
{"content": "\u200b Permissions \n When creating an API key, you can now choose between two permission levels to control which endpoints the key can access: \n \n All endpoints: This option grants full access to all API endpoints, including Developer APIs, executions, results, queries, tables, and materialized views. This is the default setting. \n Only Developer APIs: Limits access to only  Dune\u2019s real-time APIs  (../../echo/overview) , such as the Tokens API and Balances API. \n \n You can select the appropriate level of access when creating a new API key in the settings under API -> Create API key. \n ", "url": "https://docs.dune.com/api-reference/overview/authentication#permissions"}
{"content": "\u200b Context of a key \n As mentioned above, a team API key only has access to team account resources and not user account resources. This can be especially relevant when you use Query endpoints. \n ", "url": "https://docs.dune.com/api-reference/overview/authentication#context-of-a-key"}
{"content": "\u200b Authentication & making API calls \n You can authenticate either with the API header or with query parameter to start making API calls. We illustrate below with  execute query endpoint  (../executions/endpoint/execute-query)  as an example. \n Header Authentication Query Parameter Authentication To authenticate via the API header, include an  x-dune-api-key  property in your request header. cURL (bash) Python JavaScript Go PHP Java curl   -X  POST  -H  x-dune-api-key: { { api_key } }   \"https://api.dune.com/api/v1/query/{{query_id}}/execute\" \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/overview/authentication) Tables Management  (/api-reference/quickstart/tables-eg) Client SDKs  (/api-reference/overview/sdks) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Generate an API key  (#generate-an-api-key) Permissions  (#permissions) Context of a key  (#context-of-a-key) Authentication & making API calls  (#authentication-and-making-api-calls)", "url": "https://docs.dune.com/api-reference/overview/authentication#authentication-and-making-api-calls"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Executions and Results Overview Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Overview  (/api-reference/executions/execution-object) POST Execute Query  (/api-reference/executions/endpoint/execute-query) POST Cancel Execution  (/api-reference/executions/endpoint/cancel-execution) GET Get Execution Status  (/api-reference/executions/endpoint/get-execution-status) GET Get Execution Result  (/api-reference/executions/endpoint/get-execution-result) GET Get Execution Result in CSV  (/api-reference/executions/endpoint/get-execution-result-csv) GET Get Latest Query Result  (/api-reference/executions/endpoint/get-query-result) GET Get Latest Query Result in CSV  (/api-reference/executions/endpoint/get-query-result-csv) Queries Materialized Views Webhooks Data Management Endpoints Tables Preset Endpoints DEX EigenLayer EVM Contracts Farcaster Markets Projects Executions and Results Overview The executions and results endpoints facilitate the execution of saved queries, retrieval of results in various formats, and management of query executions. \n ", "url": "https://docs.dune.com/api-reference/executions/execution-object"}
{"content": "\u200b Queries, Executions, and Results \n Results are linked to executions, and executions are tied to queries. Each execution has an  execution_id . An  execution_id  is generated when you initiate the execution of a query through the  execute query  (./endpoint/execute-query)  endpoint. \n Unlike a  query_id , which identifies a specific query, an  execution_id  represents a particular execution of that query. With an  execution_id , you can monitor the execution\u2019s status using the  check status  (./endpoint/get-execution-status)  endpoint. The status can be one of the following: pending, success, or failure. \n If an execution is successful, you can get the result using  get result  (./endpoint/get-execution-result) . Results are saved and can be retrieved multiple times.\nResults data from an execution are stored with an expiration date of 90 days (subject to change). This is visible on the API response on the \u201cexpires_at\u201d field in the execution status and results json body (not on the CSV endpoint). \n \n Save your  execution_id  for later use without re-executing. \n Use the  get latest query result  (./endpoint/get-query-result)  endpoint to fetch the most recent result. \n Understanding the differences and relationships between query results filters, schedules, executions, and params is crucial. Further details are provided below. \n \n ", "url": "https://docs.dune.com/api-reference/executions/execution-object#queries-executions-and-results"}
{"content": "\u200b Query Filters vs. Execution Parameters \n Two primary methods exist for fetching data from the Dune API while applying specific conditions: \n \n Option 1 : Utilize filters with the latest query result and employ schedules to maintain data freshness. \n \n Obtain the  query_id . \n Use  get latest query result  (./endpoint/get-query-result)  endpoint to access the most recent results. \n Apply  filters  (./filtering)  for desired data subsets. \n Implement schedules for maintaining data freshness. \n \n Option 2 : Execute a query with parameters to retrieve the desired subset of data. \n \n Obtain the  query_id . \n Use  execute query  (./endpoint/execute-query)  endpoint with parameters to trigger fresh execution. \n Grab the  execution_id  from the response. \n Fetch results via  get execution result  (./endpoint/get-execution-result)  endpoint using the  execution_id . \n \n ", "url": "https://docs.dune.com/api-reference/executions/execution-object#query-filters-vs-execution-parameters"}
{"content": "\u200b Choosing Between Options \n \n Option 1 offers speed, as it builds upon existing results with filters. Use it when quick results are essential. \n Option 2 allows dynamic parameter passing for fresh executions. Employ it when real-time parameterization is required. \n \n ", "url": "https://docs.dune.com/api-reference/executions/execution-object#choosing-between-options"}
{"content": "\u200b Endpoints \n Below is an overview of each endpoint, providing a high-level understanding of their functionalities. \n Endpoint Title Endpoint Description Cancel Execution  (./endpoint/cancel-execution) POST /v1/execution/{execution_id}/cancel Cancels an ongoing query execution. Requires the  execution_id . Returns a success boolean. Execute Query  (./endpoint/execute-query) POST /v1/query/{query_id}/execute Triggers an execution based on the  query_id . Returns a  execution_id . Get Execution Status  (./endpoint/get-execution-status) GET /v1/execution/{execution_id}/status Provides the status of a query execution give an  execution_id . Get Execution Result in CSV  (./endpoint/get-execution-result-csv) GET /v1/execution/{execution_id}/results/csv Retrieves the status, metadata, and results in CSV format. Includes data retention and limit information. Get Execution Result  (./endpoint/get-execution-result) GET /v1/execution/{execution_id}/results Fetches the execution status, metadata, and results in JSON format. Similar data handling as CSV endpoint. Get Latest Query Result in CSV  (./endpoint/get-query-result-csv) GET /v1/query/{query_id}/results/csv Returns the latest results of a query in CSV format, irrespective of the execution method. Queries must be public or owned. Get Latest Query Result  (./endpoint/get-query-result) GET /v1/query/{query_id}/results Similar to the CSV endpoint but returns results in JSON format. Follows the same access and data limit policies. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/executions/execution-object) Overview  (/api-reference/custom/overview) Execute Query  (/api-reference/executions/endpoint/execute-query) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Queries, Executions, and Results  (#queries-executions-and-results) Query Filters vs. Execution Parameters  (#query-filters-vs-execution-parameters) Choosing Between Options  (#choosing-between-options) Endpoints  (#endpoints)", "url": "https://docs.dune.com/api-reference/executions/execution-object#endpoints"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Webhooks Create Webhook Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Queries Materialized Views Webhooks Create Webhook  (/api-reference/webhooks/webhook) Data Management Endpoints Tables Preset Endpoints DEX EigenLayer EVM Contracts Farcaster Markets Projects Webhooks Create Webhook How to receive data into webhooks from Dune queries You can send Dune data to a webhook by going to any query your own, and pressing the \u201cschedule\u201d button to the left of \u201cRun\u201d in the editor. You\u2019ll the popup below, where you can paste in a webhook url and receive data on a scheduled interval. \n A good use case for this is sending data to a Slack webhook, which you can  learn to do here  (https://api.slack.com/messaging/webhooks) . \n \n You can quickly test the output with a webhook generator  like this one  (https://webhook.site/#!/) . \n Here is an example schema sent to the webhook from this  Jupiter swap fees query  (https://dune.com/queries/3106864) : \n { \n   \"message\": \"Query Jupiter Fees was submitted for execution at Wed, 17 Jan 2024 04:18:49 GMT by your query schedule and it was successfully executed with a non-empty result.\\nYou can check its latest result here: https://dune.com/queries/3106864?utm_source=webhook&utm_campaign=alerts\", \n   \"query_result\": { \n     \"execution_id\": \"01HMAT9AB8JRV1NQR1W6NMYQK7\", \n     \"query_id\": 3106864, \n     \"state\": \"QUERY_STATE_COMPLETED\", \n     \"submitted_at\": \"2024-01-17T04:18:49Z\", \n     \"expires_at\": \"2024-04-16T04:20:57Z\", \n     \"execution_started_at\": \"2024-01-17T04:18:49Z\", \n     \"execution_ended_at\": \"2024-01-17T04:20:57Z\", \n     \"result\": { \n       \"data_uri\": \"https://api.dune.com/api/v1/execution/01HMAT9AB8JRV1NQR1W6NMYQK7/results\", \n       \"metadata\": { \n         \"column_names\": [ \n           \"week\", \n           \"fee_usd\" \n         ], \n         \"result_set_bytes\": 1164, \n         \"total_row_count\": 25, \n         \"datapoint_count\": 50, \n         \"pending_time_millis\": 40, \n         \"execution_time_millis\": 127845 \n       } \n     } \n   }, \n   \"visualizations\": [ \n     { \n       \"title\": \"Chart\", \n       \"image_url\": \"https://prod-dune-media.s3.eu-west-1.amazonaws.com/screenshots/3106864/01HMAT9AB8JRV1NQR1W6NMYQK7/5222108.png\" \n     } \n   ] \n } \n \n You\u2019ll need to GET query the  data_uri  with your api key to get the results data. This is the same as passing the  execution_id  into  get execution result  (/api-reference/executions/endpoint/get-execution-result) . \n In the case the query errors out on its scheduled run, you won\u2019t receive anything to the webhook. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/webhooks/webhook) Refresh Materialized View  (/api-reference/materialized-views/refresh) Overview  (/api-reference/tables/endpoint/overview) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/api-reference/webhooks/webhook"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Client SDKs Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Queries Materialized Views Webhooks Data Management Endpoints Tables Preset Endpoints DEX EigenLayer EVM Contracts Farcaster Markets Projects Client SDKs ", "url": "https://docs.dune.com/api-reference/overview/sdks"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Rate Limits Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Queries Materialized Views Webhooks Data Management Endpoints Tables Preset Endpoints DEX EigenLayer EVM Contracts Farcaster Markets Projects Rate Limits Rate Limits \n Our rate limits are implemented in three ways: IP, low vs. high limit endpoints and  subscription plan  (https://dune.com/pricing) . \n \n Low limit endpoints  (write-heavy operations) \n \n create query  (../queries/endpoint/create) \n update query  (../queries/endpoint/update) \n private query  (../queries/endpoint/private) \n unprivate query  (../queries/endpoint/unprivate) \n archive query  (../queries/endpoint/archive) \n unarchive query  (../queries/endpoint/unarchive) \n execute query  (../executions/endpoint/execute-query) \n create table  (../tables/endpoint/create) \n insert into table  (../tables/endpoint/insert) \n upload CSV  (../tables/endpoint/upload) \n delete table  (../tables/endpoint/delete) \n \n \n High limit endpoints  (read-heavy operations) \n \n read query  (../queries/endpoint/read) \n get execution result  (../executions/endpoint/get-execution-result) \n get execution result CSV  (../executions/endpoint/get-execution-result-csv) \n get execution status  (../executions/endpoint/get-execution-status) \n cancel execution  (../executions/endpoint/cancel-execution) \n \n \n \n Dimension Limit Per IP 1000 requests per second (rps) Free Low limit 15 requests per minute (rpm) Free High limit 40 rpm Plus Low limit 70 rpm Plus High limit 200 rpm Premium Low limit 350 rpm Premium High limit 1000 rpm Enterprise Please contact us! \n Rate limits for different dimensions are separate but can be utilized independently.\nFor example, on the Free plan, you have a low limit of 15 requests per minute and a high limit of 40 requests per minute. You can use both types of requests in the same minute, effectively having a combined limit of 55. \n Data Return Limit \n Dune internally has a maximum query result size limit (which currently is 8GB, but subject to increase in the future). If your query yields more than 8GB of data, the result will be truncated in storage. In such cases, pulling the result data (using pagination) but without specifying  allow_partial_results  set to true will trigger an error message: \u201cerror\u201d: \u201cPartial Result, please request with \u2018allows_partial_results=true\u2019\u201d. If you wish to retrieve partial results, you can pass the parameter  allow_partial_results=true . But please make sure you indeed want to fetch the truncated result. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/overview/rate-limits) Sampling  (/api-reference/executions/sampling) Troubleshooting Errors  (/api-reference/overview/troubleshooting) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/api-reference/overview/rate-limits"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation FAQ Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Queries Materialized Views Webhooks Data Management Endpoints Tables Preset Endpoints DEX EigenLayer EVM Contracts Farcaster Markets Projects FAQ \u200b  (#what-are-the-differences-between-the-dune-api-and-the-dune-web-app) What are the differences between the Dune API and the Dune web app? \n There are no major performance differences within a specific performance tier when used through the Dune API or Dune web app. \n The Dune API gives you programmatic access to the capabilities and data sets that can already be accessed from the Dune web app. The same queries and results exist in the web app, even if created/executed from the API (and vice versa). \n \u200b  (#how-many-requests-per-minute-can-i-make) How many Requests Per Minute can I make? \n The API rate limit currently varies by  subscription plan  (https://dune.com/pricing) . It\u2019s currently 40 per minute on free, 200 per minute on plus, and 1000 per minute on premium. \n \u200b  (#does-dune-support-graphql-on-endpoints) Does Dune support GraphQL on endpoints? \n No, we currently don\u2019t support GraphQL queries. \n \u200b  (#how-do-i-paginate-on-my-query-results) How do I paginate on my query results? \n You currently cannot paginate through the API, we are working on enabling this soon. For now, try and use LIMIT and OFFSET in your query with parameters to paginate manually. \n \u200b  (#are-there-specified-slas) Are there specified SLAs? \n SLAs are only available on Enterprise pricing plans. \n \u200b  (#how-do-i-find-a-query-id) How do I find a query id? \n When navigating to a query, it\u2019s the first number after \u201c/queries/\u201d in the URL. For example in  https://dune.com/queries/241/388 , \u201c241\u201d is the query id. \n \u200b  (#does-the-api-support-query-parameters) Does the API support Query Parameters? \n Yes, check out  this page  (../queries/endpoint/query-object) . \n \u200b  (#what-is-the-execution-timeout-limit-and-can-i-request-a-longer-limit) What is the execution timeout limit and can I request a longer limit? \n The query execution timeout limit matches the Dune web app - 30 minutes. You can\u2019t request a longer limit. \n \u200b  (#what-is-the-difference-between-the-states-executing-and-pending) What is the difference between the states \u201cExecuting\u201d and \u201cPending\u201d? \n Pending means, the execution is waiting for an available execution connection slot. \n Executing means the query is currently executing against the database. \n \u200b  (#can-i-ingest-data-by-getting-a-direct-connection-to-the-database-instead) Can I ingest data by getting a direct connection to the database instead? \n Not currently. \n \u200b  (#are-query-results-data-saved-for-faster-retrieval) Are query results data saved for faster retrieval? \n Yes! \n \u200b  (#how-long-are-the-results-data-from-an-execution-stored-for) How long are the results data from an execution stored for? \n The results storage period can be found on the API response on the \u201cexpires_at\u201d field in the execution status and results body. \n \u200b  (#how-do-i-import-dune-data-into-a-google-sheet) How do I import Dune data into a google sheet? \n Use \u201cImport Data\u201d to import your CSV results into a google sheet using \u201capi_key\u201d as a param. (We advise against doing this any public document where your API key can be viewed and compromised.)\n =importData(\"https://api.dune.com/api/v1/query/{{query_id}}/results/csv?api_key={{api_key}}\") . Then,  schedule a query execution  (https://dune.com/docs/app/query-editor/query-scheduler/?h=scheduling)  to have your results regularly updated on a set schedule. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/overview/faq) Billing  (/api-reference/overview/billing) Overview  (/api-reference/custom/overview) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page What are the differences between the Dune API and the Dune web app?  (#what-are-the-differences-between-the-dune-api-and-the-dune-web-app) How many Requests Per Minute can I make?  (#how-many-requests-per-minute-can-i-make) Does Dune support GraphQL on endpoints?  (#does-dune-support-graphql-on-endpoints) How do I paginate on my query results?  (#how-do-i-paginate-on-my-query-results) Are there specified SLAs?  (#are-there-specified-slas) How do I find a query id?  (#how-do-i-find-a-query-id) Does the API support Query Parameters?  (#does-the-api-support-query-parameters) What is the execution timeout limit and can I request a longer limit?  (#what-is-the-execution-timeout-limit-and-can-i-request-a-longer-limit) What is the difference between the states \u201cExecuting\u201d and \u201cPending\u201d?  (#what-is-the-difference-between-the-states-executing-and-pending) Can I ingest data by getting a direct connection to the database instead?  (#can-i-ingest-data-by-getting-a-direct-connection-to-the-database-instead) Are query results data saved for faster retrieval?  (#are-query-results-data-saved-for-faster-retrieval) How long are the results data from an execution stored for?  (#how-long-are-the-results-data-from-an-execution-stored-for) How do I import Dune data into a google sheet?  (#how-do-i-import-dune-data-into-a-google-sheet)", "url": "https://docs.dune.com/api-reference/overview/faq"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Tables Overview Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Queries Materialized Views Webhooks Data Management Endpoints Tables Overview  (/api-reference/tables/endpoint/overview) POST Create Table  (/api-reference/tables/endpoint/create) POST Insert Data  (/api-reference/tables/endpoint/insert) POST Upload CSV  (/api-reference/tables/endpoint/upload) POST Clear Data  (/api-reference/tables/endpoint/clear) DEL Delete Table  (/api-reference/tables/endpoint/delete) Preset Endpoints DEX EigenLayer EVM Contracts Farcaster Markets Projects Tables Overview These table management endpoints help you programmatically upload data to Dune and manage tables via the API. \n To upload data, while you can use the  /upload endpoint  (./upload) , consider using the  /create  (./create)  and  /insert  (./insert)  endpoints for more flexibility, performance, and the ability to append. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/tables/endpoint/overview) Create Webhook  (/api-reference/webhooks/webhook) Create Table  (/api-reference/tables/endpoint/create) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/api-reference/tables/endpoint/overview"}
{"content": "\u200b Python \n We currently support a  Python SDK  (https://github.com/duneanalytics/dune-client)  for working with our API. You\u2019ll find  Python SDK  snippets on all endpoint pages, if you want to go deeper into the code then check out  these files  (https://github.com/duneanalytics/dune-client/tree/main/dune_client/api) . \n To still the SDK, run the following command in your terminal: \n pip  install  dune-client \n \n Be sure you are using the latest release. You can find all release versions  here  (https://github.com/duneanalytics/dune-client/releases)  - there may be code added to the repo that has not been put into a release yet. \n You will commonly work with the  QueryBase  class which can be created like this: \n from  dune_client . types  import  QueryParameter \n from  dune_client . client  import  DuneClient \n from  dune_client . query  import  QueryBase \n \n query  =  QueryBase ( \n     name = \"Sample Query\" , \n     query_id = 1215383 , \n     params = [ \n         QueryParameter . text_type ( name = \"TextField\" ,  value = \"Word\" ) , \n         QueryParameter . number_type ( name = \"NumberField\" ,  value = 3.1415926535 ) , \n         QueryParameter . date_type ( name = \"DateField\" ,  value = \"2022-05-04 00:00:00\" ) , \n         QueryParameter . enum_type ( name = \"EnumField\" ,  value = \"Option 1\" ) , \n      ] , \n ) \n print ( \"Results available at\" ,  query . url ( ) ) \n \n The query object is defined as  QueryBase  and all properties can be found  in this file  (https://github.com/duneanalytics/dune-client/blob/main/dune_client/query.py) . \n Other classes such as execution results can be  found here  (https://github.com/duneanalytics/dune-client/blob/main/dune_client/models.py#L244C7-L244C22) , detailing operations like  ResultsResponse.get_rows()  for getting the data out of a GET request. \n If you are trying to load data into a Pandas DataFrame, you can use the following function from the sdk. \n results_df  =  dune . run_query_dataframe ( query ) \n \n ", "url": "https://docs.dune.com/api-reference/overview/sdks#python"}
{"content": "\u200b Typescript \n We have a community client from that can be  found here  (https://www.npmjs.com/package/@duneanalytics/client-sdk) . \n To install, run this command \n yarn   add  @duneanalytics/client-sdk \n \n Currently this client only supports the execution based endpoints, and not Query Endpoints or uploads. Here is an example query: \n import   {  QueryParameter ,  DuneClient  }   from   \"@duneanalytics/client-sdk\" ; \n const   {   DUNE_API_KEY   }   =  process . env ; \n \n const  client  =   new   DuneClient ( DUNE_API_KEY   ??   \"\" ) ; \n const  queryID  =   1215383 ; \n const  params  =   { \n   query_parameters  =   [ \n     QueryParameter . text ( \"TextField\" ,   \"Plain Text\" ) , \n     QueryParameter . number ( \"NumberField\" ,   3.1415926535 ) , \n     QueryParameter . date ( \"DateField\" ,   \"2022-05-04 00:00:00\" ) , \n     QueryParameter . enum ( \"ListField\" ,   \"Option 1\" ) , \n    ] \n } ; \n \n client \n    . runQuery ( queryID ,  params ) \n    . then ( ( executionResult )   =>   console . log ( executionResult . result ?. rows ) ) ; \n Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/overview/sdks) Authentication  (/api-reference/overview/authentication) Pagination  (/api-reference/executions/pagination) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Python  (#python) Typescript  (#typescript)", "url": "https://docs.dune.com/api-reference/overview/sdks#typescript"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Farcaster Dune Farcaster Endpoints Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Queries Materialized Views Webhooks Data Management Endpoints Tables Preset Endpoints DEX EigenLayer EVM Contracts Farcaster Dune Farcaster Endpoints  (/api-reference/farcaster/introduction) GET Farcaster Channels  (/api-reference/farcaster/endpoint/farcaster_channels) GET Farcaster Memecoins  (/api-reference/farcaster/endpoint/farcaster_memecoins) GET Farcaster Users  (/api-reference/farcaster/endpoint/farcaster_users) Markets Projects Farcaster Dune Farcaster Endpoints While you can create/use any query as an API endpoint, we\u2019ve defined three popular queries as custom endpoints (so you don\u2019t need to worry about executions or editing SQL). You should use these endpoints to provide better data to inform your algorithims, recomendations, or UI elements. \n Trending Farcaster Users Get trending users, based on farcaster engagement and onchain activity  (/api-reference/farcaster/endpoint/farcaster_users) Trending Farcaster Channels Get trending channels, based on user tiers, onchain activity, and engagement.  (/api-reference/farcaster/endpoint/farcaster_channels) Trending Farcaster Memecoins Get trending memecoins, based on engagement, holders, liquidity, volume, and more.  (/api-reference/farcaster/endpoint/farcaster_memecoins) Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/farcaster/introduction) Trending Contracts  (/api-reference/evm/endpoint/contracts) Farcaster Channels  (/api-reference/farcaster/endpoint/farcaster_channels) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/api-reference/farcaster/introduction"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Troubleshooting Errors Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Queries Materialized Views Webhooks Data Management Endpoints Tables Preset Endpoints DEX EigenLayer EVM Contracts Farcaster Markets Projects Troubleshooting Errors Dune uses conventional HTTP response codes to indicate the success or failure of an API request. In general: Codes in the  2xx  range indicate success. Codes in the  4xx  range indicate an error that failed given the information provided. Codes in the  5xx  range indicate an error with Dune\u2019s servers. \n HTTP Status Code Status Description 200 OK Everything worked as expected. 400 Bad Request The request was unacceptable, often due to missing a required parameter. 401 Unauthorized No valid API key provided. 402 Payment Required This request would exceed your configured limits per billing cycle. 403 Forbidden The API key doesn\u2019t have permissions to perform the request. 404 Not Found The requested resource doesn\u2019t exist. 409 Conflict The request conflicts with another request. 429 Too Many Requests Too many requests hit the API too quickly (rate limited). 500 Server Errors Generic internal server error. \n For specific error code information, please refer to each of the endpoint itself. Here we list some common errors and suggest possible solution: \n \u200b  (#invalid-api-key) Invalid API key \n { \n    \"error\" :   \"invalid API Key\" \n } \n \n You did not input a valid API key. You can go generate a new key and make sure you save it in a safe place and paste the key over. \n \u200b  (#permission-error) Permission error \n { \n \"error\" :   \"not found: Query not found or private\" \n } \n \n When you perform an action to a private query your API key doesn\u2019t have access to, you will get this error. If you indeed own this query, please check the context of the API key and the query owner are the same. \n \u200b  (#credit-limit-error) Credit limit error \n { \n    \"error\" :   \"This api request would exceed your configured limits per billing cycle. Please visit your settings on dune.com and adjust your limits to continue usage.\" \n } \n \n You are trying to make a request but don\u2019t have enough credits (configured) on your account. If you\u2019d like to incur overage, head over to settings -> subscription and adjust the limit you have set within \u201climit extra credits\u201d toggle. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/overview/troubleshooting) Rate Limits  (/api-reference/overview/rate-limits) Billing  (/api-reference/overview/billing) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Invalid API key  (#invalid-api-key) Permission error  (#permission-error) Credit limit error  (#credit-limit-error)", "url": "https://docs.dune.com/api-reference/overview/troubleshooting"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Queries Overview Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Queries Overview  (/api-reference/queries/endpoint/query-object) POST Create Query  (/api-reference/queries/endpoint/create) GET Read Query  (/api-reference/queries/endpoint/read) PATCH Update Query  (/api-reference/queries/endpoint/update) POST Archive Query  (/api-reference/queries/endpoint/archive) POST Unarchive Query  (/api-reference/queries/endpoint/unarchive) POST Private Query  (/api-reference/queries/endpoint/private) POST Unprivate Query  (/api-reference/queries/endpoint/unprivate) Materialized Views Webhooks Data Management Endpoints Tables Preset Endpoints DEX EigenLayer EVM Contracts Farcaster Markets Projects Queries Overview These query management endspoints help you programmatically create and manage Dune SQL queries via the API, ideal for integration with GitHub or other CI/CD pipelines. \n ", "url": "https://docs.dune.com/api-reference/queries/endpoint/query-object"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Markets Marketplace Market Share Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Dune API Overview  (/api-reference/overview/introduction) API Quickstart Authentication  (/api-reference/overview/authentication) Client SDKs  (/api-reference/overview/sdks) Result Filtering Rate Limits  (/api-reference/overview/rate-limits) Troubleshooting Errors  (/api-reference/overview/troubleshooting) Billing  (/api-reference/overview/billing) FAQ  (/api-reference/overview/faq) Custom Endpoints Overview  (/api-reference/custom/overview) SQL Endpoints Executions and Results Queries Materialized Views Webhooks Data Management Endpoints Tables Preset Endpoints DEX EigenLayer EVM Contracts Farcaster Markets GET Marketplace Market Share  (/api-reference/markets/endpoint/marketplace_marketshare) Projects Markets Marketplace Market Share Given a chain, get the market share in terms of USD transacting\nvolume and number of trades for either  dex  or  nft  sector. GET / v1 / marketshare / {market} / {chain} Try it \n Query can be found  here  (https://dune.com/queries/3575029) \n Chains included are: all  EVM chains on Dune  (data-catalog/evm/overview) \n Scheduled to update every day (23:30 UTC) \n You can apply  filters  (../../executions/filtering)  like WHERE, IN, AND/OR upon results \n \n ", "url": "https://docs.dune.com/api-reference/markets/endpoint/marketplace_marketshare"}
{"content": "Dune Docs  home page  (/) Search or ask... Search... Navigation Getting Started with Datashare Get Started  (/home) Web App  (/web-app/overview) Query Engine  (/query-engine/overview) Data Catalog  (/data-catalog/overview) SQL API Reference  (/api-reference/overview/introduction) Echo  (/echo/overview) Datashare  (/datashare/datashare) Blockchain Integrations  (/catalyst/overview) Overview  (/datashare/datashare) Getting Started  (/datashare/datashare-trial) FAQs  (/datashare/datashare-faqs) Getting Started with Datashare Interested in Dune Datashare? Test out our data on Snowflake! Dune\u2019s vast data catalog can make getting started with Datashare feel daunting. With this in mind, we have created flexible trial data on Snowflake that are available and easily accessible by any Snowflake user. Follow the step-by-step setup guide below to begin! \n ", "url": "https://docs.dune.com/datashare/datashare-trial"}
{"content": "\u200b Queries \n Queries all have a  query id  which is returned when you read/create a query. You can also find it within a url, i.e.  https://dune.com/queries/<query_id>/<visualization_id> . \n Each query comes with fields you can edit such as: \n \n name : query name text \n description : query description text \n query_sql : the raw sql text \n params : parameters within the query, using the  {{ foo }}  syntax. See the section below for more details. \n is_private : boolean for if query is private or not. Private queries cannot be found or queried by others. \n archived : boolean for if query is archived or not. Archived queries cannot run or edited by anyone. \n \n ", "url": "https://docs.dune.com/api-reference/queries/endpoint/query-object#queries"}
{"content": "\u200b Query Parameters \n There are four kinds of parameters you can use in a Dune query (these are not API parameters). \n \n number \n text \n date \n enum (called a list in the UI) \n \n For passing these parameters through the API request body, you can use the following format for executions: \n { \n \"foo\" :   \"value\" , \n \"bar\" : 1000 ,   \n \"baz\" :   \"2020-12-01T01:20:30Z\" \n } \n \n Where \u201cfoo\u201d, \u201cbar\u201d, and \u201cbaz\u201d are three params in a query. If you leave one out, it goes with the default param valiue. \n For Queries endpoints, you\u2019ll need to define the type and more: \n [ \n      { \n          \"key\" :   \"block_time_start\" , \n          \"type\" :   \"datetime\" , \n          \"value\" :   \"2017-01-01 00:00:00\" \n      } , \n      { \n          \"key\" :   \"from\" , \n          \"type\" :   \"text\" , \n          \"value\" :   \"0xae2fc483527b8ef99eb5d9b44875f005ba1fae13\" \n      } , \n      { \n          \"key\" :   \"limit\" , \n          \"type\" :   \"number\" , \n          \"value\" :   \"20\" \n      } , \n      { \n          \"key\" :   \"type\" , \n          \"type\" :   \"enum\" , \n          \"value\" :   \"DynamicFee\" , \n          \"enumOptions\" :   [ \n              \"DynamicFee\" , \n              \"Legacy\" \n          ] \n      } \n ] \n \n Note that the  datetime  parameter type requires you use the syntax  timestamp '{{block_time_start}}'  to cast the parameter to a timestamp. \n If you are using bytearrays/binary ( 0x1234... ), then you will still pass it as text through the API but ensure your SQL text puts the parameter without any quotes around it. \n If you\u2019re using the Dune Python SDK, check out the  sdk doc page  (/api-reference/overview/sdks)  for an example. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/queries/endpoint/query-object) Get Latest Query Result in CSV  (/api-reference/executions/endpoint/get-query-result-csv) Create Query  (/api-reference/queries/endpoint/create) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Queries  (#queries) Query Parameters  (#query-parameters)", "url": "https://docs.dune.com/api-reference/queries/endpoint/query-object#query-parameters"}
{"content": "\u200b Use Cases \n \n Recommend trending or emerging marketplaces by tracking shifts in the market share over time. \n Feed into a marketing ROI tracker to assess campaign impacts on marketplace market share. \n Build a competive analysis tool to monitor marketplaces and sectors\u2019 market share over time. \n \n ", "url": "https://docs.dune.com/api-reference/markets/endpoint/marketplace_marketshare#use-cases"}
{"content": "\u200b Column Descriptions \n Column Description Type time Date of the marketshare data string market Sector identifier: \u2018dex\u2019 or \u2018nft\u2019 string blockchain The blockchain where the marketplace operates on string project Specific DEX or NFT marketplace name string version Contract version of the marketplace protocol, e.g. \u2018v2\u2019 string volume_usd USD volume traded on the marketplace double trades Number of trades on the marketplace int Headers \u200b  (#parameter-x-dune-api-key) X-Dune-Api-Key string required API Key for the service Path Parameters \u200b  (#parameter-market) market string required Sector of the marketshare, either 'dex' or 'nft' \u200b  (#parameter-chain) chain string required Chain name (use Dune namespace, e.g. ethereum, solana, bnb, polygon, etc) Query Parameters \u200b  (#parameter-api-key) api_key string API Key, alternative to using the HTTP header X-Dune-Api-Key \u200b  (#parameter-allow-partial-results) allow_partial_results boolean This enables returning a query result that was too large and only a partial result is\navailable. By default allow_partial_results is set to false and a failed state is returned. \u200b  (#parameter-columns) columns string Specifies a comma-separated list of column names to return. If omitted, all columns are included.\nTip: use this to limit the result to specific columns, reducing datapoints cost of the call. \u200b  (#parameter-filters) filters string Expression to filter out rows from the results to return. This expression is similar to\na SQL WHERE clause. More details about it in the Filtering section of the doc.\nThis parameter is incompatible with sample_count. \u200b  (#parameter-ignore-max-datapoints-per-request) ignore_max_datapoints_per_request boolean There is a default 250,000 datapoints limit to make sure you don't accidentally spend all\nyour credits in one call. To ignore the max limit, you can add\nignore_max_datapoints_per_request=true \u200b  (#parameter-limit) limit integer Limit number of rows to return. This together with 'offset' allows easy pagination through\nresults in an incremental and efficient way. This parameter is incompatible\nwith sampling (sample_count). \u200b  (#parameter-offset) offset integer Offset row number to start (inclusive, first row means offset=0) returning results\nfrom. This together with 'limit' allows easy pagination through results in an\nincremental and efficient way. This parameter is incompatible with sampling (sample_count). \u200b  (#parameter-query-id) queryID integer required \u200b  (#parameter-sample-count) sample_count integer Number of rows to return from the result by sampling the data. This is useful when you\nwant to get a uniform sample instead of the entire result. If the result has less\nthan the sample count, the entire result is returned. Note that this will return a\nrandomized sample, so not every call will return the same result. This parameter is\nincompatible with  offset ,  limit , and  filters  parameters. \u200b  (#parameter-sort-by) sort_by string Expression to define the order in which the results should be returned. This expression\nis similar to a SQL ORDER BY clause. More details about it in the Sorting section of the doc. Response 200 - application/json \u200b  (#response-cancelled-at) cancelled_at string Timestamp of when the query execution was cancelled, if applicable. \u200b  (#response-execution-ended-at) execution_ended_at string Timestamp of when the query execution ended. \u200b  (#response-execution-id) execution_id string Unique identifier for the execution of the query. \u200b  (#response-execution-started-at) execution_started_at string Timestamp of when the query execution started. \u200b  (#response-expires-at) expires_at string Timestamp of when the query result expires. \u200b  (#response-is-execution-finished) is_execution_finished boolean Whether the state of the query execution is terminal. This can be used for polling purposes. \u200b  (#response-next-offset) next_offset integer Offset that can be used to retrieve the next page of results. \u200b  (#response-next-uri) next_uri string URI that can be used to fetch the next page of results. \u200b  (#response-query-id) query_id integer Unique identifier of the query. \u200b  (#response-result) result object The object containing the results and metadata of the query execution Show   child attributes \u200b  (#response-result-metadata) result. metadata object Metadata about the execution of the query, including details like column names,\nrow counts, and execution times. Show   child attributes \u200b  (#response-result-metadata-column-names) result.metadata. column_names string[] Names of the columns in the result set. \u200b  (#response-result-metadata-column-types) result.metadata. column_types string[] Types of the columns in the result set. \u200b  (#response-result-metadata-datapoint-count) result.metadata. datapoint_count integer Results cell count is used for billing/pricing plans\nhere we expose the these values to the user, so that they can track their costs \u200b  (#response-result-metadata-execution-time-millis) result.metadata. execution_time_millis integer Time in milliseconds that the query took to execute. \u200b  (#response-result-metadata-pending-time-millis) result.metadata. pending_time_millis integer Time in milliseconds that the query was pending before execution. \u200b  (#response-result-metadata-result-set-bytes) result.metadata. result_set_bytes integer ResultSetBytes represents the raw data bytes returned by the SQL execution engine, it includes: \n \n total nr of bytes used on 1 line with all the column names (the header of the result set) \n total nr of bytes for all the row values (the result set of rows) \n \n it doesn't include overheads such as the presence of column names for every row in the JSON result type.\nit also doesn't include opmitizations such as compression \u200b  (#response-result-metadata-row-count) result.metadata. row_count integer Number of rows in the result set for the current page of results. \u200b  (#response-result-metadata-total-result-set-bytes) result.metadata. total_result_set_bytes integer Total number of bytes in the result set. This doesn't include the json representation overhead. \u200b  (#response-result-metadata-total-row-count) result.metadata. total_row_count integer Number of rows in the result set for the entire result set. \u200b  (#response-result-rows) result. rows object[] A list of rows. A row is dictionary of key-value pairs returned by the query,\neach pair corresponding to a column Show   child attributes \u200b  (#response-result-rows-key) result.rows. {key} object \u200b  (#response-state) state string The state of the query execution. \u200b  (#response-submitted-at) submitted_at string Timestamp of when the query was submitted. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /api-reference/markets/endpoint/marketplace_marketshare) Farcaster Users  (/api-reference/farcaster/endpoint/farcaster_users) Project Specific API  (/api-reference/projects/introduction) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com)", "url": "https://docs.dune.com/api-reference/markets/endpoint/marketplace_marketshare#column-descriptions"}
{"content": "\u200b Finding the Trial Data \n To access Dune\u2019s trial data, proceed with the following steps: \n To access the trial data, you will need to have an account on Snowflake. Please create an account on Snowflake before following this guide. \n \n Navigate to the \u201cData Provider\u201d tab in the sidebar. \n Type in \u201cDune\u201d in the search bar. Dune\u2019s Snowflake profile should pop up under \u201cProviders\u201d. \n \n The process can be seen below. Note that Dune has tables on 17 chains available for trial. The specific tables available for each chain can be seen on the chain\u2019s landing page. \n \n ", "url": "https://docs.dune.com/datashare/datashare-trial#finding-the-trial-data"}
{"content": "\u200b Accessing the Trial Data \n Once you\u2019ve identified which chain(s) you\u2019d like to add to your trial, you will take the following steps (note that you will need to repeat this process for each chain you want to add to your trial): \n \n Navigate to the \u201cGet\u201d button under \u201c30 Days Free\u201d. \n Click the \u201cGet\u201d button. \n In the window that pops up, make sure that make sure that \u201cTry for Free\u201d is highlighted and select your preferred options. \n Click \u201cGet\u201d. \n \n When you click \u201cGet\u201d you will be provided with a few options. Database Name:  The prechosen name for the database is here. If you\u2019d like to change the name of the database, you can do so in this box. Roles:  If you would like to limit access to this trial, you can choose which roles can access the data. \n When the data is ready to use, the screen will show a popup. From there if you\u2019d like to immediately start querying the data, you can select \u201cQuery Data\u201d. If you would like to navigate away from the page, you can always return to query the data by selecting \u201cOpen\u201d on the chain\u2019s landing page. \n \n Note that due to Snowflake\u2019s setup, you may need to click the \u201cGet\u201d button twice. Once to copy the data to the local server, and again to actually \u201cGet\u201d the data. To be safe, it\u2019s always good to open the trial data from the landing page to make sure it was successfully added to your Snowflake. \n Once you\u2019ve confirmed that the data has successfully been added to your Snowflake as a database, you are free to begin querying! You can add as many of the trial chains to your Snowflake as you\u2019d like for 30 days. Was this page helpful? Yes No Raise issue  (https://github.com/duneanalytics/dune-docs/issues/new?title=Issue on docs&body=Path: /datashare/datashare-trial) Overview  (/datashare/datashare) FAQs  (/datashare/datashare-faqs) linkedin  (https://www.linkedin.com/company/dune-analytics) github  (https://github.com/duneanalytics) twitter  (https://x.com/dune) discord  (https://discord.gg/ErrzwBz) telegram  (https://t.me/dune_updates) youtube  (https://www.youtube.com/@dunecom) Powered by Mintlify  (https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.dune.com) On this page Finding the Trial Data  (#finding-the-trial-data) Accessing the Trial Data  (#accessing-the-trial-data)", "url": "https://docs.dune.com/datashare/datashare-trial#accessing-the-trial-data"}
